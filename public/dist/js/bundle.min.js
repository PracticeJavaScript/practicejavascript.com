!function e(t,n,r){function s(o,i){if(!n[o]){if(!t[o]){var u="function"==typeof require&&require;if(!i&&u)return u(o,!0);if(a)return a(o,!0);var c=new Error("Cannot find module '"+o+"'");throw c.code="MODULE_NOT_FOUND",c}var p=n[o]={exports:{}};t[o][0].call(p.exports,function(e){var n=t[o][1][e];return s(n||e)},p,p.exports,e,t,n,r)}return n[o].exports}for(var a="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(e,t,n){function r(){function e(e,n){Object.keys(n).forEach(function(r){~t.indexOf(r)||(e[r]=n[r])})}var t=[].slice.call(arguments);return function(){for(var t=[].slice.call(arguments),n=0,r={};n<t.length;n++)e(r,t[n]);return r}}function s(e,t,n){var s=r("name","message","stack","constructor","toJSON")(t||{});this.message=e||"Unspecified AssertionError",this.showDiff=!1;for(var a in s)this[a]=s[a];if((n=n||arguments.callee)&&Error.captureStackTrace)Error.captureStackTrace(this,n);else try{throw new Error}catch(e){this.stack=e.stack}}t.exports=s,s.prototype=Object.create(Error.prototype),s.prototype.name="AssertionError",s.prototype.constructor=s,s.prototype.toJSON=function(e){var t=r("constructor","toJSON","stack")({name:this.name},this);return!1!==e&&this.stack&&(t.stack=this.stack),t}},{}],2:[function(e,t,n){t.exports=e("./lib/chai")},{"./lib/chai":3}],3:[function(e,t,n){var r=[];(n=t.exports={}).version="3.5.0",n.AssertionError=e("assertion-error");var s=e("./chai/utils");n.use=function(e){return~r.indexOf(e)||(e(this,s),r.push(e)),this},n.util=s;var a=e("./chai/config");n.config=a;var o=e("./chai/assertion");n.use(o);var i=e("./chai/core/assertions");n.use(i);var u=e("./chai/interface/expect");n.use(u);var c=e("./chai/interface/should");n.use(c);var p=e("./chai/interface/assert");n.use(p)},{"./chai/assertion":4,"./chai/config":5,"./chai/core/assertions":6,"./chai/interface/assert":7,"./chai/interface/expect":8,"./chai/interface/should":9,"./chai/utils":23,"assertion-error":1}],4:[function(e,t,n){var r=e("./config");t.exports=function(e,t){function n(e,t,n){a(this,"ssfi",n||arguments.callee),a(this,"object",e),a(this,"message",t)}var s=e.AssertionError,a=t.flag;e.Assertion=n,Object.defineProperty(n,"includeStack",{get:function(){return console.warn("Assertion.includeStack is deprecated, use chai.config.includeStack instead."),r.includeStack},set:function(e){console.warn("Assertion.includeStack is deprecated, use chai.config.includeStack instead."),r.includeStack=e}}),Object.defineProperty(n,"showDiff",{get:function(){return console.warn("Assertion.showDiff is deprecated, use chai.config.showDiff instead."),r.showDiff},set:function(e){console.warn("Assertion.showDiff is deprecated, use chai.config.showDiff instead."),r.showDiff=e}}),n.addProperty=function(e,n){t.addProperty(this.prototype,e,n)},n.addMethod=function(e,n){t.addMethod(this.prototype,e,n)},n.addChainableMethod=function(e,n,r){t.addChainableMethod(this.prototype,e,n,r)},n.overwriteProperty=function(e,n){t.overwriteProperty(this.prototype,e,n)},n.overwriteMethod=function(e,n){t.overwriteMethod(this.prototype,e,n)},n.overwriteChainableMethod=function(e,n,r){t.overwriteChainableMethod(this.prototype,e,n,r)},n.prototype.assert=function(e,n,o,i,u,c){var p=t.test(this,arguments);if(!0!==c&&(c=!1),!0!==r.showDiff&&(c=!1),!p){var n=t.getMessage(this,arguments),d=t.getActual(this,arguments);throw new s(n,{actual:d,expected:i,showDiff:c},r.includeStack?this.assert:a(this,"ssfi"))}},Object.defineProperty(n.prototype,"_obj",{get:function(){return a(this,"object")},set:function(e){a(this,"object",e)}})}},{"./config":5}],5:[function(e,t,n){t.exports={includeStack:!1,showDiff:!0,truncateThreshold:40}},{}],6:[function(e,t,n){t.exports=function(e,t){function n(e,n){n&&S(this,"message",n),e=e.toLowerCase();var r=S(this,"object"),s=~["a","e","i","o","u"].indexOf(e.charAt(0))?"an ":"a ";this.assert(e===t.type(r),"expected #{this} to be "+s+e,"expected #{this} not to be "+s+e)}function r(){S(this,"contains",!0)}function s(e,n){t.expectTypes(this,["array","object","string"]),n&&S(this,"message",n);var r=S(this,"object"),s=!1;if("array"===t.type(r)&&"object"===t.type(e)){for(var a in r)if(t.eql(r[a],e)){s=!0;break}}else if("object"===t.type(e)){if(!S(this,"negate")){for(var o in e)new C(r).property(o,e[o]);return}var i={};for(var o in e)i[o]=r[o];s=t.eql(i,e)}else s=void 0!=r&&~r.indexOf(e);this.assert(s,"expected #{this} to include "+t.inspect(e),"expected #{this} to not include "+t.inspect(e))}function a(){var e=S(this,"object"),t=Object.prototype.toString.call(e);this.assert("[object Arguments]"===t,"expected #{this} to be arguments but got "+t,"expected #{this} to not be arguments")}function o(e,t){t&&S(this,"message",t);var n=S(this,"object");if(S(this,"deep"))return this.eql(e);this.assert(e===n,"expected #{this} to equal #{exp}","expected #{this} to not equal #{exp}",e,this._obj,!0)}function i(e,n){n&&S(this,"message",n),this.assert(t.eql(e,S(this,"object")),"expected #{this} to deeply equal #{exp}","expected #{this} to not deeply equal #{exp}",e,this._obj,!0)}function u(e,t){t&&S(this,"message",t);var n=S(this,"object");if(S(this,"doLength")){new C(n,t).to.have.property("length");var r=n.length;this.assert(r>e,"expected #{this} to have a length above #{exp} but got #{act}","expected #{this} to not have a length above #{exp}",e,r)}else this.assert(n>e,"expected #{this} to be above "+e,"expected #{this} to be at most "+e)}function c(e,t){t&&S(this,"message",t);var n=S(this,"object");if(S(this,"doLength")){new C(n,t).to.have.property("length");var r=n.length;this.assert(r>=e,"expected #{this} to have a length at least #{exp} but got #{act}","expected #{this} to have a length below #{exp}",e,r)}else this.assert(n>=e,"expected #{this} to be at least "+e,"expected #{this} to be below "+e)}function p(e,t){t&&S(this,"message",t);var n=S(this,"object");if(S(this,"doLength")){new C(n,t).to.have.property("length");var r=n.length;this.assert(r<e,"expected #{this} to have a length below #{exp} but got #{act}","expected #{this} to not have a length below #{exp}",e,r)}else this.assert(n<e,"expected #{this} to be below "+e,"expected #{this} to be at least "+e)}function d(e,t){t&&S(this,"message",t);var n=S(this,"object");if(S(this,"doLength")){new C(n,t).to.have.property("length");var r=n.length;this.assert(r<=e,"expected #{this} to have a length at most #{exp} but got #{act}","expected #{this} to have a length above #{exp}",e,r)}else this.assert(n<=e,"expected #{this} to be at most "+e,"expected #{this} to be above "+e)}function l(e,n){n&&S(this,"message",n);var r=t.getName(e);this.assert(S(this,"object")instanceof e,"expected #{this} to be an instance of "+r,"expected #{this} to not be an instance of "+r)}function f(e,n){n&&S(this,"message",n);var r=S(this,"object");this.assert(r.hasOwnProperty(e),"expected #{this} to have own property "+t.inspect(e),"expected #{this} to not have own property "+t.inspect(e))}function m(e,n,r){"string"==typeof n&&(r=n,n=null),r&&S(this,"message",r);var s=S(this,"object"),a=Object.getOwnPropertyDescriptor(Object(s),e);a&&n?this.assert(t.eql(n,a),"expected the own property descriptor for "+t.inspect(e)+" on #{this} to match "+t.inspect(n)+", got "+t.inspect(a),"expected the own property descriptor for "+t.inspect(e)+" on #{this} to not match "+t.inspect(n),n,a,!0):this.assert(a,"expected #{this} to have an own property descriptor for "+t.inspect(e),"expected #{this} to not have an own property descriptor for "+t.inspect(e)),S(this,"object",a)}function h(){S(this,"doLength",!0)}function y(e,t){t&&S(this,"message",t);var n=S(this,"object");new C(n,t).to.have.property("length");var r=n.length;this.assert(r==e,"expected #{this} to have a length of #{exp} but got #{act}","expected #{this} to not have a length of #{act}",e,r)}function g(e,t){t&&S(this,"message",t);var n=S(this,"object");this.assert(e.exec(n),"expected #{this} to match "+e,"expected #{this} not to match "+e)}function b(e){var n,r=S(this,"object"),s=!0,a="keys must be given single argument of Array|Object|String, or multiple String arguments";switch(t.type(e)){case"array":if(arguments.length>1)throw new Error(a);break;case"object":if(arguments.length>1)throw new Error(a);e=Object.keys(e);break;default:e=Array.prototype.slice.call(arguments)}if(!e.length)throw new Error("keys required");var o=Object.keys(r),i=e,u=e.length,c=S(this,"any"),p=S(this,"all");if(c||p||(p=!0),c&&(s=i.filter(function(e){return~o.indexOf(e)}).length>0),p&&(s=e.every(function(e){return~o.indexOf(e)}),S(this,"negate")||S(this,"contains")||(s=s&&e.length==o.length)),u>1){var d=(e=e.map(function(e){return t.inspect(e)})).pop();p&&(n=e.join(", ")+", and "+d),c&&(n=e.join(", ")+", or "+d)}else n=t.inspect(e[0]);n=(u>1?"keys ":"key ")+n,n=(S(this,"contains")?"contain ":"have ")+n,this.assert(s,"expected #{this} to "+n,"expected #{this} to not "+n,i.slice(0).sort(),o.sort(),!0)}function v(e,n,r){r&&S(this,"message",r);var s=S(this,"object");new C(s,r).is.a("function");var a=!1,o=null,i=null,u=null;0===arguments.length?(n=null,e=null):e&&(e instanceof RegExp||"string"==typeof e)?(n=e,e=null):e&&e instanceof Error?(o=e,e=null,n=null):"function"==typeof e?(!(i=e.prototype.name)||"Error"===i&&e!==Error)&&(i=e.name||(new e).name):e=null;try{s()}catch(r){if(o)return this.assert(r===o,"expected #{this} to throw #{exp} but #{act} was thrown","expected #{this} to not throw #{exp}",o instanceof Error?o.toString():o,r instanceof Error?r.toString():r),S(this,"object",r),this;if(e&&(this.assert(r instanceof e,"expected #{this} to throw #{exp} but #{act} was thrown","expected #{this} to not throw #{exp} but #{act} was thrown",i,r instanceof Error?r.toString():r),!n))return S(this,"object",r),this;var c="error"===t.type(r)&&"message"in r?r.message:""+r;if(null!=c&&n&&n instanceof RegExp)return this.assert(n.exec(c),"expected #{this} to throw error matching #{exp} but got #{act}","expected #{this} to throw error not matching #{exp}",n,c),S(this,"object",r),this;if(null!=c&&n&&"string"==typeof n)return this.assert(~c.indexOf(n),"expected #{this} to throw error including #{exp} but got #{act}","expected #{this} to throw error not including #{act}",n,c),S(this,"object",r),this;a=!0,u=r}var p="",d=null!==i?i:o?"#{exp}":"an error";a&&(p=" but #{act} was thrown"),this.assert(!0===a,"expected #{this} to throw "+d+p,"expected #{this} to not throw "+d+p,o instanceof Error?o.toString():o,u instanceof Error?u.toString():u),S(this,"object",u)}function w(e,n){n&&S(this,"message",n);var r=S(this,"object"),s=S(this,"itself"),a="function"!==t.type(r)||s?r[e]:r.prototype[e];this.assert("function"==typeof a,"expected #{this} to respond to "+t.inspect(e),"expected #{this} to not respond to "+t.inspect(e))}function x(e,n){n&&S(this,"message",n);var r=e(S(this,"object"));this.assert(r,"expected #{this} to satisfy "+t.objDisplay(e),"expected #{this} to not satisfy"+t.objDisplay(e),!this.negate,r)}function A(e,n,r){r&&S(this,"message",r);var s=S(this,"object");if(new C(s,r).is.a("number"),"number"!==t.type(e)||"number"!==t.type(n))throw new Error("the arguments to closeTo or approximately must be numbers");this.assert(Math.abs(s-e)<=n,"expected #{this} to be close to "+e+" +/- "+n,"expected #{this} not to be close to "+e+" +/- "+n)}function O(e,t,n){return e.every(function(e){return n?t.some(function(t){return n(e,t)}):-1!==t.indexOf(e)})}function E(e,t){t&&S(this,"message",t);var n=S(this,"object");new C(e).to.be.an("array"),this.assert(e.indexOf(n)>-1,"expected #{this} to be one of #{exp}","expected #{this} to not be one of #{exp}",e,n)}function j(e,t,n){n&&S(this,"message",n);var r=S(this,"object");new C(e,n).to.have.property(t),new C(r).is.a("function");var s=e[t];r(),this.assert(s!==e[t],"expected ."+t+" to change","expected ."+t+" to not change")}function N(e,t,n){n&&S(this,"message",n);var r=S(this,"object");new C(e,n).to.have.property(t),new C(r).is.a("function");var s=e[t];r(),this.assert(e[t]-s>0,"expected ."+t+" to increase","expected ."+t+" to not increase")}function R(e,t,n){n&&S(this,"message",n);var r=S(this,"object");new C(e,n).to.have.property(t),new C(r).is.a("function");var s=e[t];r(),this.assert(e[t]-s<0,"expected ."+t+" to decrease","expected ."+t+" to not decrease")}var C=e.Assertion,S=(Object.prototype.toString,t.flag);["to","be","been","is","and","has","have","with","that","which","at","of","same"].forEach(function(e){C.addProperty(e,function(){return this})}),C.addProperty("not",function(){S(this,"negate",!0)}),C.addProperty("deep",function(){S(this,"deep",!0)}),C.addProperty("any",function(){S(this,"any",!0),S(this,"all",!1)}),C.addProperty("all",function(){S(this,"all",!0),S(this,"any",!1)}),C.addChainableMethod("an",n),C.addChainableMethod("a",n),C.addChainableMethod("include",s,r),C.addChainableMethod("contain",s,r),C.addChainableMethod("contains",s,r),C.addChainableMethod("includes",s,r),C.addProperty("ok",function(){this.assert(S(this,"object"),"expected #{this} to be truthy","expected #{this} to be falsy")}),C.addProperty("true",function(){this.assert(!0===S(this,"object"),"expected #{this} to be true","expected #{this} to be false",!this.negate)}),C.addProperty("false",function(){this.assert(!1===S(this,"object"),"expected #{this} to be false","expected #{this} to be true",!!this.negate)}),C.addProperty("null",function(){this.assert(null===S(this,"object"),"expected #{this} to be null","expected #{this} not to be null")}),C.addProperty("undefined",function(){this.assert(void 0===S(this,"object"),"expected #{this} to be undefined","expected #{this} not to be undefined")}),C.addProperty("NaN",function(){this.assert(isNaN(S(this,"object")),"expected #{this} to be NaN","expected #{this} not to be NaN")}),C.addProperty("exist",function(){this.assert(null!=S(this,"object"),"expected #{this} to exist","expected #{this} to not exist")}),C.addProperty("empty",function(){var e=S(this,"object"),t=e;Array.isArray(e)||"string"==typeof object?t=e.length:"object"==typeof e&&(t=Object.keys(e).length),this.assert(!t,"expected #{this} to be empty","expected #{this} not to be empty")}),C.addProperty("arguments",a),C.addProperty("Arguments",a),C.addMethod("equal",o),C.addMethod("equals",o),C.addMethod("eq",o),C.addMethod("eql",i),C.addMethod("eqls",i),C.addMethod("above",u),C.addMethod("gt",u),C.addMethod("greaterThan",u),C.addMethod("least",c),C.addMethod("gte",c),C.addMethod("below",p),C.addMethod("lt",p),C.addMethod("lessThan",p),C.addMethod("most",d),C.addMethod("lte",d),C.addMethod("within",function(e,t,n){n&&S(this,"message",n);var r=S(this,"object"),s=e+".."+t;if(S(this,"doLength")){new C(r,n).to.have.property("length");var a=r.length;this.assert(a>=e&&a<=t,"expected #{this} to have a length within "+s,"expected #{this} to not have a length within "+s)}else this.assert(r>=e&&r<=t,"expected #{this} to be within "+s,"expected #{this} to not be within "+s)}),C.addMethod("instanceof",l),C.addMethod("instanceOf",l),C.addMethod("property",function(e,n,r){r&&S(this,"message",r);var s=!!S(this,"deep"),a=s?"deep property ":"property ",o=S(this,"negate"),i=S(this,"object"),u=s?t.getPathInfo(e,i):null,c=s?u.exists:t.hasProperty(e,i),p=s?u.value:i[e];if(o&&arguments.length>1){if(void 0===p)throw r=null!=r?r+": ":"",new Error(r+t.inspect(i)+" has no "+a+t.inspect(e))}else this.assert(c,"expected #{this} to have a "+a+t.inspect(e),"expected #{this} to not have "+a+t.inspect(e));arguments.length>1&&this.assert(n===p,"expected #{this} to have a "+a+t.inspect(e)+" of #{exp}, but got #{act}","expected #{this} to not have a "+a+t.inspect(e)+" of #{act}",n,p),S(this,"object",p)}),C.addMethod("ownProperty",f),C.addMethod("haveOwnProperty",f),C.addMethod("ownPropertyDescriptor",m),C.addMethod("haveOwnPropertyDescriptor",m),C.addChainableMethod("length",y,h),C.addMethod("lengthOf",y),C.addMethod("match",g),C.addMethod("matches",g),C.addMethod("string",function(e,n){n&&S(this,"message",n);var r=S(this,"object");new C(r,n).is.a("string"),this.assert(~r.indexOf(e),"expected #{this} to contain "+t.inspect(e),"expected #{this} to not contain "+t.inspect(e))}),C.addMethod("keys",b),C.addMethod("key",b),C.addMethod("throw",v),C.addMethod("throws",v),C.addMethod("Throw",v),C.addMethod("respondTo",w),C.addMethod("respondsTo",w),C.addProperty("itself",function(){S(this,"itself",!0)}),C.addMethod("satisfy",x),C.addMethod("satisfies",x),C.addMethod("closeTo",A),C.addMethod("approximately",A),C.addMethod("members",function(e,n){n&&S(this,"message",n);var r=S(this,"object");new C(r).to.be.an("array"),new C(e).to.be.an("array");var s=S(this,"deep")?t.eql:void 0;if(S(this,"contains"))return this.assert(O(e,r,s),"expected #{this} to be a superset of #{act}","expected #{this} to not be a superset of #{act}",r,e);this.assert(O(r,e,s)&&O(e,r,s),"expected #{this} to have the same members as #{act}","expected #{this} to not have the same members as #{act}",r,e)}),C.addMethod("oneOf",E),C.addChainableMethod("change",j),C.addChainableMethod("changes",j),C.addChainableMethod("increase",N),C.addChainableMethod("increases",N),C.addChainableMethod("decrease",R),C.addChainableMethod("decreases",R),C.addProperty("extensible",function(){var e,t=S(this,"object");try{e=Object.isExtensible(t)}catch(t){if(!(t instanceof TypeError))throw t;e=!1}this.assert(e,"expected #{this} to be extensible","expected #{this} to not be extensible")}),C.addProperty("sealed",function(){var e,t=S(this,"object");try{e=Object.isSealed(t)}catch(t){if(!(t instanceof TypeError))throw t;e=!0}this.assert(e,"expected #{this} to be sealed","expected #{this} to not be sealed")}),C.addProperty("frozen",function(){var e,t=S(this,"object");try{e=Object.isFrozen(t)}catch(t){if(!(t instanceof TypeError))throw t;e=!0}this.assert(e,"expected #{this} to be frozen","expected #{this} to not be frozen")})}},{}],7:[function(e,t,n){t.exports=function(e,t){var n=e.Assertion,r=t.flag,s=e.assert=function(t,r){new n(null,null,e.assert).assert(t,r,"[ negation message unavailable ]")};s.fail=function(t,n,r,a){throw r=r||"assert.fail()",new e.AssertionError(r,{actual:t,expected:n,operator:a},s.fail)},s.isOk=function(e,t){new n(e,t).is.ok},s.isNotOk=function(e,t){new n(e,t).is.not.ok},s.equal=function(e,t,a){var o=new n(e,a,s.equal);o.assert(t==r(o,"object"),"expected #{this} to equal #{exp}","expected #{this} to not equal #{act}",t,e)},s.notEqual=function(e,t,a){var o=new n(e,a,s.notEqual);o.assert(t!=r(o,"object"),"expected #{this} to not equal #{exp}","expected #{this} to equal #{act}",t,e)},s.strictEqual=function(e,t,r){new n(e,r).to.equal(t)},s.notStrictEqual=function(e,t,r){new n(e,r).to.not.equal(t)},s.deepEqual=function(e,t,r){new n(e,r).to.eql(t)},s.notDeepEqual=function(e,t,r){new n(e,r).to.not.eql(t)},s.isAbove=function(e,t,r){new n(e,r).to.be.above(t)},s.isAtLeast=function(e,t,r){new n(e,r).to.be.least(t)},s.isBelow=function(e,t,r){new n(e,r).to.be.below(t)},s.isAtMost=function(e,t,r){new n(e,r).to.be.most(t)},s.isTrue=function(e,t){new n(e,t).is.true},s.isNotTrue=function(e,t){new n(e,t).to.not.equal(!0)},s.isFalse=function(e,t){new n(e,t).is.false},s.isNotFalse=function(e,t){new n(e,t).to.not.equal(!1)},s.isNull=function(e,t){new n(e,t).to.equal(null)},s.isNotNull=function(e,t){new n(e,t).to.not.equal(null)},s.isNaN=function(e,t){new n(e,t).to.be.NaN},s.isNotNaN=function(e,t){new n(e,t).not.to.be.NaN},s.isUndefined=function(e,t){new n(e,t).to.equal(void 0)},s.isDefined=function(e,t){new n(e,t).to.not.equal(void 0)},s.isFunction=function(e,t){new n(e,t).to.be.a("function")},s.isNotFunction=function(e,t){new n(e,t).to.not.be.a("function")},s.isObject=function(e,t){new n(e,t).to.be.a("object")},s.isNotObject=function(e,t){new n(e,t).to.not.be.a("object")},s.isArray=function(e,t){new n(e,t).to.be.an("array")},s.isNotArray=function(e,t){new n(e,t).to.not.be.an("array")},s.isString=function(e,t){new n(e,t).to.be.a("string")},s.isNotString=function(e,t){new n(e,t).to.not.be.a("string")},s.isNumber=function(e,t){new n(e,t).to.be.a("number")},s.isNotNumber=function(e,t){new n(e,t).to.not.be.a("number")},s.isBoolean=function(e,t){new n(e,t).to.be.a("boolean")},s.isNotBoolean=function(e,t){new n(e,t).to.not.be.a("boolean")},s.typeOf=function(e,t,r){new n(e,r).to.be.a(t)},s.notTypeOf=function(e,t,r){new n(e,r).to.not.be.a(t)},s.instanceOf=function(e,t,r){new n(e,r).to.be.instanceOf(t)},s.notInstanceOf=function(e,t,r){new n(e,r).to.not.be.instanceOf(t)},s.include=function(e,t,r){new n(e,r,s.include).include(t)},s.notInclude=function(e,t,r){new n(e,r,s.notInclude).not.include(t)},s.match=function(e,t,r){new n(e,r).to.match(t)},s.notMatch=function(e,t,r){new n(e,r).to.not.match(t)},s.property=function(e,t,r){new n(e,r).to.have.property(t)},s.notProperty=function(e,t,r){new n(e,r).to.not.have.property(t)},s.deepProperty=function(e,t,r){new n(e,r).to.have.deep.property(t)},s.notDeepProperty=function(e,t,r){new n(e,r).to.not.have.deep.property(t)},s.propertyVal=function(e,t,r,s){new n(e,s).to.have.property(t,r)},s.propertyNotVal=function(e,t,r,s){new n(e,s).to.not.have.property(t,r)},s.deepPropertyVal=function(e,t,r,s){new n(e,s).to.have.deep.property(t,r)},s.deepPropertyNotVal=function(e,t,r,s){new n(e,s).to.not.have.deep.property(t,r)},s.lengthOf=function(e,t,r){new n(e,r).to.have.length(t)},s.throws=function(e,t,s,a){("string"==typeof t||t instanceof RegExp)&&(s=t,t=null);var o=new n(e,a).to.throw(t,s);return r(o,"object")},s.doesNotThrow=function(e,t,r){"string"==typeof t&&(r=t,t=null),new n(e,r).to.not.Throw(t)},s.operator=function(e,s,a,o){var i;switch(s){case"==":i=e==a;break;case"===":i=e===a;break;case">":i=e>a;break;case">=":i=e>=a;break;case"<":i=e<a;break;case"<=":i=e<=a;break;case"!=":i=e!=a;break;case"!==":i=e!==a;break;default:throw new Error('Invalid operator "'+s+'"')}var u=new n(i,o);u.assert(!0===r(u,"object"),"expected "+t.inspect(e)+" to be "+s+" "+t.inspect(a),"expected "+t.inspect(e)+" to not be "+s+" "+t.inspect(a))},s.closeTo=function(e,t,r,s){new n(e,s).to.be.closeTo(t,r)},s.approximately=function(e,t,r,s){new n(e,s).to.be.approximately(t,r)},s.sameMembers=function(e,t,r){new n(e,r).to.have.same.members(t)},s.sameDeepMembers=function(e,t,r){new n(e,r).to.have.same.deep.members(t)},s.includeMembers=function(e,t,r){new n(e,r).to.include.members(t)},s.includeDeepMembers=function(e,t,r){new n(e,r).to.include.deep.members(t)},s.oneOf=function(e,t,r){new n(e,r).to.be.oneOf(t)},s.changes=function(e,t,r){new n(e).to.change(t,r)},s.doesNotChange=function(e,t,r){new n(e).to.not.change(t,r)},s.increases=function(e,t,r){new n(e).to.increase(t,r)},s.doesNotIncrease=function(e,t,r){new n(e).to.not.increase(t,r)},s.decreases=function(e,t,r){new n(e).to.decrease(t,r)},s.doesNotDecrease=function(e,t,r){new n(e).to.not.decrease(t,r)},s.ifError=function(e){if(e)throw e},s.isExtensible=function(e,t){new n(e,t).to.be.extensible},s.isNotExtensible=function(e,t){new n(e,t).to.not.be.extensible},s.isSealed=function(e,t){new n(e,t).to.be.sealed},s.isNotSealed=function(e,t){new n(e,t).to.not.be.sealed},s.isFrozen=function(e,t){new n(e,t).to.be.frozen},s.isNotFrozen=function(e,t){new n(e,t).to.not.be.frozen},function e(t,n){return s[n]=s[t],e}("isOk","ok")("isNotOk","notOk")("throws","throw")("throws","Throw")("isExtensible","extensible")("isNotExtensible","notExtensible")("isSealed","sealed")("isNotSealed","notSealed")("isFrozen","frozen")("isNotFrozen","notFrozen")}},{}],8:[function(e,t,n){t.exports=function(e,t){e.expect=function(t,n){return new e.Assertion(t,n)},e.expect.fail=function(t,n,r,s){throw r=r||"expect.fail()",new e.AssertionError(r,{actual:t,expected:n,operator:s},e.expect.fail)}}},{}],9:[function(e,t,n){t.exports=function(e,t){function n(){function t(){return this instanceof String||this instanceof Number||this instanceof Boolean?new r(this.valueOf(),null,t):new r(this,null,t)}function n(e){Object.defineProperty(this,"should",{value:e,enumerable:!0,configurable:!0,writable:!0})}Object.defineProperty(Object.prototype,"should",{set:n,get:t,configurable:!0});var s={};return s.fail=function(t,n,r,a){throw r=r||"should.fail()",new e.AssertionError(r,{actual:t,expected:n,operator:a},s.fail)},s.equal=function(e,t,n){new r(e,n).to.equal(t)},s.Throw=function(e,t,n,s){new r(e,s).to.Throw(t,n)},s.exist=function(e,t){new r(e,t).to.exist},s.not={},s.not.equal=function(e,t,n){new r(e,n).to.not.equal(t)},s.not.Throw=function(e,t,n,s){new r(e,s).to.not.Throw(t,n)},s.not.exist=function(e,t){new r(e,t).to.not.exist},s.throw=s.Throw,s.not.throw=s.not.Throw,s}var r=e.Assertion;e.should=n,e.Should=n}},{}],10:[function(e,t,n){var r=e("./transferFlags"),s=e("./flag"),a=e("../config"),o="__proto__"in Object,i=/^(?:length|name|arguments|caller)$/,u=Function.prototype.call,c=Function.prototype.apply;t.exports=function(e,t,n,p){"function"!=typeof p&&(p=function(){});var d={method:n,chainingBehavior:p};e.__methods||(e.__methods={}),e.__methods[t]=d,Object.defineProperty(e,t,{get:function(){d.chainingBehavior.call(this);var t=function e(){s(this,"ssfi")&&!1===a.includeStack&&s(this,"ssfi",e);var t=d.method.apply(this,arguments);return void 0===t?this:t};if(o){var n=t.__proto__=Object.create(this);n.call=u,n.apply=c}else Object.getOwnPropertyNames(e).forEach(function(n){if(!i.test(n)){var r=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,r)}});return r(this,t),t},configurable:!0})}},{"../config":5,"./flag":14,"./transferFlags":30}],11:[function(e,t,n){var r=e("../config"),s=e("./flag");t.exports=function(e,t,n){e[t]=function(){s(this,"ssfi")&&!1===r.includeStack&&s(this,"ssfi",e[t]);var a=n.apply(this,arguments);return void 0===a?this:a}}},{"../config":5,"./flag":14}],12:[function(e,t,n){var r=e("../config"),s=e("./flag");t.exports=function(e,t,n){Object.defineProperty(e,t,{get:function e(){s(this,"ssfi")&&!1===r.includeStack&&s(this,"ssfi",e);var t=n.call(this);return void 0===t?this:t},configurable:!0})}},{"../config":5,"./flag":14}],13:[function(e,t,n){var r=e("assertion-error"),s=e("./flag"),a=e("type-detect");t.exports=function(e,t){var e=s(e,"object");(t=t.map(function(e){return e.toLowerCase()})).sort();var n=t.map(function(e,n){var r=~["a","e","i","o","u"].indexOf(e.charAt(0))?"an":"a";return(t.length>1&&n===t.length-1?"or ":"")+r+" "+e}).join(", ");if(!t.some(function(t){return a(e)===t}))throw new r("object tested must be "+n+", but "+a(e)+" given")}},{"./flag":14,"assertion-error":1,"type-detect":41}],14:[function(e,t,n){t.exports=function(e,t,n){var r=e.__flags||(e.__flags=Object.create(null));if(3!==arguments.length)return r[t];r[t]=n}},{}],15:[function(e,t,n){t.exports=function(e,t){return t.length>4?t[4]:e._obj}},{}],16:[function(e,t,n){t.exports=function(e){var t=[];for(var n in e)t.push(n);return t}},{}],17:[function(e,t,n){var r=e("./flag"),s=e("./getActual"),a=(e("./inspect"),e("./objDisplay"));t.exports=function(e,t){var n=r(e,"negate"),o=r(e,"object"),i=t[3],u=s(e,t),c=n?t[2]:t[1],p=r(e,"message");return"function"==typeof c&&(c=c()),c=c||"",c=c.replace(/#\{this\}/g,function(){return a(o)}).replace(/#\{act\}/g,function(){return a(u)}).replace(/#\{exp\}/g,function(){return a(i)}),p?p+": "+c:c}},{"./flag":14,"./getActual":15,"./inspect":24,"./objDisplay":25}],18:[function(e,t,n){t.exports=function(e){if(e.name)return e.name;var t=/^\s?function ([^(]*)\(/.exec(e);return t&&t[1]?t[1]:""}},{}],19:[function(e,t,n){function r(e){return e.replace(/([^\\])\[/g,"$1.[").match(/(\\\.|[^.]+?)+/g).map(function(e){var t=/^\[(\d+)\]$/.exec(e);return t?{i:parseFloat(t[1])}:{p:e.replace(/\\([.\[\]])/g,"$1")}})}function s(e,t,n){for(var r,s=t,a=0,o=n=void 0===n?e.length:n;a<o;a++){var i=e[a];s?(void 0!==i.p?s=s[i.p]:void 0!==i.i&&(s=s[i.i]),a==o-1&&(r=s)):r=void 0}return r}var a=e("./hasProperty");t.exports=function(e,t){var n=r(e),o=n[n.length-1],i={parent:n.length>1?s(n,t,n.length-1):t,name:o.p||o.i,value:s(n,t)};return i.exists=a(i.name,i.parent),i}},{"./hasProperty":22}],20:[function(e,t,n){var r=e("./getPathInfo");t.exports=function(e,t){return r(e,t).value}},{"./getPathInfo":19}],21:[function(e,t,n){t.exports=function(e){function t(e){-1===n.indexOf(e)&&n.push(e)}for(var n=Object.getOwnPropertyNames(e),r=Object.getPrototypeOf(e);null!==r;)Object.getOwnPropertyNames(r).forEach(t),r=Object.getPrototypeOf(r);return n}},{}],22:[function(e,t,n){var r=e("type-detect"),s={number:Number,string:String};t.exports=function(e,t){var n=r(t);return"null"!==n&&"undefined"!==n&&(s[n]&&"object"!=typeof t&&(t=new s[n](t)),e in t)}},{"type-detect":41}],23:[function(e,t,n){(n=t.exports={}).test=e("./test"),n.type=e("type-detect"),n.expectTypes=e("./expectTypes"),n.getMessage=e("./getMessage"),n.getActual=e("./getActual"),n.inspect=e("./inspect"),n.objDisplay=e("./objDisplay"),n.flag=e("./flag"),n.transferFlags=e("./transferFlags"),n.eql=e("deep-eql"),n.getPathValue=e("./getPathValue"),n.getPathInfo=e("./getPathInfo"),n.hasProperty=e("./hasProperty"),n.getName=e("./getName"),n.addProperty=e("./addProperty"),n.addMethod=e("./addMethod"),n.overwriteProperty=e("./overwriteProperty"),n.overwriteMethod=e("./overwriteMethod"),n.addChainableMethod=e("./addChainableMethod"),n.overwriteChainableMethod=e("./overwriteChainableMethod")},{"./addChainableMethod":10,"./addMethod":11,"./addProperty":12,"./expectTypes":13,"./flag":14,"./getActual":15,"./getMessage":17,"./getName":18,"./getPathInfo":19,"./getPathValue":20,"./hasProperty":22,"./inspect":24,"./objDisplay":25,"./overwriteChainableMethod":26,"./overwriteMethod":27,"./overwriteProperty":28,"./test":29,"./transferFlags":30,"deep-eql":32,"type-detect":41}],24:[function(e,t,n){function r(e,t,n,r){return s({showHidden:t,seen:[],stylize:function(e){return e}},e,void 0===n?2:n)}function s(e,t,r){if(t&&"function"==typeof t.inspect&&t.inspect!==n.inspect&&(!t.constructor||t.constructor.prototype!==t)){var m=t.inspect(r);return"string"!=typeof m&&(m=s(e,m,r)),m}var v=a(e,t);if(v)return v;if(b(t)){if("outerHTML"in t)return t.outerHTML;try{if(document.xmlVersion)return(new XMLSerializer).serializeToString(t);var w=document.createElementNS("http://www.w3.org/1999/xhtml","_");return w.appendChild(t.cloneNode(!1)),html=w.innerHTML.replace("><",">"+t.innerHTML+"<"),w.innerHTML="",html}catch(e){}}var x=g(t),A=e.showHidden?y(t):x;if(0===A.length||f(t)&&(1===A.length&&"stack"===A[0]||2===A.length&&"description"===A[0]&&"stack"===A[1])){if("function"==typeof t){var O=(R=h(t))?": "+R:"";return e.stylize("[Function"+O+"]","special")}if(d(t))return e.stylize(RegExp.prototype.toString.call(t),"regexp");if(l(t))return e.stylize(Date.prototype.toUTCString.call(t),"date");if(f(t))return o(t)}var E="",j=!1,N=["{","}"];if(p(t)&&(j=!0,N=["[","]"]),"function"==typeof t){var R=h(t);E=" [Function"+(O=R?": "+R:"")+"]"}if(d(t)&&(E=" "+RegExp.prototype.toString.call(t)),l(t)&&(E=" "+Date.prototype.toUTCString.call(t)),f(t))return o(t);if(0===A.length&&(!j||0==t.length))return N[0]+E+N[1];if(r<0)return d(t)?e.stylize(RegExp.prototype.toString.call(t),"regexp"):e.stylize("[Object]","special");e.seen.push(t);var C;return C=j?i(e,t,r,x,A):A.map(function(n){return u(e,t,r,x,n,j)}),e.seen.pop(),c(C,E,N)}function a(e,t){switch(typeof t){case"undefined":return e.stylize("undefined","undefined");case"string":var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string");case"number":return 0===t&&1/t==-1/0?e.stylize("-0","number"):e.stylize(""+t,"number");case"boolean":return e.stylize(""+t,"boolean")}if(null===t)return e.stylize("null","null")}function o(e){return"["+Error.prototype.toString.call(e)+"]"}function i(e,t,n,r,s){for(var a=[],o=0,i=t.length;o<i;++o)Object.prototype.hasOwnProperty.call(t,String(o))?a.push(u(e,t,n,r,String(o),!0)):a.push("");return s.forEach(function(s){s.match(/^\d+$/)||a.push(u(e,t,n,r,s,!0))}),a}function u(e,t,n,r,a,o){var i,u;if(t.__lookupGetter__&&(t.__lookupGetter__(a)?u=t.__lookupSetter__(a)?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):t.__lookupSetter__(a)&&(u=e.stylize("[Setter]","special"))),r.indexOf(a)<0&&(i="["+a+"]"),u||(e.seen.indexOf(t[a])<0?(u=null===n?s(e,t[a],null):s(e,t[a],n-1)).indexOf("\n")>-1&&(u=o?u.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+u.split("\n").map(function(e){return"   "+e}).join("\n")):u=e.stylize("[Circular]","special")),void 0===i){if(o&&a.match(/^\d+$/))return u;(i=JSON.stringify(""+a)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(i=i.substr(1,i.length-2),i=e.stylize(i,"name")):(i=i.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),i=e.stylize(i,"string"))}return i+": "+u}function c(e,t,n){var r=0;return e.reduce(function(e,t){return r++,t.indexOf("\n")>=0&&r++,e+t.length+1},0)>60?n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1]:n[0]+t+" "+e.join(", ")+" "+n[1]}function p(e){return Array.isArray(e)||"object"==typeof e&&"[object Array]"===m(e)}function d(e){return"object"==typeof e&&"[object RegExp]"===m(e)}function l(e){return"object"==typeof e&&"[object Date]"===m(e)}function f(e){return"object"==typeof e&&"[object Error]"===m(e)}function m(e){return Object.prototype.toString.call(e)}var h=e("./getName"),y=e("./getProperties"),g=e("./getEnumerableProperties");t.exports=r;var b=function(e){return"object"==typeof HTMLElement?e instanceof HTMLElement:e&&"object"==typeof e&&1===e.nodeType&&"string"==typeof e.nodeName}},{"./getEnumerableProperties":16,"./getName":18,"./getProperties":21}],25:[function(e,t,n){var r=e("./inspect"),s=e("../config");t.exports=function(e){var t=r(e),n=Object.prototype.toString.call(e);if(s.truncateThreshold&&t.length>=s.truncateThreshold){if("[object Function]"===n)return e.name&&""!==e.name?"[Function: "+e.name+"]":"[Function]";if("[object Array]"===n)return"[ Array("+e.length+") ]";if("[object Object]"===n){var a=Object.keys(e);return"{ Object ("+(a.length>2?a.splice(0,2).join(", ")+", ...":a.join(", "))+") }"}return t}return t}},{"../config":5,"./inspect":24}],26:[function(e,t,n){t.exports=function(e,t,n,r){var s=e.__methods[t],a=s.chainingBehavior;s.chainingBehavior=function(){var e=r(a).call(this);return void 0===e?this:e};var o=s.method;s.method=function(){var e=n(o).apply(this,arguments);return void 0===e?this:e}}},{}],27:[function(e,t,n){t.exports=function(e,t,n){var r=e[t],s=function(){return this};r&&"function"==typeof r&&(s=r),e[t]=function(){var e=n(s).apply(this,arguments);return void 0===e?this:e}}},{}],28:[function(e,t,n){t.exports=function(e,t,n){var r=Object.getOwnPropertyDescriptor(e,t),s=function(){};r&&"function"==typeof r.get&&(s=r.get),Object.defineProperty(e,t,{get:function(){var e=n(s).call(this);return void 0===e?this:e},configurable:!0})}},{}],29:[function(e,t,n){var r=e("./flag");t.exports=function(e,t){var n=r(e,"negate"),s=t[0];return n?!s:s}},{"./flag":14}],30:[function(e,t,n){t.exports=function(e,t,n){var r=e.__flags||(e.__flags=Object.create(null));t.__flags||(t.__flags=Object.create(null)),n=3!==arguments.length||n;for(var s in r)(n||"object"!==s&&"ssfi"!==s&&"message"!=s)&&(t.__flags[s]=r[s])}},{}],31:[function(e,t,n){"use strict";function r(e){var t=void 0;t="string"==typeof e?[e]:e.raw;for(var n="",r=0;r<t.length;r++)n+=t[r].replace(/\\\n[ \t]*/g,"").replace(/\\`/g,"`"),r<(arguments.length<=1?0:arguments.length-1)&&(n+=arguments.length<=r+1?void 0:arguments[r+1]);var s=n.split("\n"),a=null;return s.forEach(function(e){var t=e.match(/^(\s+)\S+/);if(t){var n=t[1].length;a=a?Math.min(a,n):n}}),null!==a&&(n=s.map(function(e){return" "===e[0]?e.slice(a):e}).join("\n")),(n=n.trim()).replace(/\\n/g,"\n")}void 0!==t&&(t.exports=r)},{}],32:[function(e,t,n){t.exports=e("./lib/eql")},{"./lib/eql":33}],33:[function(e,t,n){function r(e,t,n){return!!s(e,t)||("date"===h(e)?o(e,t):"regexp"===h(e)?i(e,t):m.isBuffer(e)?d(e,t):"arguments"===h(e)?u(e,t,n):!!a(e,t)&&("object"!==h(e)&&"object"!==h(t)&&"array"!==h(e)&&"array"!==h(t)?s(e,t):f(e,t,n)))}function s(e,t){return e===t?0!==e||1/e==1/t:e!==e&&t!==t}function a(e,t){return h(e)===h(t)}function o(e,t){return"date"===h(t)&&s(e.getTime(),t.getTime())}function i(e,t){return"regexp"===h(t)&&s(e.toString(),t.toString())}function u(e,t,n){return"arguments"===h(t)&&(e=[].slice.call(e),t=[].slice.call(t),r(e,t,n))}function c(e){var t=[];for(var n in e)t.push(n);return t}function p(e,t){if(e.length!==t.length)return!1;for(var n=0,r=!0;n<e.length;n++)if(e[n]!==t[n]){r=!1;break}return r}function d(e,t){return!!m.isBuffer(t)&&p(e,t)}function l(e){return null!==e&&void 0!==e}function f(e,t,n){if(!l(e)||!l(t))return!1;if(e.prototype!==t.prototype)return!1;var s;if(n){for(s=0;s<n.length;s++)if(n[s][0]===e&&n[s][1]===t||n[s][0]===t&&n[s][1]===e)return!0}else n=[];try{var a=c(e),o=c(t)}catch(e){return!1}if(a.sort(),o.sort(),!p(a,o))return!1;n.push([e,t]);var i;for(s=a.length-1;s>=0;s--)if(i=a[s],!r(e[i],t[i],n))return!1;return!0}var m,h=e("type-detect");try{m=e("buffer").Buffer}catch(e){(m={}).isBuffer=function(){return!1}}t.exports=r},{buffer:void 0,"type-detect":34}],34:[function(e,t,n){t.exports=e("./lib/type")},{"./lib/type":35}],35:[function(e,t,n){function r(e){var t=Object.prototype.toString.call(e);return a[t]?a[t]:null===e?"null":void 0===e?"undefined":e===Object(e)?"object":typeof e}function s(){this.tests={}}var a={"[object Array]":"array","[object RegExp]":"regexp","[object Function]":"function","[object Arguments]":"arguments","[object Date]":"date"};(t.exports=r).Library=s,s.prototype.of=r,s.prototype.define=function(e,t){return 1===arguments.length?this.tests[e]:(this.tests[e]=t,this)},s.prototype.test=function(e,t){if(t===r(e))return!0;var n=this.tests[t];if(n&&"regexp"===r(n))return n.test(e);if(n&&"function"===r(n))return n(e);throw new ReferenceError('Type test "'+t+'" not defined or invalid.')}},{}],36:[function(e,t,n){"use strict";t.exports=[{name:"Access Array by index (first)",time:10,prompt:"Return the first value of the Array",given:"const fruits = ['apple', 'banana'];\r",answer:"const fruits = ['apple', 'banana'];\n             return fruits[0];",tests:[{name:"Correct output",test:"assert.deepEqual(output, 'apple') === undefined"},{name:"Returns a String",test:"assert.isString(output) === undefined"}]},{name:"Access Array by index (first)",time:10,prompt:"Return the first value of the Array",given:"const animals = ['chipmunk', 'chimpanzee'];\n           ",answer:"const animals = ['chipmunk', 'chimpanzee'];\n             return animals[0];",tests:[{name:"Correct output",test:"assert.deepEqual(output, 'chipmunk') === undefined"},{name:"Returns a String",test:"assert.isString(output) === undefined"}]},{name:"Access Array by index (last)",time:10,prompt:"Return the last value of the Array",given:"const fruits = ['apple', 'banana', 'orange'];\r",answer:"const fruits = ['apple', 'banana', 'orange'];\n             return fruits[fruits.length - 1];",tests:[{name:"Correct output",test:"assert.deepEqual(output, 'orange') === undefined;"},{name:"Returns a String",test:"assert.isString(output) === undefined;"}]},{name:"Access Array by index (last)",time:10,prompt:"Return the last value of the Array",given:"const animals = ['dog', 'hamster', 'lion'];\n           ",answer:"const animals = ['dog', 'hamster', 'lion'];\n             return animals[animals.length - 1];",tests:[{name:"Correct output",test:"assert.deepEqual(output, 'lion') === undefined;"},{name:"Returns a String",test:"assert.isString(output) === undefined;"}]},{name:"Access Array by index (second)",time:10,prompt:"Return the second value of the Array",given:"const fruits = ['apple', 'banana'];\r",answer:"const fruits = ['apple', 'banana'];\n             return fruits[1];",tests:[{name:"Correct output",test:"assert.deepEqual(output, 'banana') === undefined;"},{name:"Returns a String",test:"assert.isString(output) === undefined;"}]},{name:"Access Array by index (second)",time:10,prompt:"Return the second value of the Array",given:"const animals = ['kitten', 'monkey'];\n           ",answer:"const animals = ['kitten', 'monkey'];\n             return animals[1];",tests:[{name:"Correct output",test:"assert.deepEqual(output, 'monkey') === undefined;"},{name:"Returns a String",test:"assert.isString(output) === undefined;"}]},{name:"Array.forEach()",time:20,prompt:"Iterate through the array, add an 'x' to the end of each fruit, return the array.",given:"const fruits = ['apple', 'banana'];\r",answer:"const fruits = ['apple', 'banana'];\n             const newFruits = [];\n             fruits.forEach(function(item) {\n               newFruits.push(item+'x');\n             });\n             return newFruits;",tests:[{name:"Correct output",test:"assert.deepEqual(output, ['applex', 'bananax']) === undefined;"},{name:"Returns an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 2 items",test:"assert.lengthOf(output, 2) === undefined;"}]},{name:"Array.forEach()",time:20,prompt:"Iterate through the array, add a 'ty' to the end of each animal, return the array.",given:"const animals = ['parrot', 'bat'];\n           ",answer:"const animals = ['parrot', 'bat'];\n             const newAnimals = [];\n             animals.forEach(function(item) {\n               newAnimals.push(item+'ty');\n             });\n             return newAnimals;",tests:[{name:"Correct output",test:"assert.deepEqual(output, ['parrotty', 'batty']) === undefined;"},{name:"Returns an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 2 items",test:"assert.lengthOf(output, 2) === undefined;"}]},{name:"Array.push()",time:10,prompt:"Add 'orange' to the end of the 'fruits' array and return 'fruits'.",given:"const fruits = ['apple', 'banana'];\r",answer:"const fruits = ['apple', 'banana'];\n             fruits.push('orange');\n             return fruits;",tests:[{name:"Correct output",test:"(assert.deepEqual(output, ['apple', 'banana', 'orange']) === undefined);"},{name:"Returns an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 3 items",test:"assert.lengthOf(output, 3) === undefined;"}]},{name:"Array.push()",time:10,prompt:"Add 'sloth' to the end of the 'animals' array and return 'animals'.",given:"const animals = ['crow', 'ox'];\r",answer:"const animals = ['crow', 'ox'];\n             animals.push('sloth');\n             return animals;",tests:[{name:"Correct output",test:"(assert.deepEqual(output, ['crow', 'ox', 'sloth']) === undefined);"},{name:"Returns an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 3 items",test:"assert.lengthOf(output, 3) === undefined;"}]},{name:"Array.shift()",time:10,prompt:"Remove 'apple' from the front of the 'fruits' array and return 'fruits'.",given:"const fruits = ['apple', 'banana', 'orange'];\r",answer:"const fruits = ['apple', 'banana', 'orange'];\n             fruits.shift();\n             return fruits;",tests:[{name:"Output must be correct",test:"assert.deepEqual(output, ['banana', 'orange']) === undefined;"},{name:"Returns an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 2 items",test:"assert.lengthOf(output, 2) === undefined;"}]},{name:"Array.shift()",time:10,prompt:"Remove 'lemur' from the front of the 'animals' array and return 'animals'.",given:"const animals = ['lemur', 'crocodile', 'cat'];\r",answer:"const animals = ['lemur', 'crocodile', 'cat'];\n             animals.shift();\n             return animals;",tests:[{name:"Output must be correct",test:"assert.deepEqual(output, ['crocodile', 'cat']) === undefined;"},{name:"Returns an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 2 items",test:"assert.lengthOf(output, 2) === undefined;"}]},{name:"Array.unshift()",time:10,prompt:"Add 'strawberry' to the front of the 'fruits' array and return 'fruits'.",given:"const fruits = ['apple', 'banana', 'orange'];\r",answer:"const fruits = ['apple', 'banana', 'orange'];\n             fruits.unshift('strawberry');\n             return fruits;",tests:[{name:"Output must be correct",test:"(assert.deepEqual(output, [\n                  'strawberry',\n                  'apple',\n                  'banana',\n                  'orange'\n                ]) === undefined)"},{name:"Must return an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 4 items",test:"assert.lengthOf(output, 4) === undefined;"}]},{name:"Array.unshift()",time:10,prompt:"Add 'octopus' to the front of the 'animals' array and return 'animals'.",given:"const animals = ['pig', 'colt', 'antelope'];\r",answer:"const animals = ['pig', 'colt', 'antelope'];\n             animals.unshift('octopus');\n             return animals;",tests:[{name:"Output must be correct",test:"(assert.deepEqual(output, [\n                  'octopus',\n                  'pig',\n                  'colt',\n                  'antelope'\n                ]) === undefined)"},{name:"Must return an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 4 items",test:"assert.lengthOf(output, 4) === undefined;"}]},{name:"Array.indexOf()",time:10,prompt:"Return the index of 'banana' in the Array.",given:"const fruits = ['strawberry', 'banana', 'mango'];\r",answer:"const fruits = ['strawberry', 'banana', 'mango'];\n             const ind = fruits.indexOf('banana');\n             return ind;",tests:[{name:"Correct output",test:"assert.deepEqual(output, 1) === undefined;"},{name:"Returns a Number",test:"assert.isNumber(output) === undefined;"}]},{name:"Array.indexOf()",time:10,prompt:"Return the index of 'fox' in the Array.",given:"const animals = ['kangaroo', 'fox', 'bison'];\r",answer:"const animals = ['kangaroo', 'fox', 'bison'];\n             const ind = animals.indexOf('fox');\n             return ind;",tests:[{name:"Correct output",test:"assert.deepEqual(output, 1) === undefined;"},{name:"Returns a Number",test:"assert.isNumber(output) === undefined;"}]},{name:"Array.concat()",time:10,prompt:"Merge the two arrays using Array's 'concat()' method. Return the resulting array.",given:"const fruits = ['strawberry', 'banana'];\rconst otherFruits = ['pear','peach'];\r",answer:"const fruits = ['strawberry', 'banana'];\n            const otherFruits = ['pear','peach'];\n            const allTheFruits = fruits.concat(otherFruits);\n            return allTheFruits;\r",tests:[{name:"Correct output",test:"(assert.deepEqual(output, [\n                  'strawberry',\n                  'banana',\n                  'pear',\n                  'peach'\n                ]) === undefined\n              );"},{name:"Returns an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 4 items",test:"assert.lengthOf(output, 4) === undefined;"}]},{name:"Array.concat()",time:10,prompt:"Merge the two arrays using Array's 'concat()' method. Return the resulting array.",given:"const adjectives = ['giant', 'chunky'];\n            const verbs = ['turn','whisper'];\n            ",answer:"const adjectives = ['giant', 'chunky'];\n             const verbs = ['turn','whisper'];\n             const words = adjectives.concat(verbs);\n             return words;",tests:[{name:"Correct output",test:"(assert.deepEqual(output, [\n                  'giant',\n                  'chunky',\n                  'turn',\n                  'whisper'\n                ]) === undefined\n              );"},{name:"Returns an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 4 items",test:"assert.lengthOf(output, 4) === undefined;"}]},{name:"Array.join()",time:10,prompt:"Mix the two flavors with a '-' using Array's 'join' method. Return the resulting hybrid flavor.",given:"const fruits = ['strawberry', 'banana'];\r",answer:"const fruits = ['strawberry', 'banana'];\n             const hybrid = fruits.join('-');\n             return hybrid;\r",tests:[{name:"Correct output",test:"assert.deepEqual(output, 'strawberry-banana') === undefined;"},{name:"Returns a String",test:"assert.isString(output) === undefined;"}]},{name:"Array.join()",time:10,prompt:"Mix the two animals with a '-' using Array's 'join' method. Return the resulting hybrid animal.",given:"const animals = ['alligator', 'deer'];\r",answer:"const animals = ['alligator', 'deer'];\n             const hybrid = animals.join('-');\n             return hybrid;\r",tests:[{name:"Correct output",test:"assert.deepEqual(output, 'alligator-deer') === undefined;"},{name:"Returns a String",test:"assert.isString(output) === undefined;"}]},{name:"Array.slice()",time:20,prompt:"Return just the citrus fruits from the 'fruits' array using 'Array.slice()'",given:"const fruits = ['strawberry', 'orange', 'lemon', 'banana'];\r",answer:"const fruits = ['strawberry', 'orange', 'lemon', 'banana'];\n             const citrus = fruits.slice(1, 3);\n             return citrus;",tests:[{name:"Correct output",test:"assert.deepEqual(output, ['orange', 'lemon']) === undefined;"},{name:"Returns an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 2 items",test:"assert.lengthOf(output, 2) === undefined;"}]},{name:"Array.slice()",time:20,prompt:"Return just the birds from the 'animals' array using 'Array.slice()'",given:"const animals = ['hyena', 'koala', 'parrot', 'canary'];\n           ",answer:"const animals = ['hyena', 'koala', 'parrot', 'canary'];\n             const birds = animals.slice(2, 4);\n             return birds;",tests:[{name:"Correct output",test:"assert.deepEqual(output, ['parrot', 'canary']) === undefined;"},{name:"Returns an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 2 items",test:"assert.lengthOf(output, 2) === undefined;"}]},{name:"Array.reverse()",time:10,prompt:"Reverse the order of the 'fruit' array using 'Array.reverse()'",given:"const fruits = ['strawberry', 'orange', 'lemon', 'banana'];\r",answer:"const fruits = ['strawberry', 'orange', 'lemon', 'banana'];\n             const stiurf = fruits.reverse();\n             return stiurf;",tests:[{name:"Correct output",test:"(assert.deepEqual(output, [\n                  'banana',\n                  'lemon',\n                  'orange',\n                  'strawberry'\n                ]) === undefined);"},{name:"Returns an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 4 items",test:"assert.lengthOf(output, 4) === undefined;"},{name:"First item is 'banana'",test:"assert.deepEqual(output[0], 'banana') === undefined;"}]},{name:"Array.reverse()",time:10,prompt:"Reverse the order of the 'animals' array using 'Array.reverse()'",given:"const animals = ['mongoose', 'warthog', 'elk', 'baboon'];\r",answer:"const animals = ['mongoose', 'warthog', 'elk', 'baboon'];\n             return animals.reverse();",tests:[{name:"Correct output",test:"(assert.deepEqual(output, [\n                  'baboon',\n                  'elk',\n                  'warthog',\n                  'mongoose'\n                ]) === undefined);"},{name:"Returns an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 4 items",test:"assert.lengthOf(output, 4) === undefined;"},{name:"First item is 'baboon'",test:"assert.deepEqual(output[0], 'baboon') === undefined;"}]},{name:"Array.sort()",time:10,prompt:"Return the 'fruits' Array after sorting them using 'Array.sort()'.",given:"const fruits = ['strawberry', 'orange', 'lemon', 'banana'];\r",answer:"const fruits = ['strawberry', 'orange', 'lemon', 'banana'];\n             const orderlyFruit = fruits.sort();\n             return orderlyFruit;",tests:[{name:"Correct output",test:"(assert.deepEqual(output, [\n                  'banana',\n                  'lemon',\n                  'orange',\n                  'strawberry'\n                ]) === undefined);"},{name:"Returns an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 4 items",test:"assert.lengthOf(output, 4) === undefined;"},{name:"First item is 'banana'",test:"assert.deepEqual(output[0], 'banana') === undefined;"}]},{name:"Array.sort()",time:10,prompt:"Return the 'animals' Array after sorting them using 'Array.sort()'.",given:"const animals = ['pig', 'duck', 'sheep', 'cow'];\r",answer:"const animals = ['pig', 'duck', 'sheep', 'cow'];\n             return animals.sort();",tests:[{name:"Correct output",test:"(assert.deepEqual(output, [\n                  'cow',\n                  'duck',\n                  'pig',\n                  'sheep'\n                ]) === undefined);"},{name:"Returns an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 4 items",test:"assert.lengthOf(output, 4) === undefined;"},{name:"First item is 'cow'",test:"assert.deepEqual(output[0], 'cow') === undefined;"}]},{name:"Array.lastIndexOf()",time:10,prompt:"Return the index of the last 'peach' instance in the 'fruit' array using 'Array.lastIndexOf()'",given:"const fruits = ['peach', 'orange', 'lemon', 'peach'];\r",answer:"const fruits = ['peach', 'orange', 'lemon', 'peach'];\n             const wheresTheLastPeach = fruits.lastIndexOf('peach');\n             return wheresTheLastPeach;",tests:[{name:"Correct output",test:"assert.deepEqual(output, 3) === undefined;"},{name:"Returns a Number",test:"assert.isNumber(output) === undefined;"}]},{name:"Array.lastIndexOf()",time:10,prompt:"Return the index of the last 'lynx' instance in the 'animals' array using 'Array.lastIndexOf()'",given:"const animals = ['lynx', 'rabbit', 'lynx', 'wombat'];\r",answer:"const animals = ['lynx', 'rabbit', 'lynx', 'wombat'];\n             return animals.lastIndexOf('lynx');",tests:[{name:"Correct output",test:"assert.deepEqual(output, 2) === undefined;"},{name:"Returns a Number",test:"assert.isNumber(output) === undefined;"}]},{name:"Array.filter()",time:10,prompt:"Return an array of the numbers greater than 5 in 'numbers' using 'Array.filter()'",given:"const numbers = [1, 1, 2, 3, 5, 8, 13, 21];\r",answer:"const numbers = [1, 1, 2, 3, 5, 8, 13, 21];\n             const overFive = numbers.filter(num => num > 5);\n             return overFive;",tests:[{name:"Correct output",test:"assert.deepEqual(output, [8, 13, 21]) === undefined;"},{name:"Returns an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 3 items",test:"assert.lengthOf(output, 3) === undefined;"},{name:"First item is 8",test:"assert.deepEqual(output[0], 8) === undefined;"}]},{name:"Array.filter()",time:10,prompt:"Return an array of the numbers less than 12 or greater than 20 in 'numbers' using 'Array.filter()'",given:"const numbers = [12, 10, 20, 3, 15, 8, 130, 25];\n           ",answer:"const numbers = [12, 10, 20, 3, 15, 8, 130, 25];\n             return numbers.filter(num => (num < 12 || num > 20));",tests:[{name:"Correct output",test:"assert.deepEqual(output, [ 10, 3, 8, 130, 25 ]) === undefined;"},{name:"Returns an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 3 items",test:"assert.lengthOf(output, 5) === undefined;"},{name:"First item is 8",test:"assert.deepEqual(output[0], 10) === undefined;"}]},{name:"Array.map()",time:10,prompt:"Return an array of 'numbers' array's square roots, using 'Array.map()' and 'Math.sqrt()'",given:"const numbers = [25, 121, 169];\r",answer:"const numbers = [25, 121, 169];\n             const roots = numbers.map(num => Math.sqrt(num));\n             return roots;",tests:[{name:"Correct output",test:"assert.deepEqual(output, [5, 11, 13]) === undefined;"},{name:"Returns an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 3 items",test:"assert.lengthOf(output, 3) === undefined;"},{name:"First item is 5",test:"assert.deepEqual(output[0], 5) === undefined;"},{name:"Last item is 13",test:"assert.deepEqual(output[output.length - 1], 13) === undefined;"}]},{name:"Array.map()",time:10,prompt:"Return an array of 'numbers' array's numbers squared using 'Array.map()'",given:"const numbers = [8, 21, 32, 11];\n           ",answer:"const numbers = [8, 21, 32, 11];\n             return numbers.map(num => num * num));",tests:[{name:"Correct output",test:"assert.deepEqual(output, [64, 441, 1024, 121]) === undefined;"},{name:"Returns an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 4 items",test:"assert.lengthOf(output, 4) === undefined;"},{name:"First item is 64",test:"assert.deepEqual(output[0], 64) === undefined;"},{name:"Last item is 121",test:"assert.deepEqual(output[output.length - 1], 121) === undefined;"}]},{name:"Array.every()",time:10,prompt:"Return object that returns whether each array contains all even numbers using Array.every().",given:"const evenNumbers = [2, 4, 6, 8];\n            const someOddNumbers = [2, 5, 6, 8];\n            function isEven(num) {\n\n            }\n            return {\n              evenNumbers: evenNumbers.,\n              someOddNumbers: someOddNumbers.\n            };",answer:"const evenNumbers = [2, 4, 6, 8];\n             const someOddNumbers = [2, 5, 6, 8];\n             function isEven(num) {\n               return num % 2 === 0\n             }\n             return {\n               evenNumbers: evenNumbers.every(isEven),\n               someOddNumbers: someOddNumbers.every(isEven)\n             };",tests:[{name:"Correct output",test:"assert.deepEqual(output, {\n            evenNumbers: true,\n            someOddNumbers: false\n          }) === undefined;"},{name:"Returns an Object",test:"assert.isObject(output) === undefined;"},{name:"Object has 2 items",test:"assert.lengthOf(Object.keys(output), 2) === undefined;"},{name:"First value is true",test:"assert.isTrue(output.evenNumbers) === undefined;"},{name:"Second value is false",test:"assert.isFalse(output.someOddNumbers) === undefined;"}]},{name:"Array.some()",time:10,prompt:"Return 'Object' that returns whether each array contains some odd numbers using 'Array.some()'.",given:"const evenNumbers = [2, 4, 6, 8];\n            const someOddNumbers = [2, 4, 7, 8];\n            function isOdd(num) {\n\n            }\n            return {\n              evenNumbers: evenNumbers.,\n              someOddNumbers: someOddNumbers.\n            };",answer:"const evenNumbers = [1, 3, 5, 7];\n             const someOddNumbers = [1, 3, 6, 7];\n             function isOdd(num) {\n               return num % 2 !== 0;\n             }\n             return {\n               evenNumbers: evenNumbers.some(isOdd),\n               someOddNumbers: someOddNumbers.some(isOdd)\n             };",tests:[{name:"Correct output",test:"assert.deepEqual(output, {\n            evenNumbers: false,\n            someOddNumbers: true\n          }) === undefined;"},{name:"Returns an Object",test:"assert.isObject(output) === undefined;"},{name:"Object has 2 items",test:"assert.lengthOf(Object.keys(output), 2) === undefined;"},{name:"First value is false",test:"assert.isFalse(output.evenNumbers) === undefined;"},{name:"Second value is true",test:"assert.isTrue(output.someOddNumbers) === undefined;"}]},{name:"Array.reduce()",time:10,prompt:"Return the sum of the values in the 'numbers' array using 'Array.reduce()'",given:"const numbers = [34, 12, 47, 112];\n           ",answer:"const numbers = [34, 12, 47, 112];\n             return numbers.reduce((accumulator, currentValue) => {\n               return accumulator + currentValue;\n             } 0);",tests:[{name:"Correct output",test:"assert.deepEqual(output, 205) === undefined;"},{name:"Returns a Number",test:"assert.isNumber(output) === undefined;"}]},{name:"Array.reduce() and Array.concat()",time:40,prompt:"Return a flattened array using 'Array.reduce() and Array.concat()'",given:"const numbers = [[51, 2], [23, 5, 6], 78];\n           ",answer:"const numbers = [[51, 2], [23, 5, 6], 78];\n             const flatten = arr => arr.reduce(\n               (acc, val) => acc.concat(\n                 Array.isArray(val) ? flatten(val) : val\n               ),\n               []\n             );\n             return flatten(numbers)",tests:[{name:"Correct output",test:"assert.deepEqual(output, [ 51, 2, 23, 5, 6, 78 ]) === undefined;"},{name:"Returns an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 6 items",test:"assert.lengthOf(output, 6) === undefined;"},{name:"First item is 51",test:"assert.deepEqual(output[0], 51) === undefined;"},{name:"Last item is 78",test:"assert.deepEqual(output[output.length - 1], 78) === undefined;"}]},{name:"Array.reduce() and Math.max()",time:40,prompt:"Return the highest number in the array using Array.reduce() and Math.max()'",given:"const numbers = [4, 12, 3, 15, 7];\n           ",answer:"const numbers = [4, 12, 3, 15, 7];\n             return numbers.reduce((max, current) => Math.max( max, current ));",tests:[{name:"Correct output",test:"assert.deepEqual(output, 15) === undefined;"},{name:"Returns a Number",test:"assert.isNumber(output) === undefined;"}]}]},{}],37:[function(e,t,n){"use strict";t.exports=[{name:"Create Array",time:10,prompt:"Create and return an array that contains 'apple' and 'banana'",given:"const fruits = [];\rreturn fruits;",answer:"const fruits = ['apple', 'banana'];\n             return fruits;",tests:[{name:"Correct output",test:"assert.deepEqual(output, ['apple', 'banana']) === undefined;"},{name:"Returns an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 2 items",test:"assert.lengthOf(output, 2) === undefined;"}]},{name:"Array.pop()",time:10,prompt:"Remove 'orange' from the end of the 'fruits' array and return 'fruits'.",given:"const fruits = ['apple', 'banana', 'orange'];\r",answer:"const fruits = ['apple', 'banana', 'orange'];\n             fruits.pop();\n             return fruits;",tests:[{name:"Correct output",test:"assert.deepEqual(output, ['apple', 'banana']) === undefined;"},{name:"Returns an Array",test:"assert.isArray(output) === undefined;"},{name:"Array has 2 items",test:"assert.lengthOf(output, 2) === undefined;"}]}]},{}],38:[function(e,t,n){const r={initial:e("./problems/initial"),arrays:e("./problems/arrays")},s={initialES5:e("./es5/problems/initial"),arraysES5:e("./es5/problems/arrays")};t.exports={default:r,es5:s}},{"./es5/problems/arrays":36,"./es5/problems/initial":37,"./problems/arrays":39,"./problems/initial":40}],39:[function(e,t,n){t.exports=[{name:"Access Array by index (first)",time:10,prompt:"Return the first value of the Array",given:`const fruits = ['apple', 'banana'];\r`,answer:`const fruits = ['apple', 'banana'];\n             return fruits[0];`,tests:[{name:"Correct output",test:`assert.deepEqual(output, 'apple') === undefined`},{name:"Returns a String",test:"assert.isString(output) === undefined"}]},{name:"Access Array by index (first)",time:10,prompt:"Return the first value of the Array",given:`const animals = ['chipmunk', 'chimpanzee'];\n           `,answer:`const animals = ['chipmunk', 'chimpanzee'];\n             return animals[0];`,tests:[{name:"Correct output",test:`assert.deepEqual(output, 'chipmunk') === undefined`},{name:"Returns a String",test:"assert.isString(output) === undefined"}]},{name:"Access Array by index (last)",time:10,prompt:"Return the last value of the Array",given:`const fruits = ['apple', 'banana', 'orange'];\r`,answer:`const fruits = ['apple', 'banana', 'orange'];\n             return fruits[fruits.length - 1];`,tests:[{name:"Correct output",test:`assert.deepEqual(output, 'orange') === undefined;`},{name:"Returns a String",test:`assert.isString(output) === undefined;`}]},{name:"Access Array by index (last)",time:10,prompt:"Return the last value of the Array",given:`const animals = ['dog', 'hamster', 'lion'];\n           `,answer:`const animals = ['dog', 'hamster', 'lion'];\n             return animals[animals.length - 1];`,tests:[{name:"Correct output",test:`assert.deepEqual(output, 'lion') === undefined;`},{name:"Returns a String",test:`assert.isString(output) === undefined;`}]},{name:"Access Array by index (second)",time:10,prompt:"Return the second value of the Array",given:`const fruits = ['apple', 'banana'];\r`,answer:`const fruits = ['apple', 'banana'];\n             return fruits[1];`,tests:[{name:"Correct output",test:`assert.deepEqual(output, 'banana') === undefined;`},{name:"Returns a String",test:`assert.isString(output) === undefined;`}]},{name:"Access Array by index (second)",time:10,prompt:"Return the second value of the Array",given:`const animals = ['kitten', 'monkey'];\n           `,answer:`const animals = ['kitten', 'monkey'];\n             return animals[1];`,tests:[{name:"Correct output",test:`assert.deepEqual(output, 'monkey') === undefined;`},{name:"Returns a String",test:`assert.isString(output) === undefined;`}]},{name:"Array.forEach()",time:20,prompt:"Iterate through the array, add an 'x' to the end of each fruit, return the array.",given:`const fruits = ['apple', 'banana'];\r`,answer:`const fruits = ['apple', 'banana'];\n             const newFruits = [];\n             fruits.forEach(function(item) {\n               newFruits.push(item+'x');\n             });\n             return newFruits;`,tests:[{name:"Correct output",test:`assert.deepEqual(output, ['applex', 'bananax']) === undefined;`},{name:"Returns an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 2 items",test:`assert.lengthOf(output, 2) === undefined;`}]},{name:"Array.forEach()",time:20,prompt:`Iterate through the array, add a 'ty' to the end of each animal, return the array.`,given:`const animals = ['parrot', 'bat'];\n           `,answer:`const animals = ['parrot', 'bat'];\n             const newAnimals = [];\n             animals.forEach(function(item) {\n               newAnimals.push(item+'ty');\n             });\n             return newAnimals;`,tests:[{name:"Correct output",test:`assert.deepEqual(output, ['parrotty', 'batty']) === undefined;`},{name:"Returns an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 2 items",test:`assert.lengthOf(output, 2) === undefined;`}]},{name:"Array.push()",time:10,prompt:`Add 'orange' to the end of the 'fruits' array and return 'fruits'.`,given:`const fruits = ['apple', 'banana'];\r`,answer:`const fruits = ['apple', 'banana'];\n             fruits.push('orange');\n             return fruits;`,tests:[{name:"Correct output",test:`(assert.deepEqual(output, ['apple', 'banana', 'orange']) === undefined);`},{name:"Returns an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 3 items",test:`assert.lengthOf(output, 3) === undefined;`}]},{name:"Array.push()",time:10,prompt:`Add 'sloth' to the end of the 'animals' array and return 'animals'.`,given:`const animals = ['crow', 'ox'];\r`,answer:`const animals = ['crow', 'ox'];\n             animals.push('sloth');\n             return animals;`,tests:[{name:"Correct output",test:`(assert.deepEqual(output, ['crow', 'ox', 'sloth']) === undefined);`},{name:"Returns an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 3 items",test:`assert.lengthOf(output, 3) === undefined;`}]},{name:"Array.shift()",time:10,prompt:`Remove 'apple' from the front of the 'fruits' array and return 'fruits'.`,given:`const fruits = ['apple', 'banana', 'orange'];\r`,answer:`const fruits = ['apple', 'banana', 'orange'];\n             fruits.shift();\n             return fruits;`,tests:[{name:"Output must be correct",test:`assert.deepEqual(output, ['banana', 'orange']) === undefined;`},{name:"Returns an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 2 items",test:`assert.lengthOf(output, 2) === undefined;`}]},{name:"Array.shift()",time:10,prompt:`Remove 'lemur' from the front of the 'animals' array and return 'animals'.`,given:`const animals = ['lemur', 'crocodile', 'cat'];\r`,answer:`const animals = ['lemur', 'crocodile', 'cat'];\n             animals.shift();\n             return animals;`,tests:[{name:"Output must be correct",test:`assert.deepEqual(output, ['crocodile', 'cat']) === undefined;`},{name:"Returns an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 2 items",test:`assert.lengthOf(output, 2) === undefined;`}]},{name:"Array.unshift()",time:10,prompt:`Add 'strawberry' to the front of the 'fruits' array and return 'fruits'.`,given:`const fruits = ['apple', 'banana', 'orange'];\r`,answer:`const fruits = ['apple', 'banana', 'orange'];\n             fruits.unshift('strawberry');\n             return fruits;`,tests:[{name:"Output must be correct",test:`(assert.deepEqual(output, [\n                  'strawberry',\n                  'apple',\n                  'banana',\n                  'orange'\n                ]) === undefined)`},{name:"Must return an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 4 items",test:`assert.lengthOf(output, 4) === undefined;`}]},{name:"Array.unshift()",time:10,prompt:`Add 'octopus' to the front of the 'animals' array and return 'animals'.`,given:`const animals = ['pig', 'colt', 'antelope'];\r`,answer:`const animals = ['pig', 'colt', 'antelope'];\n             animals.unshift('octopus');\n             return animals;`,tests:[{name:"Output must be correct",test:`(assert.deepEqual(output, [\n                  'octopus',\n                  'pig',\n                  'colt',\n                  'antelope'\n                ]) === undefined)`},{name:"Must return an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 4 items",test:`assert.lengthOf(output, 4) === undefined;`}]},{name:"Array.indexOf()",time:10,prompt:`Return the index of 'banana' in the Array.`,given:`const fruits = ['strawberry', 'banana', 'mango'];\r`,answer:`const fruits = ['strawberry', 'banana', 'mango'];\n             const ind = fruits.indexOf('banana');\n             return ind;`,tests:[{name:"Correct output",test:`assert.deepEqual(output, 1) === undefined;`},{name:"Returns a Number",test:`assert.isNumber(output) === undefined;`}]},{name:"Array.indexOf()",time:10,prompt:`Return the index of 'fox' in the Array.`,given:`const animals = ['kangaroo', 'fox', 'bison'];\r`,answer:`const animals = ['kangaroo', 'fox', 'bison'];\n             const ind = animals.indexOf('fox');\n             return ind;`,tests:[{name:"Correct output",test:`assert.deepEqual(output, 1) === undefined;`},{name:"Returns a Number",test:`assert.isNumber(output) === undefined;`}]},{name:"Array.concat()",time:10,prompt:`Merge the two arrays using Array's 'concat()' method. Return the resulting array.`,given:`const fruits = ['strawberry', 'banana'];\rconst otherFruits = ['pear','peach'];\r`,answer:`const fruits = ['strawberry', 'banana'];\n            const otherFruits = ['pear','peach'];\n            const allTheFruits = fruits.concat(otherFruits);\n            return allTheFruits;\r`,tests:[{name:"Correct output",test:`(assert.deepEqual(output, [\n                  'strawberry',\n                  'banana',\n                  'pear',\n                  'peach'\n                ]) === undefined\n              );`},{name:"Returns an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 4 items",test:`assert.lengthOf(output, 4) === undefined;`}]},{name:"Array.concat()",time:10,prompt:`Merge the two arrays using Array's 'concat()' method. Return the resulting array.`,given:`const adjectives = ['giant', 'chunky'];\n            const verbs = ['turn','whisper'];\n            `,answer:`const adjectives = ['giant', 'chunky'];\n             const verbs = ['turn','whisper'];\n             const words = adjectives.concat(verbs);\n             return words;`,tests:[{name:"Correct output",test:`(assert.deepEqual(output, [\n                  'giant',\n                  'chunky',\n                  'turn',\n                  'whisper'\n                ]) === undefined\n              );`},{name:"Returns an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 4 items",test:`assert.lengthOf(output, 4) === undefined;`}]},{name:"Array.join()",time:10,prompt:`Mix the two flavors with a '-' using Array's 'join' method. Return the resulting hybrid flavor.`,given:`const fruits = ['strawberry', 'banana'];\r`,answer:`const fruits = ['strawberry', 'banana'];\n             const hybrid = fruits.join('-');\n             return hybrid;\r`,tests:[{name:"Correct output",test:`assert.deepEqual(output, 'strawberry-banana') === undefined;`},{name:"Returns a String",test:`assert.isString(output) === undefined;`}]},{name:"Array.join()",time:10,prompt:`Mix the two animals with a '-' using Array's 'join' method. Return the resulting hybrid animal.`,given:`const animals = ['alligator', 'deer'];\r`,answer:`const animals = ['alligator', 'deer'];\n             const hybrid = animals.join('-');\n             return hybrid;\r`,tests:[{name:"Correct output",test:`assert.deepEqual(output, 'alligator-deer') === undefined;`},{name:"Returns a String",test:`assert.isString(output) === undefined;`}]},{name:"Array.slice()",time:20,prompt:`Return just the citrus fruits from the 'fruits' array using 'Array.slice()'`,given:`const fruits = ['strawberry', 'orange', 'lemon', 'banana'];\r`,answer:`const fruits = ['strawberry', 'orange', 'lemon', 'banana'];\n             const citrus = fruits.slice(1, 3);\n             return citrus;`,tests:[{name:"Correct output",test:`assert.deepEqual(output, ['orange', 'lemon']) === undefined;`},{name:"Returns an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 2 items",test:`assert.lengthOf(output, 2) === undefined;`}]},{name:"Array.slice()",time:20,prompt:`Return just the birds from the 'animals' array using 'Array.slice()'`,given:`const animals = ['hyena', 'koala', 'parrot', 'canary'];\n           `,answer:`const animals = ['hyena', 'koala', 'parrot', 'canary'];\n             const birds = animals.slice(2, 4);\n             return birds;`,tests:[{name:"Correct output",test:`assert.deepEqual(output, ['parrot', 'canary']) === undefined;`},{name:"Returns an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 2 items",test:`assert.lengthOf(output, 2) === undefined;`}]},{name:"Array.reverse()",time:10,prompt:`Reverse the order of the 'fruit' array using 'Array.reverse()'`,given:`const fruits = ['strawberry', 'orange', 'lemon', 'banana'];\r`,answer:`const fruits = ['strawberry', 'orange', 'lemon', 'banana'];\n             const stiurf = fruits.reverse();\n             return stiurf;`,tests:[{name:"Correct output",test:`(assert.deepEqual(output, [\n                  'banana',\n                  'lemon',\n                  'orange',\n                  'strawberry'\n                ]) === undefined);`},{name:"Returns an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 4 items",test:`assert.lengthOf(output, 4) === undefined;`},{name:`First item is 'banana'`,test:`assert.deepEqual(output[0], 'banana') === undefined;`}]},{name:"Array.reverse()",time:10,prompt:`Reverse the order of the 'animals' array using 'Array.reverse()'`,given:`const animals = ['mongoose', 'warthog', 'elk', 'baboon'];\r`,answer:`const animals = ['mongoose', 'warthog', 'elk', 'baboon'];\n             return animals.reverse();`,tests:[{name:"Correct output",test:`(assert.deepEqual(output, [\n                  'baboon',\n                  'elk',\n                  'warthog',\n                  'mongoose'\n                ]) === undefined);`},{name:"Returns an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 4 items",test:`assert.lengthOf(output, 4) === undefined;`},{name:`First item is 'baboon'`,test:`assert.deepEqual(output[0], 'baboon') === undefined;`}]},{name:"Array.sort()",time:10,prompt:`Return the 'fruits' Array after sorting them using 'Array.sort()'.`,given:`const fruits = ['strawberry', 'orange', 'lemon', 'banana'];\r`,answer:`const fruits = ['strawberry', 'orange', 'lemon', 'banana'];\n             const orderlyFruit = fruits.sort();\n             return orderlyFruit;`,tests:[{name:"Correct output",test:`(assert.deepEqual(output, [\n                  'banana',\n                  'lemon',\n                  'orange',\n                  'strawberry'\n                ]) === undefined);`},{name:"Returns an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 4 items",test:`assert.lengthOf(output, 4) === undefined;`},{name:`First item is 'banana'`,test:`assert.deepEqual(output[0], 'banana') === undefined;`}]},{name:"Array.sort()",time:10,prompt:`Return the 'animals' Array after sorting them using 'Array.sort()'.`,given:`const animals = ['pig', 'duck', 'sheep', 'cow'];\r`,answer:`const animals = ['pig', 'duck', 'sheep', 'cow'];\n             return animals.sort();`,tests:[{name:"Correct output",test:`(assert.deepEqual(output, [\n                  'cow',\n                  'duck',\n                  'pig',\n                  'sheep'\n                ]) === undefined);`},{name:"Returns an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 4 items",test:`assert.lengthOf(output, 4) === undefined;`},{name:`First item is 'cow'`,test:`assert.deepEqual(output[0], 'cow') === undefined;`}]},{name:"Array.lastIndexOf()",time:10,prompt:`Return the index of the last 'peach' instance in the 'fruit' array using 'Array.lastIndexOf()'`,given:`const fruits = ['peach', 'orange', 'lemon', 'peach'];\r`,answer:`const fruits = ['peach', 'orange', 'lemon', 'peach'];\n             const wheresTheLastPeach = fruits.lastIndexOf('peach');\n             return wheresTheLastPeach;`,tests:[{name:"Correct output",test:`assert.deepEqual(output, 3) === undefined;`},{name:"Returns a Number",test:`assert.isNumber(output) === undefined;`}]},{name:"Array.lastIndexOf()",time:10,prompt:`Return the index of the last 'lynx' instance in the 'animals' array using 'Array.lastIndexOf()'`,given:`const animals = ['lynx', 'rabbit', 'lynx', 'wombat'];\r`,answer:`const animals = ['lynx', 'rabbit', 'lynx', 'wombat'];\n             return animals.lastIndexOf('lynx');`,tests:[{name:"Correct output",test:`assert.deepEqual(output, 2) === undefined;`},{name:"Returns a Number",test:`assert.isNumber(output) === undefined;`}]},{name:"Array.filter()",time:10,prompt:`Return an array of the numbers greater than 5 in 'numbers' using 'Array.filter()'`,given:`const numbers = [1, 1, 2, 3, 5, 8, 13, 21];\r`,answer:`const numbers = [1, 1, 2, 3, 5, 8, 13, 21];\n             const overFive = numbers.filter(num => num > 5);\n             return overFive;`,tests:[{name:"Correct output",test:`assert.deepEqual(output, [8, 13, 21]) === undefined;`},{name:"Returns an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 3 items",test:`assert.lengthOf(output, 3) === undefined;`},{name:`First item is 8`,test:`assert.deepEqual(output[0], 8) === undefined;`}]},{name:"Array.filter()",time:10,prompt:`Return an array of the numbers less than 12 or greater than 20 in 'numbers' using 'Array.filter()'`,given:`const numbers = [12, 10, 20, 3, 15, 8, 130, 25];\n           `,answer:`const numbers = [12, 10, 20, 3, 15, 8, 130, 25];\n             return numbers.filter(num => (num < 12 || num > 20));`,tests:[{name:"Correct output",test:`assert.deepEqual(output, [ 10, 3, 8, 130, 25 ]) === undefined;`},{name:"Returns an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 3 items",test:`assert.lengthOf(output, 5) === undefined;`},{name:`First item is 8`,test:`assert.deepEqual(output[0], 10) === undefined;`}]},{name:"Array.map()",time:10,prompt:`Return an array of 'numbers' array's square roots, using 'Array.map()' and 'Math.sqrt()'`,given:`const numbers = [25, 121, 169];\r`,answer:`const numbers = [25, 121, 169];\n             const roots = numbers.map(num => Math.sqrt(num));\n             return roots;`,tests:[{name:"Correct output",test:`assert.deepEqual(output, [5, 11, 13]) === undefined;`},{name:"Returns an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 3 items",test:`assert.lengthOf(output, 3) === undefined;`},{name:`First item is 5`,test:`assert.deepEqual(output[0], 5) === undefined;`},{name:`Last item is 13`,test:`assert.deepEqual(output[output.length - 1], 13) === undefined;`}]},{name:"Array.map()",time:10,prompt:`Return an array of 'numbers' array's numbers squared using 'Array.map()'`,given:`const numbers = [8, 21, 32, 11];\n           `,answer:`const numbers = [8, 21, 32, 11];\n             return numbers.map(num => num * num));`,tests:[{name:"Correct output",test:`assert.deepEqual(output, [64, 441, 1024, 121]) === undefined;`},{name:"Returns an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 4 items",test:`assert.lengthOf(output, 4) === undefined;`},{name:`First item is 64`,test:`assert.deepEqual(output[0], 64) === undefined;`},{name:`Last item is 121`,test:`assert.deepEqual(output[output.length - 1], 121) === undefined;`}]},{name:"Array.every()",time:10,prompt:`Return object that returns whether each array contains all even numbers using Array.every().`,given:`const evenNumbers = [2, 4, 6, 8];\n            const someOddNumbers = [2, 5, 6, 8];\n            function isEven(num) {\n\n            }\n            return {\n              evenNumbers: evenNumbers.,\n              someOddNumbers: someOddNumbers.\n            };`,answer:`const evenNumbers = [2, 4, 6, 8];\n             const someOddNumbers = [2, 5, 6, 8];\n             function isEven(num) {\n               return num % 2 === 0\n             }\n             return {\n               evenNumbers: evenNumbers.every(isEven),\n               someOddNumbers: someOddNumbers.every(isEven)\n             };`,tests:[{name:"Correct output",test:`assert.deepEqual(output, {\n            evenNumbers: true,\n            someOddNumbers: false\n          }) === undefined;`},{name:"Returns an Object",test:`assert.isObject(output) === undefined;`},{name:"Object has 2 items",test:`assert.lengthOf(Object.keys(output), 2) === undefined;`},{name:`First value is true`,test:`assert.isTrue(output.evenNumbers) === undefined;`},{name:`Second value is false`,test:`assert.isFalse(output.someOddNumbers) === undefined;`}]},{name:"Array.some()",time:10,prompt:`Return 'Object' that returns whether each array contains some odd numbers using 'Array.some()'.`,given:`const evenNumbers = [2, 4, 6, 8];\n            const someOddNumbers = [2, 4, 7, 8];\n            function isOdd(num) {\n\n            }\n            return {\n              evenNumbers: evenNumbers.,\n              someOddNumbers: someOddNumbers.\n            };`,answer:`const evenNumbers = [1, 3, 5, 7];\n             const someOddNumbers = [1, 3, 6, 7];\n             function isOdd(num) {\n               return num % 2 !== 0;\n             }\n             return {\n               evenNumbers: evenNumbers.some(isOdd),\n               someOddNumbers: someOddNumbers.some(isOdd)\n             };`,tests:[{name:"Correct output",test:`assert.deepEqual(output, {\n            evenNumbers: false,\n            someOddNumbers: true\n          }) === undefined;`},{name:"Returns an Object",test:`assert.isObject(output) === undefined;`},{name:"Object has 2 items",test:`assert.lengthOf(Object.keys(output), 2) === undefined;`},{name:`First value is false`,test:`assert.isFalse(output.evenNumbers) === undefined;`},{name:`Second value is true`,test:`assert.isTrue(output.someOddNumbers) === undefined;`}]},{name:"Array.reduce()",time:10,prompt:`Return the sum of the values in the 'numbers' array using 'Array.reduce()'`,given:`const numbers = [34, 12, 47, 112];\n           `,answer:`const numbers = [34, 12, 47, 112];\n             return numbers.reduce((accumulator, currentValue) => {\n               return accumulator + currentValue;\n             } 0);`,tests:[{name:"Correct output",test:`assert.deepEqual(output, 205) === undefined;`},{name:"Returns a Number",test:`assert.isNumber(output) === undefined;`}]},{name:"Array.reduce() and Array.concat()",time:40,prompt:`Return a flattened array using 'Array.reduce() and Array.concat()'`,given:`const numbers = [[51, 2], [23, 5, 6], 78];\n           `,answer:`const numbers = [[51, 2], [23, 5, 6], 78];\n             const flatten = arr => arr.reduce(\n               (acc, val) => acc.concat(\n                 Array.isArray(val) ? flatten(val) : val\n               ),\n               []\n             );\n             return flatten(numbers)`,tests:[{name:"Correct output",test:`assert.deepEqual(output, [ 51, 2, 23, 5, 6, 78 ]) === undefined;`},{name:"Returns an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 6 items",test:`assert.lengthOf(output, 6) === undefined;`},{name:`First item is 51`,test:`assert.deepEqual(output[0], 51) === undefined;`},{name:`Last item is 78`,test:`assert.deepEqual(output[output.length - 1], 78) === undefined;`}]},{name:"Array.reduce() and Math.max()",time:40,prompt:`Return the highest number in the array using Array.reduce() and Math.max()'`,given:`const numbers = [4, 12, 3, 15, 7];\n           `,answer:`const numbers = [4, 12, 3, 15, 7];\n             return numbers.reduce((max, current) => Math.max( max, current ));`,tests:[{name:"Correct output",test:`assert.deepEqual(output, 15) === undefined;`},{name:"Returns a Number",test:`assert.isNumber(output) === undefined;`}]}]},{}],40:[function(e,t,n){t.exports=[{name:"Create Array",time:10,prompt:"Create and return an array that contains 'apple' and 'banana'",given:`const fruits = [];\rreturn fruits;`,answer:`const fruits = ['apple', 'banana'];\n             return fruits;`,tests:[{name:"Correct output",test:`assert.deepEqual(output, ['apple', 'banana']) === undefined;`},{name:"Returns an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 2 items",test:`assert.lengthOf(output, 2) === undefined;`}]},{name:"Array.pop()",time:10,prompt:`Remove 'orange' from the end of the 'fruits' array and return 'fruits'.`,given:`const fruits = ['apple', 'banana', 'orange'];\r`,answer:`const fruits = ['apple', 'banana', 'orange'];\n             fruits.pop();\n             return fruits;`,tests:[{name:"Correct output",test:`assert.deepEqual(output, ['apple', 'banana']) === undefined;`},{name:"Returns an Array",test:`assert.isArray(output) === undefined;`},{name:"Array has 2 items",test:`assert.lengthOf(output, 2) === undefined;`}]}]},{}],41:[function(e,t,n){arguments[4][34][0].apply(n,arguments)},{"./lib/type":42,dup:34}],42:[function(e,t,n){function r(e){var t=Object.prototype.toString.call(e).match(a)[1].toLowerCase();return"function"==typeof Promise&&e instanceof Promise?"promise":null===e?"null":void 0===e?"undefined":t}function s(){if(!(this instanceof s))return new s;this.tests={}}var a=/^\[object (.*)\]$/;(t.exports=r).Library=s,s.prototype.of=r,s.prototype.define=function(e,t){return 1===arguments.length?this.tests[e]:(this.tests[e]=t,this)},s.prototype.test=function(e,t){if(t===r(e))return!0;var n=this.tests[t];if(n&&"regexp"===r(n))return n.test(e);if(n&&"function"===r(n))return n(e);throw new ReferenceError('Type test "'+t+'" not defined or invalid.')}},{}],43:[function(require,module,exports){"use strict";function _toConsumableArray(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}!function(document,window){function dedentStrings(e){return e.map(function(e){return e.given=dedent(e.given),e.answer=dedent(e.answer),e})}function debounce(e,t,n){var r=void 0;return function(){var s=this,a=arguments,o=function(){r=null,n||e.apply(s,a)},i=n&&!r;clearTimeout(r),r=setTimeout(o,t),i&&e.apply(s,a)}}function updateLocalstore(e){return new Promise(function(t,n){window.localStorage?(localStorage.setItem("js_practice_config",JSON.stringify(e)),console.log("Saved config: ",e),t()):n()})}function getRandomIndex(e){var t=Math.floor(Math.random()*e.length);return config.currentIndex=t,updateLocalstore(config),t}function getPreviousIndex(e){var t=config.currentIndex;return 0===t?e.length-1:t-1}function getNextIndex(e){var t=config.currentIndex;return t>=e.length-1||t<0?0:t+1}function getCurrentProblem(e){return e[config.currentIndex]}function previousProblem(){console.log("previousProblem!"),previousProblemButtonEl.classList.add("active"),config.currentIndex=config.shuffle?getRandomIndex(problems):getPreviousIndex(problems),updateLocalstore(config).then(function(){window.location.reload()})}function nextProblem(){console.log("nextProblem!"),nextProblemButtonEl.classList.add("active"),config.currentIndex=config.shuffle?getRandomIndex(problems):getNextIndex(problems),updateLocalstore(config).then(function(){window.location.reload()})}function toggleShuffle(){console.log("toggle shuffle!"),config.shuffle=!config.shuffle,shuffleProblemsButtonEl.classList.toggle("active"),previousProblemButtonEl.parentNode.classList.toggle("hidden"),updateLocalstore(config)}function loadProblem(e){state.currentProblem=e,problemEl.innerText=e.prompt,e.given&&(codeEl.value=e.given),testSuite(null,!0)}function updateTests(e,t){!0===t&&buildTests(state.currentProblem.tests),updateTestStatus(e)}function buildTests(e){if(e){var t=e.map(function(e){return'<div class="test monospace">\n                  <div class="test-state">[&#x2718;]</div>\n                  <div class="test-name">'+e.name+"</div>\n                </div>"}).join("");testSuiteEl.innerHTML=t}}function updateTestStatus(e){if(!e)throw new Error("No testStatuses provided.");var t=!0;e.forEach(function(e){!0!==e&&(t=!1)}),[].slice.call(testSuiteEl.querySelectorAll(".test-state")).forEach(function(t,n){!0===e[n]?(t.innerHTML="[&#x2713;]",t.classList.remove("fail"),t.classList.add("pass")):(t.innerHTML="[&#x2718;]",t.classList.remove("pass"),t.classList.add("fail"))}),!0===t?(testTotalEl.innerText="PASS",testTotalEl.classList.remove("fail"),testTotalEl.classList.add("pass")):(testTotalEl.innerText="FAIL",testTotalEl.classList.remove("pass"),testTotalEl.classList.add("fail"))}function printAssertError(e){var t="";null!==e&&(t='\n      <div class="assert-error">\n        Expected: '+JSON.stringify(e.expected)+"\n        Actual: "+JSON.stringify(e.actual)+"\n      </div>"),assertConsoleEl.innerHTML=t}function printEvalOutput(e,t){var n="";e&&void 0!==e.message?n='\n      <div class="assert-error">\n        Syntax Error: '+JSON.stringify(e.message)+"\n      </div>":t&&(n='\n      <div class="assert-error">\n        Output: '+JSON.stringify(t)+"\n      </div>"),evalConsoleEl.innerHTML=n}function testSuite(e){testTotalEl.classList.toggle("working");var t=runTests(getOutput(codeEl.value));testTotalEl.classList.toggle("working"),updateTests(t,e)}function getOutput(code){var evald=!1;try{evald=eval("(function(){"+code+"})()"),printEvalOutput(null,evald)}catch(e){printEvalOutput(e)}return evald}function runTests(output){var tested=!1;return tested=state.currentProblem.tests.map(function(test){var testOutcome=!1;try{output&&(testOutcome=eval(test.test)),printAssertError(null)}catch(e){printAssertError(e)}return testOutcome})}function loadApp(e){function t(t){!1===e.shuffle&&13===t.keyCode&&t.shiftKey&&(t.metaKey||t.ctrlKey)?previousProblem():13!==t.keyCode||t.shiftKey||!t.metaKey&&!t.ctrlKey||nextProblem()}console.log("loading app!"),!0===e.shuffle&&(shuffleProblemsButtonEl.classList.add("active"),previousProblemButtonEl.parentNode.classList.add("hidden"));var n=debounce(function(e){-1===ignoreKeyCodes.indexOf(e.keyCode)&&testSuite()},200);codeEl.addEventListener("keydown",n),document.addEventListener("keydown",t),shuffleProblemsButtonEl.addEventListener("click",toggleShuffle),previousProblemButtonEl.addEventListener("click",previousProblem),nextProblemButtonEl.addEventListener("click",nextProblem),loadProblem(getCurrentProblem(problems)),testSuite(!0)}var probs=require("pjs-problems").es5,dedent=require("dedent"),assert=require("chai").assert,problems=[];Object.keys(probs).forEach(function(e){var t;(t=problems).push.apply(t,_toConsumableArray(probs[e]))}),problems=dedentStrings(problems);var currentProblem=void 0,ignoreKeyCodes=[9,37,39,38,40],config={shuffle:!0,timer:!1,currentIndex:0},state={currentProblem:getCurrentProblem(problems)},problemEl=document.getElementById("problem"),codeEl=document.getElementById("code"),testSuiteEl=document.getElementById("test-suite"),testTotalEl=document.getElementById("test-total"),evalConsoleEl=document.getElementById("eval-output"),assertConsoleEl=document.getElementById("assert-output"),shuffleProblemsButtonEl=document.getElementById("shuffle-problems"),previousProblemButtonEl=document.getElementById("prev-problem"),nextProblemButtonEl=document.getElementById("next-problem");if(window.localStorage){var localConfig=localStorage.getItem("js_practice_config");if(localConfig)try{config=JSON.parse(localConfig),loadApp(config)}catch(e){console.log("LOCAL_CONFIG PARSE ERR:",e)}else console.log("LOCAL_CONFIG: No local config"),loadApp(config)}}(document,window)},{chai:2,dedent:31,"pjs-problems":38}]},{},[43]);
//# sourceMappingURL=bundle.min.js.map
