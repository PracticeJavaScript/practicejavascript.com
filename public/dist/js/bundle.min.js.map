{"version":3,"sources":["node_modules/.registry.npmjs.org/browser-pack/6.0.2/node_modules/browser-pack/_prelude.js","node_modules/.github.com/practicejavascript/pjs-problems/0823cc1cffb999352e3f0caed295df8633f13916/node_modules/pjs-problems/index.js","node_modules/.github.com/practicejavascript/pjs-problems/0823cc1cffb999352e3f0caed295df8633f13916/node_modules/pjs-problems/problems/arrays.js","node_modules/.github.com/practicejavascript/pjs-problems/0823cc1cffb999352e3f0caed295df8633f13916/node_modules/pjs-problems/problems/initial.js","node_modules/.registry.npmjs.org/assertion-error/1.0.2/node_modules/assertion-error/index.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/index.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/assertion.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/config.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/core/assertions.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/interface/assert.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/interface/expect.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/interface/should.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/utils/addChainableMethod.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/utils/addMethod.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/utils/addProperty.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/utils/expectTypes.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/utils/flag.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/utils/getActual.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/utils/getEnumerableProperties.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/utils/getMessage.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/utils/getName.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/utils/getPathInfo.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/utils/getPathValue.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/utils/getProperties.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/utils/hasProperty.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/utils/index.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/utils/inspect.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/utils/objDisplay.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/utils/overwriteChainableMethod.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/utils/overwriteMethod.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/utils/overwriteProperty.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/utils/test.js","node_modules/.registry.npmjs.org/chai/3.5.0/node_modules/chai/lib/chai/utils/transferFlags.js","node_modules/.registry.npmjs.org/dedent/0.7.0/node_modules/dedent/dist/dedent.js","node_modules/.registry.npmjs.org/deep-eql/0.1.3/node_modules/deep-eql/index.js","node_modules/.registry.npmjs.org/deep-eql/0.1.3/node_modules/deep-eql/lib/eql.js","node_modules/.registry.npmjs.org/localforage/1.5.0/node_modules/localforage/dist/node_modules/localforage/dist/localforage.js","node_modules/.registry.npmjs.org/type-detect/0.1.1/node_modules/type-detect/index.js","node_modules/.registry.npmjs.org/type-detect/0.1.1/node_modules/type-detect/lib/type.js","node_modules/.registry.npmjs.org/type-detect/1.0.0/node_modules/type-detect/lib/type.js","src/js/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","initial","arrays","name","time","prompt","given","answer","tests","test","exclude","excludeProps","res","obj","Object","keys","forEach","key","excludes","indexOf","slice","arguments","args","AssertionError","message","_props","ssf","props","this","showDiff","callee","captureStackTrace","stack","prototype","create","constructor","toJSON","used","version","util","use","fn","push","config","assertion","core","expect","should","assert","_chai","Assertion","msg","flag","defineProperty","get","console","warn","includeStack","set","value","addProperty","addMethod","addChainableMethod","chainingBehavior","overwriteProperty","overwriteMethod","overwriteChainableMethod","expr","negateMsg","expected","_actual","ok","getMessage","actual","getActual","val","truncateThreshold","chai","_","an","type","toLowerCase","article","charAt","includeChainingBehavior","include","expectTypes","eql","k","property","subset","undefined","inspect","checkArguments","toString","assertEqual","_obj","assertEql","assertAbove","to","have","len","assertLeast","assertBelow","assertMost","assertInstanceOf","getName","assertOwnProperty","hasOwnProperty","assertOwnPropertyDescriptor","descriptor","actualDescriptor","getOwnPropertyDescriptor","assertLengthChain","assertLength","assertMatch","re","exec","assertKeys","str","mixedArgsMsg","Array","any","all","filter","every","last","map","pop","join","sort","assertThrows","errMsg","is","thrown","desiredError","thrownError","RegExp","err","actuallyGot","expectedThrown","respondTo","method","itself","context","satisfy","matcher","result","objDisplay","negate","closeTo","delta","Math","abs","isSubsetOf","superset","cmp","elem","some","elem2","oneOf","list","be","assertChanges","object","prop","assertIncreases","assertDecreases","chain","isNaN","isArray","start","finish","range","isDeep","pathInfo","getPathInfo","hasProperty","exists","isExtensible","TypeError","isSealed","isFrozen","express","errmsg","fail","operator","isOk","isNotOk","not","equal","act","exp","notEqual","strictEqual","notStrictEqual","deepEqual","notDeepEqual","isAbove","abv","above","isAtLeast","atlst","least","isBelow","blw","below","isAtMost","atmst","most","isTrue","isNotTrue","isFalse","isNotFalse","isNull","isNotNull","NaN","isNotNaN","isUndefined","isDefined","isFunction","isNotFunction","isObject","isNotObject","isNotArray","isString","isNotString","isNumber","isNotNumber","isBoolean","isNotBoolean","typeOf","notTypeOf","instanceOf","notInstanceOf","inc","notInclude","match","notMatch","notProperty","deepProperty","deep","notDeepProperty","propertyVal","propertyNotVal","deepPropertyVal","deepPropertyNotVal","lengthOf","throws","errt","errs","assertErr","throw","doesNotThrow","Throw","val2","approximately","sameMembers","set1","set2","same","members","sameDeepMembers","includeMembers","includeDeepMembers","inList","changes","change","doesNotChange","increases","increase","doesNotIncrease","decreases","decrease","doesNotDecrease","ifError","extensible","isNotExtensible","sealed","isNotSealed","frozen","isNotFrozen","alias","as","loadShould","shouldGetter","String","Number","Boolean","valueOf","shouldSetter","enumerable","configurable","writable","val1","exist","Should","transferFlags","hasProtoSupport","excludeNames","Function","apply","ctx","chainableBehavior","__methods","__proto__","getOwnPropertyNames","asserterName","pd","getter","types","index","art","flags","__flags","flagMsg","replace","func","parsePath","path","mArr","parseFloat","p","_getPathValue","parsed","tmp","part","info","parent","proto","getPrototypeOf","literals","number","string","ot","getPathValue","showHidden","depth","colors","formatValue","seen","stylize","recurseTimes","ret","primitive","formatPrimitive","isDOMElement","outerHTML","document","xmlVersion","XMLSerializer","serializeToString","container","createElementNS","appendChild","cloneNode","html","innerHTML","visibleKeys","getEnumerableProperties","getProperties","isError","nameSuffix","isRegExp","isDate","Date","toUTCString","formatError","base","array","braces","output","formatArray","formatProperty","reduceToSingleString","simple","JSON","stringify","Infinity","__lookupGetter__","__lookupSetter__","split","line","substr","numLinesEst","reduce","prev","cur","ar","objectToString","d","HTMLElement","nodeType","nodeName","splice","_chainingBehavior","_method","_super","_get","includeAll","dedent","strings","raw","lines","mindent","m","indent","min","trim","b","sameValue","dateEqual","regexpEqual","Buffer","isBuffer","bufferEqual","argumentsEqual","typeEqual","objectEqual","getTime","iterableEqual","isValue","ka","kb","ex","define","amd","window","global","self","localforage","_dereq_","nextTick","draining","oldQueue","queue","immediate","task","scheduleDrain","Mutation","MutationObserver","WebKitMutationObserver","called","observer","element","createTextNode","observe","characterData","data","setImmediate","MessageChannel","createElement","scriptEl","onreadystatechange","parentNode","removeChild","documentElement","setTimeout","channel","port1","onmessage","port2","postMessage","2","INTERNAL","Promise","resolver","state","PENDING","outcome","safelyResolveThenable","QueueItem","promise","onFulfilled","onRejected","callFulfilled","otherCallFulfilled","callRejected","otherCallRejected","unwrap","returnValue","handlers","reject","resolve","getThen","then","thenable","onError","onSuccess","tryToUnwrap","tryCatch","status","out","reason","iterable","values","resolved","resolveFromAll","outValue","error","race","response","REJECTED","FULFILLED","3","4","_classCallCheck","instance","Constructor","createBlob","parts","properties","Blob","builder","BlobBuilder","MSBlobBuilder","MozBlobBuilder","WebKitBlobBuilder","append","getBlob","executeCallback","callback","executeTwoCallbacks","errorCallback","_binStringToArrayBuffer","bin","buf","ArrayBuffer","arr","Uint8Array","charCodeAt","_checkBlobSupportWithoutCaching","idb","Promise$1","txn","transaction","DETECT_BLOB_SUPPORT_STORE","blob","objectStore","put","onabort","preventDefault","stopPropagation","oncomplete","matchedChrome","navigator","userAgent","matchedEdge","parseInt","_checkBlobSupport","supportsBlobs","_deferReadiness","dbInfo","dbContext","dbContexts","deferredOperation","deferredOperations","dbReady","_advanceReadiness","_getConnection","upgradeNeeded","db","close","dbArgs","openreq","open","onupgradeneeded","createObjectStore","storeName","oldVersion","newVersion","onerror","onsuccess","_getOriginalConnection","_getUpgradedConnection","_isUpgradeNeeded","defaultVersion","isNewStore","objectStoreNames","contains","isDowngrade","isUpgrade","incVersion","_encodeBlob","reader","FileReader","onloadend","base64","btoa","target","__local_forage_encoded_blob","readAsBinaryString","_decodeBlob","encodedBlob","atob","_isEncodedBlob","_fullyReady","_initReady","_dbInfo","_initStorage","options","ignoreErrors","forages","ready","initPromises","j","forage","_defaultConfig","getItem","req","iterate","iterator","openCursor","iterationNumber","cursor","setItem","blobSupport","removeItem","clear","count","advanced","advance","stringToBuffer","serializedString","encoded1","encoded2","encoded3","encoded4","bufferLength","buffer","bytes","BASE_CHARS","bufferToString","base64String","substring","serialize","valueType","toString$1","marker","SERIALIZED_MARKER","TYPE_ARRAYBUFFER","TYPE_INT8ARRAY","TYPE_UINT8ARRAY","TYPE_UINT8CLAMPEDARRAY","TYPE_INT16ARRAY","TYPE_UINT16ARRAY","TYPE_INT32ARRAY","TYPE_UINT32ARRAY","TYPE_FLOAT32ARRAY","TYPE_FLOAT64ARRAY","fileReader","onload","BLOB_TYPE_PREFIX","TYPE_BLOB","readAsArrayBuffer","deserialize","SERIALIZED_MARKER_LENGTH","parse","blobType","TYPE_SERIALIZED_MARKER_LENGTH","BLOB_TYPE_PREFIX_REGEX","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","_initStorage$1","dbInfoPromise","openDatabase","description","size","executeSql","serializer","localforageSerializer","getItem$1","results","rows","item","iterate$1","_setItem","retriesLeft","originalValue","sqlError","QUOTA_ERR","setItem$1","removeItem$1","clear$1","length$1","c","key$1","keys$1","_initStorage$2","keyPrefix","clear$2","localStorage","getItem$2","iterate$2","keyPrefixLength","key$2","keys$2","length$2","removeItem$2","setItem$2","callWhenReady","localForageInstance","libraryMethod","_args","extend","arg","isLibraryDriver","driverName","driver","DriverType","_typeof","Symbol","indexedDB","webkitIndexedDB","mozIndexedDB","OIndexedDB","msIndexedDB","asyncStorage","_driver","webSQLStorage","localStorageWrapper","CustomDrivers","INDEXEDDB","LOCALSTORAGE","WEBSQL","LibraryMethods","DefaultConfig","driverSupport","isSafari","platform","hasFetch","fetch","IDBKeyRange","localforage_js","LocalForage","_config","_driverSet","_initDriver","_ready","_wrapLibraryMethodsWithReady","setDriver","defineDriver","driverObject","complianceError","namingError","customDriverMethods","concat","customDriverMethod","supportPromise","_support","supportResult","getDriver","getDriverPromise","getSerializer","serializerPromise","drivers","setDriverToConfig","extendSelfWithDriver","_extend","initDriver","supportedDrivers","driverPromiseLoop","currentDriverIndex","_getSupportedDrivers","oldDriverSetDone","supports","libraryMethodsAndProperties","createInstance","getType","natives","Library","[object Array]","[object RegExp]","[object Function]","[object Arguments]","[object Date]","of","ReferenceError","objectTypeRegexp","dedentStrings","problems","prob","updateLocalstore","catch","log","debounce","wait","timeout","later","callNow","clearTimeout","getRandomIndex","problemsArr","ind","floor","random","currentIndex","getPreviousIndex","getNextIndex","getCurrentProblem","previousProblem","previousProblemButtonEl","classList","add","shuffle","location","reload","nextProblem","nextProblemButtonEl","toggleShuffle","shuffleProblemsButtonEl","toggle","loadProblem","problemObj","currentProblem","problemEl","innerText","codeEl","testSuite","updateTests","testStatus","init","buildTests","updateTestStatus","testsDom","testSuiteEl","testStatuses","allPassed","testPassed","querySelectorAll","testStatusEl","iter","remove","testTotalEl","printAssertError","errObj","inner","assertConsoleEl","printEvalOutput","evalConsoleEl","tested","runTests","getOutput","evald","eval","testOutcome","loadApp","problemNav","keyCode","shiftKey","metaKey","ctrlKey","debouncedInputValidation","ignoreKeyCodes","addEventListener","probs","subject","_problems","_toConsumableArray","timer","getElementById"],"mappings":"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","file":"bundle.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = {\n  initial: require('./problems/initial'),\n  arrays: require('./problems/arrays')\n};","module.exports = [\n  {\n    name: 'Access Array by index (first)',\n    time: 10,\n    prompt: 'Return the first value of the Array',\n    given: `const fruits = ['apple', 'banana'];\\r`,\n    answer: `const fruits = ['apple', 'banana'];\n             return fruits[0];`,\n    tests: [\n      {\n        name: 'Correct output',\n        test: 'assert.deepEqual(output, \\'apple\\') === undefined'\n      },\n      {\n        name: 'Returns a String',\n        test: 'assert.isString(output) === undefined'\n      }\n    ]\n  },\n  {\n    name: 'Access Array by index (last)',\n    time: 10,\n    prompt: 'Return the last value of the Array',\n    given: `const fruits = ['apple', 'banana', 'orange'];\\r`,\n    answer: `const fruits = ['apple', 'banana', 'orange'];\n             return fruits[fruits.length - 1];`,\n    tests: [\n      {\n        name: 'Correct output',\n        test: `assert.deepEqual(output, 'orange') === undefined;`\n      },\n      {\n        name: 'Returns a String',\n        test: `assert.isString(output) === undefined;`\n      }\n    ]\n  },\n  {\n    name: 'Access Array by index (second)',\n    time: 10,\n    prompt: 'Return the second value of the Array',\n    given: `const fruits = ['apple', 'banana'];\\r`,\n    answer: `const fruits = ['apple', 'banana'];\n             return fruits[1];`,\n    tests: [\n      {\n        name: 'Correct output',\n        test: `assert.deepEqual(output, 'banana') === undefined;`\n      },\n      {\n        name: 'Returns a String',\n        test: `assert.isString(output) === undefined;`\n      }\n    ]\n  },\n  {\n    name: 'Array.forEach()',\n    time: 20,\n    prompt: 'Loop over the array, add an \\'x\\' to the end of each name, push each fruit into a new array, then return the new array.',\n    given: `const fruits = ['apple', 'banana'];\\r`,\n    answer: `const fruits = ['apple', 'banana'];\n             const newFruits = [];\n             fruits.forEach(function(item) {\n               newFruits.push(item+'x');\n             });\n             return newFruits;`,\n    tests: [\n      {\n        name: 'Correct output',\n        test: `assert.deepEqual(output, ['applex', 'bananax']) === undefined;`\n      },\n      {\n        name: 'Returns an Array',\n        test: `assert.isArray(output) === undefined;`\n      },\n      {\n        name: 'Array has 2 items',\n        test: `assert.lengthOf(output, 2) === undefined;`\n      }\n    ]\n  },\n  {\n    name: 'Array.push()',\n    time: 10,\n    prompt: `Add 'orange' to the end of the 'fruits' array and return 'fruits'.`,\n    given: `const fruits = ['apple', 'banana'];\\r`,\n    answer: `const fruits = ['apple', 'banana'];\n             fruits.push('orange');\n             return fruits;`,\n    tests: [\n      {\n        name: 'Correct output',\n        test: `(assert.deepEqual(output, ['apple', 'banana', 'orange']) === undefined);`\n      },\n      {\n        name: 'Returns an Array',\n        test: `assert.isArray(output) === undefined;`\n      },\n      {\n        name: 'Array has 3 items',\n        test: `assert.lengthOf(output, 3) === undefined;`\n      }\n    ]\n  },\n  {\n    name: 'Array.shift()',\n    time: 10,\n    prompt: `Remove 'apple' from the front of the 'fruits' array and return 'fruits'.`,\n    given: `const fruits = ['apple', 'banana', 'orange'];\\r`,\n    answer: `const fruits = ['apple', 'banana', 'orange'];\n             fruits.shift();\n             return fruits;`,\n    tests: [\n      {\n        name: 'Output must be correct',\n        test: `assert.deepEqual(output, ['banana', 'orange']) === undefined;`\n      },\n      {\n        name: 'Returns an Array',\n        test: `assert.isArray(output) === undefined;`\n      },\n      {\n        name: 'Array has 2 items',\n        test: `assert.lengthOf(output, 2) === undefined;`\n      }\n    ]\n  },\n  {\n    name: 'Array.unshift()',\n    time: 10,\n    prompt: `Add 'strawberry' to the front of the 'fruits' array and return 'fruits'.`,\n    given: `const fruits = ['apple', 'banana', 'orange'];\\r`,\n    answer: `const fruits = ['apple', 'banana', 'orange'];\n             fruits.unshift('strawberry');\n             return fruits;`,\n    tests: [\n      {\n        name: 'Output must be correct',\n        test: `(assert.deepEqual(output, [\n                  'strawberry',\n                  'apple',\n                  'banana',\n                  'orange'\n                ]) === undefined)`\n      },\n      {\n        name: 'Must return an Array',\n        test: `assert.isArray(output) === undefined;`\n      },\n      {\n        name: 'Array has 4 items',\n        test: `assert.lengthOf(output, 4) === undefined;`\n      }\n    ]\n  },\n  {\n    name: 'Array.indexOf()',\n    time: 10,\n    prompt: `Return the index of 'banana' in the Array.`,\n    given: `const fruits = ['strawberry', 'banana', 'mango'];\\r`,\n    answer: `const fruits = ['strawberry', 'banana', 'mango'];\n             const ind = fruits.indexOf('banana');\n             return ind;`,\n    tests: [\n      {\n        name: 'Correct output',\n        test: `assert.deepEqual(output, 1) === undefined;`\n      },\n      {\n        name: 'Returns a Number',\n        test: `assert.isNumber(output) === undefined;`\n      }\n    ]\n  },\n  {\n    name: 'Array.concat()',\n    time: 10,\n    prompt: `Merge the two arrays using Array's 'concat()' method. Return the resulting array.`,\n    given: `const fruits = ['strawberry', 'banana'];\\rconst otherFruits = ['pear','peach'];\\r`,\n    answer: `const fruits = ['strawberry', 'banana'];\n            const otherFruits = ['pear','peach'];\n            const allTheFruits = fruits.concat(otherFruits);\n            return allTheFruits;\\r`,\n    tests: [\n      {\n        name: 'Correct output',\n        test: `(assert.deepEqual(output, [\n                  'strawberry',\n                  'banana',\n                  'pear',\n                  'peach'\n                ]) === undefined\n              );`\n      },\n      {\n        name: 'Returns an Array',\n        test: `assert.isArray(output) === undefined;`\n      },\n      {\n        name: 'Array has 4 items',\n        test: `assert.lengthOf(output, 4) === undefined;`\n      }\n    ]\n  },\n  {\n    name: 'Array.join()',\n    time: 10,\n    prompt: `Mix the two flavors with a '-' using Array's 'join' method. Return the resulting hybrid flavor.`,\n    given: `const fruits = ['strawberry', 'banana'];\\r`,\n    answer: `const fruits = ['strawberry', 'banana'];\n             const hybrid = fruits.join('-');\n             return hybrid;\\r`,\n    tests: [\n      {\n        name: 'Correct output',\n        test: `assert.deepEqual(output, 'strawberry-banana') === undefined;`\n      },\n      {\n        name: 'Returns a String',\n        test: `assert.isString(output) === undefined;`\n      }\n    ]\n  },\n  {\n    name: 'Array.slice()',\n    time: 20,\n    prompt: `Return just the citrus fruits from the 'fruits' array using 'Array.slice()'`,\n    given: `const fruits = ['strawberry', 'orange', 'lemon', 'banana'];\\r`,\n    answer: `const fruits = ['strawberry', 'orange', 'lemon', 'banana'];\n             const citrus = fruits.slice(1, 3);\n             return citrus;`,\n    tests: [\n      {\n        name: 'Correct output',\n        test: `assert.deepEqual(output, ['orange', 'lemon']) === undefined;`\n      },\n      {\n        name: 'Returns an Array',\n        test: `assert.isArray(output) === undefined;`\n      },\n      {\n        name: 'Array has 2 items',\n        test: `assert.lengthOf(output, 2) === undefined;`\n      }\n    ]\n  },\n  {\n    name: 'Array.reverse()',\n    time: 10,\n    prompt: `Reverse the order of the 'fruit' array using 'Array.reverse()'`,\n    given: `const fruits = ['strawberry', 'orange', 'lemon', 'banana'];\\r`,\n    answer: `const fruits = ['strawberry', 'orange', 'lemon', 'banana'];\n             const stiurf = fruits.reverse();\n             return stiurf;`,\n    tests: [\n      {\n        name: 'Correct output',\n        test: `(assert.deepEqual(output, [\n                  'banana',\n                  'lemon',\n                  'orange',\n                  'strawberry'\n                ]) === undefined);`\n      },\n      {\n        name: 'Returns an Array',\n        test: `assert.isArray(output) === undefined;`\n      },\n      {\n        name: 'Array has 4 items',\n        test: `assert.lengthOf(output, 4) === undefined;`\n      },\n      {\n        name: `First item is 'banana'`,\n        test: `assert.deepEqual(output[0], 'banana') === undefined;`\n      }\n    ]\n  },\n  {\n    name: 'Array.sort()',\n    time: 10,\n    prompt: `Return the 'fruits' Array after sorting them using 'Array.sort()'.`,\n    given: `const fruits = ['strawberry', 'orange', 'lemon', 'banana'];\\r`,\n    answer: `const fruits = ['strawberry', 'orange', 'lemon', 'banana'];\n             const orderlyFruit = fruits.sort();\n             return orderlyFruit;`,\n    tests: [\n      {\n        name: 'Correct output',\n        test: `(assert.deepEqual(output, [\n                  'banana',\n                  'lemon',\n                  'orange',\n                  'strawberry'\n                ]) === undefined);`\n      },\n      {\n        name: 'Returns an Array',\n        test: `assert.isArray(output) === undefined;`\n      },\n      {\n        name: 'Array has 4 items',\n        test: `assert.lengthOf(output, 4) === undefined;`\n      },\n      {\n        name: `First item is 'banana'`,\n        test: `assert.deepEqual(output[0], 'banana') === undefined;`\n      }\n    ]\n  },\n  {\n    name: 'Array.lastIndexOf()',\n    time: 10,\n    prompt: `Return the index of the last 'peach' instance in the 'fruit' array using 'Array.lastIndexOf()'`,\n    given: `const fruits = ['peach', 'orange', 'lemon', 'peach'];\\r`,\n    answer: `const fruits = ['peach', 'orange', 'lemon', 'peach'];\n             const wheresTheLastPeach = fruits.lastIndexOf('peach');\n             return wheresTheLastPeach;`,\n    tests: [\n      {\n        name: 'Correct output',\n        test: `assert.deepEqual(output, 3) === undefined;`\n      },\n      {\n        name: 'Returns a Number',\n        test: `assert.isNumber(output) === undefined;`\n      }\n    ]\n  },\n  {\n    name: 'Array.filter()',\n    time: 10,\n    prompt: `Return an array of the numbers greater than 5 in 'numbers' using 'Array.filter()'`,\n    given: `const numbers = [1, 1, 2, 3, 5, 8, 13, 21];\\r`,\n    answer: `const numbers = [1, 1, 2, 3, 5, 8, 13, 21];\n             const overFive = numbers.filter(num => num > 5);\n             return overFive;`,\n    tests: [\n      {\n        name: 'Correct output',\n        test: `assert.deepEqual(output, [8, 13, 21]) === undefined;`\n      },\n      {\n        name: 'Returns an Array',\n        test: `assert.isArray(output) === undefined;`\n      },\n      {\n        name: 'Array has 3 items',\n        test: `assert.lengthOf(output, 3) === undefined;`\n      },\n      {\n        name: `First item is 8`,\n        test: `assert.deepEqual(output[0], 8) === undefined;`\n      }\n    ]\n  },\n  {\n    name: 'Array.map()',\n    time: 10,\n    prompt: `Return an array of 'numbers' array's square roots, using 'Array.map()' and 'Math.sqrt()'`,\n    given: `const numbers = [25, 121, 169];\\r`,\n    answer: `const numbers = [25, 121, 169];\n             const roots = numbers.map(num => Math.sqrt(num));\n             return roots;`,\n    tests: [\n      {\n        name: 'Correct output',\n        test: `assert.deepEqual(output, [5, 11, 13]) === undefined;`\n      },\n      {\n        name: 'Returns an Array',\n        test: `assert.isArray(output) === undefined;`\n      },\n      {\n        name: 'Array has 3 items',\n        test: `assert.lengthOf(output, 3) === undefined;`\n      },\n      {\n        name: `First item is 5`,\n        test: `assert.deepEqual(output[0], 5) === undefined;`\n      },\n      {\n        name: `Last item is 13`,\n        test: `assert.deepEqual(output[output.length - 1], 13) === undefined;`\n      }\n    ]\n  },\n  {\n    name: 'Array.every()',\n    time: 10,\n    prompt: `Return object that returns whether each array contains all even numbers using Array.every().`,\n    given: `const evenNumbers = [2, 4, 6, 8];\n            const someOddNumbers = [2, 5, 6, 8];\n            function isEven(element) {\n            \n            }\n            return {\n              evenNumbers: evenNumbers.,\n              someOddNumbers: someOddNumbers.\n            };`,\n    answer: `const evenNumbers = [2, 4, 6, 8];\n             const someOddNumbers = [2, 5, 6, 8];\n             function isEven(element) {\n               return element % 2 === 0\n             }\n             return {\n               evenNumbers: evenNumbers.every(isEven),\n               someOddNumbers: someOddNumbers.every(isEven)\n             };`,\n    tests: [\n      {\n        name: 'Correct output',\n        test: `assert.deepEqual(output, {\n            evenNumbers: true,\n            someOddNumbers: false\n          }) === undefined;`\n      },\n      {\n        name: 'Returns an Object',\n        test: `assert.isObject(output) === undefined;`\n      },\n      {\n        name: 'Object has 2 items',\n        test: `assert.lengthOf(Object.keys(output), 2) === undefined;`\n      },\n      {\n        name: `First value is true`,\n        test: `assert.isTrue(output.evenNumbers) === undefined;`\n      },\n      {\n        name: `Second value is false`,\n        test: `assert.isFalse(output.someOddNumbers) === undefined;`\n      }\n    ]\n  },\n  {\n    name: 'Array.some()',\n    time: 10,\n    prompt: `Return 'Object' that returns whether each array contains some odd numbers using 'Array.some()'.`,\n    given: `const evenNumbers = [2, 4, 6, 8];\n            const someOddNumbers = [2, 4, 7, 8];\n            function isOdd(element) {\n              \n            }\n            return {\n              evenNumbers: evenNumbers.,\n              someOddNumbers: someOddNumbers.\n            };`,\n    answer: `const evenNumbers = [1, 3, 5, 7];\n             const someOddNumbers = [1, 3, 6, 7];\n             function isOdd(element) {\n               return element % 2 !== 0;\n             }\n             return {\n               evenNumbers: evenNumbers.some(isOdd),\n               someOddNumbers: someOddNumbers.some(isOdd)\n             };`,\n    tests: [\n      {\n        name: 'Correct output',\n        test: `assert.deepEqual(output, {\n            evenNumbers: false,\n            someOddNumbers: true\n          }) === undefined;`\n      },\n      {\n        name: 'Returns an Object',\n        test: `assert.isObject(output) === undefined;`\n      },\n      {\n        name: 'Object has 2 items',\n        test: `assert.lengthOf(Object.keys(output), 2) === undefined;`\n      },\n      {\n        name: `First value is false`,\n        test: `assert.isFalse(output.evenNumbers) === undefined;`\n      },\n      {\n        name: `Second value is true`,\n        test: `assert.isTrue(output.someOddNumbers) === undefined;`\n      }\n    ]\n  }\n  // Next problems to create:\n  // forEach? fix one above that tried, but can't verify forEach was used\n  // some\n  // reduce\n  // reduceRight\n  // Array.from and other ways to turn array-like into array\n];\n","module.exports = [\n  {\n    name: 'Create Array',\n    time: 10,\n    prompt: 'Create and return an array that contains \\'apple\\' and \\'banana\\'',\n    given: `const fruits = [];\\rreturn fruits;`,\n    answer: `const fruits = ['apple', 'banana'];\n             return fruits;`,\n    tests: [\n      {\n        name: 'Correct output',\n        test: `assert.deepEqual(output, ['apple', 'banana']) === undefined;`\n      },\n      {\n        name: 'Returns an Array',\n        test: `assert.isArray(output) === undefined;`\n      },\n      {\n        name: 'Array has 2 items',\n        test: `assert.lengthOf(output, 2) === undefined;`\n      }\n    ]\n  },\n  {\n    name: 'Array.pop()',\n    time: 10,\n    prompt: `Remove 'orange' from the end of the 'fruits' array and return 'fruits'.`,\n    given: `const fruits = ['apple', 'banana', 'orange'];\\r`,\n    answer: `const fruits = ['apple', 'banana', 'orange'];\n             fruits.pop();\n             return fruits;`,\n    tests: [\n      {\n        name: 'Correct output',\n        test: `assert.deepEqual(output, ['apple', 'banana']) === undefined;`\n      },\n      {\n        name: 'Returns an Array',\n        test: `assert.isArray(output) === undefined;`\n      },\n      {\n        name: 'Array has 2 items',\n        test: `assert.lengthOf(output, 2) === undefined;`\n      }\n    ]\n  },\n]\n","/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || arguments.callee;\n  if (ssf && Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n","module.exports = require('./lib/chai');\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = []\n  , exports = module.exports = {};\n\n/*!\n * Chai version\n */\n\nexports.version = '3.5.0';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(this, util);\n    used.push(fn);\n  }\n\n  return this;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * @api private\n   */\n\n  function Assertion (obj, msg, stack) {\n    flag(this, 'ssfi', stack || arguments.callee);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (true !== showDiff) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      var msg = util.getMessage(this, arguments)\n        , actual = util.getActual(this, arguments);\n      throw new AssertionError(msg, {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n","module.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n   includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40\n\n};\n","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , toString = Object.prototype.toString\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to\n   * improve the readability of your assertions. They\n   * do not provide testing capabilities unless they\n   * have been overwritten by a plugin.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been'\n  , 'is', 'and', 'has', 'have'\n  , 'with', 'that', 'which', 'at'\n  , 'of', 'same' ].forEach(function (chain) {\n    Assertion.addProperty(chain, function () {\n      return this;\n    });\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates any of assertions following in the chain.\n   *\n   *     expect(foo).to.not.equal('bar');\n   *     expect(goodFn).to.not.throw(Error);\n   *     expect({ foo: 'baz' }).to.have.property('foo')\n   *       .and.not.equal('bar');\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Sets the `deep` flag, later used by the `equal` and\n   * `property` assertions.\n   *\n   *     expect(foo).to.deep.equal({ bar: 'baz' });\n   *     expect({ foo: { bar: { baz: 'quux' } } })\n   *       .to.have.deep.property('foo.bar.baz', 'quux');\n   *\n   * `.deep.property` special characters can be escaped\n   * by adding two slashes before the `.` or `[]`.\n   *\n   *     var deepCss = { '.link': { '[target]': 42 }};\n   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Sets the `any` flag, (opposite of the `all` flag)\n   * later used in the `keys` assertion.\n   *\n   *     expect(foo).to.have.any.keys('bar', 'baz');\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false)\n  });\n\n\n  /**\n   * ### .all\n   *\n   * Sets the `all` flag (opposite of the `any` flag)\n   * later used by the `keys` assertion.\n   *\n   *     expect(foo).to.have.all.keys('bar', 'baz');\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type)\n   *\n   * The `a` and `an` assertions are aliases that can be\n   * used either as language chains or to assert a value's\n   * type.\n   *\n   *     // typeof\n   *     expect('test').to.be.a('string');\n   *     expect({ foo: 'bar' }).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(new Promise).to.be.a('promise');\n   *     expect(new Float32Array()).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   *     // es6 overrides\n   *     expect({[Symbol.toStringTag]:()=>'foo'}).to.be.a('foo');\n   *\n   *     // language chain\n   *     expect(foo).to.be.an.instanceof(Foo);\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj)\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(value)\n   *\n   * The `include` and `contain` assertions can be used as either property\n   * based language chains or as methods to assert the inclusion of an object\n   * in an array or a substring in a string. When used as language chains,\n   * they toggle the `contains` flag for the `keys` assertion.\n   *\n   *     expect([1,2,3]).to.include(2);\n   *     expect('foobar').to.contain('foo');\n   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Object|String|Number} obj\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    _.expectTypes(this, ['array', 'object', 'string']);\n\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var expected = false;\n\n    if (_.type(obj) === 'array' && _.type(val) === 'object') {\n      for (var i in obj) {\n        if (_.eql(obj[i], val)) {\n          expected = true;\n          break;\n        }\n      }\n    } else if (_.type(val) === 'object') {\n      if (!flag(this, 'negate')) {\n        for (var k in val) new Assertion(obj).property(k, val[k]);\n        return;\n      }\n      var subset = {};\n      for (var k in val) subset[k] = obj[k];\n      expected = _.eql(subset, val);\n    } else {\n      expected = (obj != undefined) && ~obj.indexOf(val);\n    }\n    this.assert(\n        expected\n      , 'expected #{this} to include ' + _.inspect(val)\n      , 'expected #{this} to not include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is truthy.\n   *\n   *     expect('everything').to.be.ok;\n   *     expect(1).to.be.ok;\n   *     expect(false).to.not.be.ok;\n   *     expect(undefined).to.not.be.ok;\n   *     expect(null).to.not.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is `true`.\n   *\n   *     expect(true).to.be.true;\n   *     expect(1).to.not.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , this.negate ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is `false`.\n   *\n   *     expect(false).to.be.false;\n   *     expect(0).to.not.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , this.negate ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is `null`.\n   *\n   *     expect(null).to.be.null;\n   *     expect(undefined).to.not.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *     expect(null).to.not.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   * Asserts that the target is `NaN`.\n   *\n   *     expect('foo').to.be.NaN;\n   *     expect(4).not.to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi'\n   *       , bar = null\n   *       , baz;\n   *\n   *     expect(foo).to.exist;\n   *     expect(bar).to.not.exist;\n   *     expect(baz).to.not.exist;\n   *\n   * @name exist\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('exist', function () {\n    this.assert(\n        null != flag(this, 'object')\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  });\n\n\n  /**\n   * ### .empty\n   *\n   * Asserts that the target's length is `0`. For arrays and strings, it checks\n   * the `length` property. For objects, it gets the count of\n   * enumerable keys.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *     expect({}).to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var obj = flag(this, 'object')\n      , expected = obj;\n\n    if (Array.isArray(obj) || 'string' === typeof object) {\n      expected = obj.length;\n    } else if (typeof obj === 'object') {\n      expected = Object.keys(obj).length;\n    }\n\n    this.assert(\n        !expected\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an arguments object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = Object.prototype.toString.call(obj);\n    this.assert(\n        '[object Arguments]' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(value)\n   *\n   * Asserts that the target is strictly equal (`===`) to `value`.\n   * Alternately, if the `deep` flag is set, asserts that\n   * the target is deeply equal to `value`.\n   *\n   *     expect('hello').to.equal('hello');\n   *     expect(42).to.equal(42);\n   *     expect(1).to.not.equal(true);\n   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });\n   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @alias deep.equal\n   * @param {Mixed} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      return this.eql(val);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(value)\n   *\n   * Asserts that the target is deeply equal to `value`.\n   *\n   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });\n   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(value)\n   *\n   * Asserts that the target is greater than `value`.\n   *\n   *     expect(10).to.be.above(5);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a minimum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.above(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len > n\n        , 'expected #{this} to have a length above #{exp} but got #{act}'\n        , 'expected #{this} to not have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above ' + n\n        , 'expected #{this} to be at most ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(value)\n   *\n   * Asserts that the target is greater than or equal to `value`.\n   *\n   *     expect(10).to.be.at.least(10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a minimum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.of.at.least(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);\n   *\n   * @name least\n   * @alias gte\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len >= n\n        , 'expected #{this} to have a length at least #{exp} but got #{act}'\n        , 'expected #{this} to have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least ' + n\n        , 'expected #{this} to be below ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n\n  /**\n   * ### .below(value)\n   *\n   * Asserts that the target is less than `value`.\n   *\n   *     expect(5).to.be.below(10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a maximum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.below(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len < n\n        , 'expected #{this} to have a length below #{exp} but got #{act}'\n        , 'expected #{this} to not have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below ' + n\n        , 'expected #{this} to be at least ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(value)\n   *\n   * Asserts that the target is less than or equal to `value`.\n   *\n   *     expect(5).to.be.at.most(5);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a maximum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.of.at.most(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);\n   *\n   * @name most\n   * @alias lte\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len <= n\n        , 'expected #{this} to have a length at most #{exp} but got #{act}'\n        , 'expected #{this} to have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most ' + n\n        , 'expected #{this} to be above ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n\n  /**\n   * ### .within(start, finish)\n   *\n   * Asserts that the target is within a range.\n   *\n   *     expect(7).to.be.within(5,10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a length range. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.within(2,4);\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n   *\n   * @name within\n   * @param {Number} start lowerbound inclusive\n   * @param {Number} finish upperbound inclusive\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , range = start + '..' + finish;\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len >= start && len <= finish\n        , 'expected #{this} to have a length within ' + range\n        , 'expected #{this} to not have a length within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor)\n   *\n   * Asserts that the target is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , Chai = new Tea('chai');\n   *\n   *     expect(Chai).to.be.an.instanceof(Tea);\n   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} message _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n    var name = _.getName(constructor);\n    this.assert(\n        flag(this, 'object') instanceof constructor\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name, [value])\n   *\n   * Asserts that the target has a property `name`, optionally asserting that\n   * the value of that property is strictly equal to  `value`.\n   * If the `deep` flag is set, you can use dot- and bracket-notation for deep\n   * references into objects and arrays.\n   *\n   *     // simple referencing\n   *     var obj = { foo: 'bar' };\n   *     expect(obj).to.have.property('foo');\n   *     expect(obj).to.have.property('foo', 'bar');\n   *\n   *     // deep referencing\n   *     var deepObj = {\n   *         green: { tea: 'matcha' }\n   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]\n   *     };\n   *\n   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');\n   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');\n   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');\n   *\n   * You can also use an array as the starting point of a `deep.property`\n   * assertion, or traverse nested arrays.\n   *\n   *     var arr = [\n   *         [ 'chai', 'matcha', 'konacha' ]\n   *       , [ { tea: 'chai' }\n   *         , { tea: 'matcha' }\n   *         , { tea: 'konacha' } ]\n   *     ];\n   *\n   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');\n   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');\n   *\n   * Furthermore, `property` changes the subject of the assertion\n   * to be the value of that property from the original object. This\n   * permits for further chainable assertions on that property.\n   *\n   *     expect(obj).to.have.property('foo')\n   *       .that.is.a('string');\n   *     expect(deepObj).to.have.property('green')\n   *       .that.is.an('object')\n   *       .that.deep.equals({ tea: 'matcha' });\n   *     expect(deepObj).to.have.property('teas')\n   *       .that.is.an('array')\n   *       .with.deep.property('[2]')\n   *         .that.deep.equals({ tea: 'konacha' });\n   *\n   * Note that dots and bracket in `name` must be backslash-escaped when\n   * the `deep` flag is set, while they must NOT be escaped when the `deep`\n   * flag is not set.\n   *\n   *     // simple referencing\n   *     var css = { '.link[target]': 42 };\n   *     expect(css).to.have.property('.link[target]', 42);\n   *\n   *     // deep referencing\n   *     var deepCss = { '.link': { '[target]': 42 }};\n   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n   *\n   * @name property\n   * @alias deep.property\n   * @param {String} name\n   * @param {Mixed} value (optional)\n   * @param {String} message _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('property', function (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isDeep = !!flag(this, 'deep')\n      , descriptor = isDeep ? 'deep property ' : 'property '\n      , negate = flag(this, 'negate')\n      , obj = flag(this, 'object')\n      , pathInfo = isDeep ? _.getPathInfo(name, obj) : null\n      , hasProperty = isDeep\n        ? pathInfo.exists\n        : _.hasProperty(name, obj)\n      , value = isDeep\n        ? pathInfo.value\n        : obj[name];\n\n    if (negate && arguments.length > 1) {\n      if (undefined === value) {\n        msg = (msg != null) ? msg + ': ' : '';\n        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));\n      }\n    } else {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          val === value\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  });\n\n\n  /**\n   * ### .ownProperty(name)\n   *\n   * Asserts that the target has an own property `name`.\n   *\n   *     expect('test').to.have.ownProperty('length');\n   *\n   * @name ownProperty\n   * @alias haveOwnProperty\n   * @param {String} name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnProperty (name, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        obj.hasOwnProperty(name)\n      , 'expected #{this} to have own property ' + _.inspect(name)\n      , 'expected #{this} to not have own property ' + _.inspect(name)\n    );\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, message]])\n   *\n   * Asserts that the target has an own property descriptor `name`, that optionally matches `descriptor`.\n   *\n   *     expect('test').to.have.ownPropertyDescriptor('length');\n   *     expect('test').to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 4 });\n   *     expect('test').not.to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 3 });\n   *     expect('test').ownPropertyDescriptor('length').to.have.property('enumerable', false);\n   *     expect('test').ownPropertyDescriptor('length').to.have.keys('value');\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          _.eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .length\n   *\n   * Sets the `doLength` flag later used as a chain precursor to a value\n   * comparison for the `length` property.\n   *\n   *     expect('foo').to.have.length.above(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n   *     expect('foo').to.have.length.below(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n   *     expect('foo').to.have.length.within(2,4);\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n   *\n   * *Deprecation notice:* Using `length` as an assertion will be deprecated\n   * in version 2.4.0 and removed in 3.0.0. Code using the old style of\n   * asserting for `length` property value using `length(value)` should be\n   * switched to use `lengthOf(value)` instead.\n   *\n   * @name length\n   * @namespace BDD\n   * @api public\n   */\n\n  /**\n   * ### .lengthOf(value[, message])\n   *\n   * Asserts that the target's `length` property has\n   * the expected value.\n   *\n   *     expect([ 1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foobar').to.have.lengthOf(6);\n   *\n   * @name lengthOf\n   * @param {Number} length\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).to.have.property('length');\n    var len = obj.length;\n\n    this.assert(\n        len == n\n      , 'expected #{this} to have a length of #{exp} but got #{act}'\n      , 'expected #{this} to not have a length of #{act}'\n      , n\n      , len\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addMethod('lengthOf', assertLength);\n\n  /**\n   * ### .match(regexp)\n   *\n   * Asserts that the target matches a regular expression.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} RegularExpression\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(string)\n   *\n   * Asserts that the string target contains another string.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * @name string\n   * @param {String} string\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n\n  /**\n   * ### .keys(key1, [key2], [...])\n   *\n   * Asserts that the target contains any or all of the passed-in keys.\n   * Use in combination with `any`, `all`, `contains`, or `have` will affect\n   * what will pass.\n   *\n   * When used in conjunction with `any`, at least one key that is passed\n   * in must exist in the target object. This is regardless whether or not\n   * the `have` or `contain` qualifiers are used. Note, either `any` or `all`\n   * should be used in the assertion. If neither are used, the assertion is\n   * defaulted to `all`.\n   *\n   * When both `all` and `contain` are used, the target object must have at\n   * least all of the passed-in keys but may have more keys not listed.\n   *\n   * When both `all` and `have` are used, the target object must both contain\n   * all of the passed-in keys AND the number of keys in the target object must\n   * match the number of keys passed in (in other words, a target object must\n   * have all and only all of the passed-in keys).\n   *\n   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo', 'baz');\n   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo');\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys('bar', 'baz');\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys(['foo']);\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys({'foo': 6});\n   *     expect({ foo: 1, bar: 2 }).to.have.all.keys(['bar', 'foo']);\n   *     expect({ foo: 1, bar: 2 }).to.have.all.keys({'bar': 6, 'foo': 7});\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys(['bar', 'foo']);\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys({'bar': 6});\n   *\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , str\n      , ok = true\n      , mixedArgsMsg = 'keys must be given single argument of Array|Object|String, or multiple String arguments';\n\n    switch (_.type(keys)) {\n      case \"array\":\n        if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n        break;\n      case \"object\":\n        if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n        keys = Object.keys(keys);\n        break;\n      default:\n        keys = Array.prototype.slice.call(arguments);\n    }\n\n    if (!keys.length) throw new Error('keys required');\n\n    var actual = Object.keys(obj)\n      , expected = keys\n      , len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all');\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      var intersection = expected.filter(function(key) {\n        return ~actual.indexOf(key);\n      });\n      ok = intersection.length > 0;\n    }\n\n    // Has all\n    if (all) {\n      ok = keys.every(function(key){\n        return ~actual.indexOf(key);\n      });\n      if (!flag(this, 'negate') && !flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key){\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + str\n      , 'expected #{this} to not ' + str\n      , expected.slice(0).sort()\n      , actual.sort()\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw(constructor)\n   *\n   * Asserts that the function target will throw a specific error, or specific type of error\n   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test\n   * for the error's message.\n   *\n   *     var err = new ReferenceError('This is a bad function.');\n   *     var fn = function () { throw err; }\n   *     expect(fn).to.throw(ReferenceError);\n   *     expect(fn).to.throw(Error);\n   *     expect(fn).to.throw(/bad function/);\n   *     expect(fn).to.not.throw('good function');\n   *     expect(fn).to.throw(ReferenceError, /bad function/);\n   *     expect(fn).to.throw(err);\n   *\n   * Please note that when a throw expectation is negated, it will check each\n   * parameter independently, starting with error constructor type. The appropriate way\n   * to check for the existence of a type of error but for a message that does not match\n   * is to use `and`.\n   *\n   *     expect(fn).to.throw(ReferenceError)\n   *        .and.not.throw(/good function/);\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {ErrorConstructor} constructor\n   * @param {String|RegExp} expected error message\n   * @param {String} message _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (constructor, errMsg, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).is.a('function');\n\n    var thrown = false\n      , desiredError = null\n      , name = null\n      , thrownError = null;\n\n    if (arguments.length === 0) {\n      errMsg = null;\n      constructor = null;\n    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {\n      errMsg = constructor;\n      constructor = null;\n    } else if (constructor && constructor instanceof Error) {\n      desiredError = constructor;\n      constructor = null;\n      errMsg = null;\n    } else if (typeof constructor === 'function') {\n      name = constructor.prototype.name;\n      if (!name || (name === 'Error' && constructor !== Error)) {\n        name = constructor.name || (new constructor()).name;\n      }\n    } else {\n      constructor = null;\n    }\n\n    try {\n      obj();\n    } catch (err) {\n      // first, check desired error\n      if (desiredError) {\n        this.assert(\n            err === desiredError\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n          , 'expected #{this} to not throw #{exp}'\n          , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n          , (err instanceof Error ? err.toString() : err)\n        );\n\n        flag(this, 'object', err);\n        return this;\n      }\n\n      // next, check constructor\n      if (constructor) {\n        this.assert(\n            err instanceof constructor\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n          , 'expected #{this} to not throw #{exp} but #{act} was thrown'\n          , name\n          , (err instanceof Error ? err.toString() : err)\n        );\n\n        if (!errMsg) {\n          flag(this, 'object', err);\n          return this;\n        }\n      }\n\n      // next, check message\n      var message = 'error' === _.type(err) && \"message\" in err\n        ? err.message\n        : '' + err;\n\n      if ((message != null) && errMsg && errMsg instanceof RegExp) {\n        this.assert(\n            errMsg.exec(message)\n          , 'expected #{this} to throw error matching #{exp} but got #{act}'\n          , 'expected #{this} to throw error not matching #{exp}'\n          , errMsg\n          , message\n        );\n\n        flag(this, 'object', err);\n        return this;\n      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {\n        this.assert(\n            ~message.indexOf(errMsg)\n          , 'expected #{this} to throw error including #{exp} but got #{act}'\n          , 'expected #{this} to throw error not including #{act}'\n          , errMsg\n          , message\n        );\n\n        flag(this, 'object', err);\n        return this;\n      } else {\n        thrown = true;\n        thrownError = err;\n      }\n    }\n\n    var actuallyGot = ''\n      , expectedThrown = name !== null\n        ? name\n        : desiredError\n          ? '#{exp}' //_.inspect(desiredError)\n          : 'an error';\n\n    if (thrown) {\n      actuallyGot = ' but #{act} was thrown'\n    }\n\n    this.assert(\n        thrown === true\n      , 'expected #{this} to throw ' + expectedThrown + actuallyGot\n      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot\n      , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n      , (thrownError instanceof Error ? thrownError.toString() : thrownError)\n    );\n\n    flag(this, 'object', thrownError);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method)\n   *\n   * Asserts that the object or class target will respond to a method.\n   *\n   *     Klass.prototype.bar = function(){};\n   *     expect(Klass).to.respondTo('bar');\n   *     expect(obj).to.respondTo('bar');\n   *\n   * To check if a constructor will respond to a static function,\n   * set the `itself` flag.\n   *\n   *     Klass.baz = function(){};\n   *     expect(Klass).itself.to.respondTo('baz');\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === _.type(obj) && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Sets the `itself` flag, later used by the `respondTo` assertion.\n   *\n   *     function Foo() {}\n   *     Foo.bar = function() {}\n   *     Foo.prototype.baz = function() {}\n   *\n   *     expect(Foo).itself.to.respondTo('bar');\n   *     expect(Foo).itself.not.to.respondTo('baz');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(method)\n   *\n   * Asserts that the target passes a given truth test.\n   *\n   *     expect(1).to.satisfy(function(num) { return num > 0; });\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , this.negate ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta)\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n\n    new Assertion(obj, msg).is.a('number');\n    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {\n      throw new Error('the arguments to closeTo or approximately must be numbers');\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  function isSubsetOf(subset, superset, cmp) {\n    return subset.every(function(elem) {\n      if (!cmp) return superset.indexOf(elem) !== -1;\n\n      return superset.some(function(elem2) {\n        return cmp(elem, elem2);\n      });\n    })\n  }\n\n  /**\n   * ### .members(set)\n   *\n   * Asserts that the target is a superset of `set`,\n   * or that the target and `set` have the same strictly-equal (===) members.\n   * Alternately, if the `deep` flag is set, set members are compared for deep\n   * equality.\n   *\n   *     expect([1, 2, 3]).to.include.members([3, 2]);\n   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);\n   *\n   *     expect([4, 2]).to.have.members([2, 4]);\n   *     expect([5, 2]).to.not.have.members([5, 2, 1]);\n   *\n   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n\n    new Assertion(obj).to.be.an('array');\n    new Assertion(subset).to.be.an('array');\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    if (flag(this, 'contains')) {\n      return this.assert(\n          isSubsetOf(subset, obj, cmp)\n        , 'expected #{this} to be a superset of #{act}'\n        , 'expected #{this} to not be a superset of #{act}'\n        , obj\n        , subset\n      );\n    }\n\n    this.assert(\n        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)\n        , 'expected #{this} to have the same members as #{act}'\n        , 'expected #{this} to not have the same members as #{act}'\n        , obj\n        , subset\n    );\n  });\n\n  /**\n   * ### .oneOf(list)\n   *\n   * Assert that a value appears somewhere in the top level of array `list`.\n   *\n   *     expect('a').to.be.oneOf(['a', 'b', 'c']);\n   *     expect(9).to.not.be.oneOf(['z']);\n   *     expect([3]).to.not.be.oneOf([1, 2, [3]]);\n   *\n   *     var three = [3];\n   *     // for object-types, contents are not compared\n   *     expect(three).to.not.be.oneOf([1, 2, [3]]);\n   *     // comparing references works\n   *     expect(three).to.be.oneOf([1, 2, three]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object');\n    new Assertion(list).to.be.an('array');\n\n    this.assert(\n        list.indexOf(expected) > -1\n      , 'expected #{this} to be one of #{exp}'\n      , 'expected #{this} to not be one of #{exp}'\n      , list\n      , expected\n    );\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n\n  /**\n   * ### .change(function)\n   *\n   * Asserts that a function changes an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 3 };\n   *     var noChangeFn = function() { return 'foo' + 'bar'; }\n   *     expect(fn).to.change(obj, 'val');\n   *     expect(noChangeFn).to.not.change(obj, 'val')\n   *\n   * @name change\n   * @alias changes\n   * @alias Change\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      initial !== object[prop]\n      , 'expected .' + prop + ' to change'\n      , 'expected .' + prop + ' to not change'\n    );\n  }\n\n  Assertion.addChainableMethod('change', assertChanges);\n  Assertion.addChainableMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(function)\n   *\n   * Asserts that a function increases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     expect(fn).to.increase(obj, 'val');\n   *\n   * @name increase\n   * @alias increases\n   * @alias Increase\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      object[prop] - initial > 0\n      , 'expected .' + prop + ' to increase'\n      , 'expected .' + prop + ' to not increase'\n    );\n  }\n\n  Assertion.addChainableMethod('increase', assertIncreases);\n  Assertion.addChainableMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(function)\n   *\n   * Asserts that a function decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     expect(fn).to.decrease(obj, 'val');\n   *\n   * @name decrease\n   * @alias decreases\n   * @alias Decrease\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      object[prop] - initial < 0\n      , 'expected .' + prop + ' to decrease'\n      , 'expected .' + prop + ' to not decrease'\n    );\n  }\n\n  Assertion.addChainableMethod('decrease', assertDecreases);\n  Assertion.addChainableMethod('decreases', assertDecreases);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible (can have new properties added to\n   * it).\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect({}).to.be.extensible;\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isExtensible;\n\n    try {\n      isExtensible = Object.isExtensible(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isExtensible = false;\n      else throw err;\n    }\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect({}).to.not.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isSealed;\n\n    try {\n      isSealed = Object.isSealed(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isSealed = true;\n      else throw err;\n    }\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect({}).to.not.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isFrozen;\n\n    try {\n      isFrozen = Object.isFrozen(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isFrozen = true;\n      else throw err;\n    }\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\nmodule.exports = function (chai, util) {\n\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   * Asserts that value is NaN\n   *\n   *    assert.isNaN('foo', 'foo is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   * Asserts that value is not NaN\n   *\n   *    assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg).not.to.be.NaN;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('number');\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg).to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Works\n   * for strings and arrays.\n   *\n   *     assert.include('foobar', 'bar', 'foobar contains string \"bar\"');\n   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Works\n   * for strings and arrays.\n   *\n   *     assert.notInclude('foobar', 'baz', 'string not include substring');\n   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude).not.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a property named by `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.not.have.property(prop);\n  };\n\n  /**\n   * ### .deepProperty(object, property, [message])\n   *\n   * Asserts that `object` has a property named by `property`, which can be a\n   * string using dot- and bracket-notation for deep reference.\n   *\n   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name deepProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.have.deep.property(prop);\n  };\n\n  /**\n   * ### .notDeepProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for deep reference.\n   *\n   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notDeepProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.not.have.deep.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`.\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.have.property(prop, val);\n  };\n\n  /**\n   * ### .propertyNotVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property`, but with a value\n   * different from that given by `value`.\n   *\n   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');\n   *\n   * @name propertyNotVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyNotVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for deep\n   * reference.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyNotVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property`, but with a value\n   * different from that given by `value`. `property` can use dot- and\n   * bracket-notation for deep reference.\n   *\n   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *\n   * @name deepPropertyNotVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyNotVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` property with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg).to.have.length(len);\n  };\n\n  /**\n   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])\n   *\n   * Asserts that `function` will throw an error that is an instance of\n   * `constructor`, or alternately that it will throw an error with message\n   * matching `regexp`.\n   *\n   *     assert.throws(fn, 'function throws a reference error');\n   *     assert.throws(fn, /function throws a reference error/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, ReferenceError, 'function throws a reference error');\n   *     assert.throws(fn, ReferenceError, /function throws a reference error/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} function\n   * @param {ErrorConstructor} constructor\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errt, errs, msg) {\n    if ('string' === typeof errt || errt instanceof RegExp) {\n      errs = errt;\n      errt = null;\n    }\n\n    var assertErr = new Assertion(fn, msg).to.throw(errt, errs);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(function, [constructor/regexp], [message])\n   *\n   * Asserts that `function` will _not_ throw an error that is an instance of\n   * `constructor`, or alternately that it will not throw an error with message\n   * matching `regexp`.\n   *\n   *     assert.doesNotThrow(fn, Error, 'function does not throw');\n   *\n   * @name doesNotThrow\n   * @param {Function} function\n   * @param {ErrorConstructor} constructor\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, type, msg) {\n    if ('string' === typeof type) {\n      msg = type;\n      type = null;\n    }\n\n    new Assertion(fn, msg).to.not.Throw(type);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        throw new Error('Invalid operator \"' + operator + '\"');\n    }\n    var test = new Assertion(ok, msg);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg).to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members.\n   * Order is not taken into account.\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg).to.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members - using a deep equality checking.\n   * Order is not taken into account.\n   *\n   *     assert.sameDeepMembers([ {b: 3}, {a: 2}, {c: 5} ], [ {c: 5}, {b: 3}, {a: 2} ], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg).to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset`.\n   * Order is not taken into account.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg).to.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` - using deep equality checking.\n   * Order is not taken into account.\n   * Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ {a: 1}, {b: 2}, {c: 3} ], [ {b: 2}, {a: 1}, {b: 2} ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg).to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg).to.be.oneOf(list);\n  }\n\n   /**\n   * ### .changes(function, object, property)\n   *\n   * Asserts that a function changes the value of a property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop) {\n    new Assertion(fn).to.change(obj, prop);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property)\n   *\n   * Asserts that a function does not changes the value of a property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop) {\n    new Assertion(fn).to.not.change(obj, prop);\n  }\n\n   /**\n   * ### .increases(function, object, property)\n   *\n   * Asserts that a function increases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop) {\n    new Assertion(fn).to.increase(obj, prop);\n  }\n\n   /**\n   * ### .doesNotIncrease(function, object, property)\n   *\n   * Asserts that a function does not increase object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop) {\n    new Assertion(fn).to.not.increase(obj, prop);\n  }\n\n   /**\n   * ### .decreases(function, object, property)\n   *\n   * Asserts that a function decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop) {\n    new Assertion(fn).to.decrease(obj, prop);\n  }\n\n   /**\n   * ### .doesNotDecrease(function, object, property)\n   *\n   * Asserts that a function does not decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop) {\n    new Assertion(fn).to.not.decrease(obj, prop);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freese({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.frozen;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen');\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Expect\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String || this instanceof Number || this instanceof Boolean ) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace Should\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n","/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar transferFlags = require('./transferFlags');\nvar flag = require('./flag');\nvar config = require('../config');\n\n/*!\n * Module variables\n */\n\n// Check whether `__proto__` is supported\nvar hasProtoSupport = '__proto__' in Object;\n\n// Without `__proto__` support, this module will need to add properties to a function.\n// However, some Function.prototype methods cannot be overwritten,\n// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).\nvar excludeNames = /^(?:length|name|arguments|caller)$/;\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### addChainableMethod (ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var assert = function assert() {\n          var old_ssfi = flag(this, 'ssfi');\n          if (old_ssfi && config.includeStack === false)\n            flag(this, 'ssfi', assert);\n          var result = chainableBehavior.method.apply(this, arguments);\n          return result === undefined ? this : result;\n        };\n\n        // Use `__proto__` if available\n        if (hasProtoSupport) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = assert.__proto__ = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (!excludeNames.test(asserterName)) {\n              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n              Object.defineProperty(assert, asserterName, pd);\n            }\n          });\n        }\n\n        transferFlags(this, assert);\n        return assert;\n      }\n    , configurable: true\n  });\n};\n","/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('../config');\n\n/**\n * ### .addMethod (ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\nvar flag = require('./flag');\n\nmodule.exports = function (ctx, name, method) {\n  ctx[name] = function () {\n    var old_ssfi = flag(this, 'ssfi');\n    if (old_ssfi && config.includeStack === false)\n      flag(this, 'ssfi', ctx[name]);\n    var result = method.apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n","/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('../config');\nvar flag = require('./flag');\n\n/**\n * ### addProperty (ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function (ctx, name, getter) {\n  Object.defineProperty(ctx, name,\n    { get: function addProperty() {\n        var old_ssfi = flag(this, 'ssfi');\n        if (old_ssfi && config.includeStack === false)\n          flag(this, 'ssfi', addProperty);\n\n        var result = getter.call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n","/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = require('assertion-error');\nvar flag = require('./flag');\nvar type = require('type-detect');\n\nmodule.exports = function (obj, types) {\n  var obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lirum, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  if (!types.some(function (expected) { return type(obj) === expected; })) {\n    throw new AssertionError(\n      'object tested must be ' + str + ', but ' + type(obj) + ' given'\n    );\n  }\n};\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function (obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n","/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * # getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function (obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n","/*!\n * Chai - getEnumerableProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getEnumerableProperties(object)\n *\n * This allows the retrieval of enumerable property names of an object,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getEnumerableProperties(object) {\n  var result = [];\n  for (var name in object) {\n    result.push(name);\n  }\n  return result;\n};\n","/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , inspect = require('./inspect')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n","/*!\n * Chai - getName utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * # getName(func)\n *\n * Gets the name of a function, in a cross-browser way.\n *\n * @param {Function} a function (usually a constructor)\n * @namespace Utils\n * @name getName\n */\n\nmodule.exports = function (func) {\n  if (func.name) return func.name;\n\n  var match = /^\\s?function ([^(]*)\\(/.exec(func);\n  return match && match[1] ? match[1] : \"\";\n};\n","/*!\n * Chai - getPathInfo utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar hasProperty = require('./hasProperty');\n\n/**\n * ### .getPathInfo(path, object)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {String} path\n * @param {Object} object\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nmodule.exports = function getPathInfo(path, obj) {\n  var parsed = parsePath(path),\n      last = parsed[parsed.length - 1];\n\n  var info = {\n    parent: parsed.length > 1 ? _getPathValue(parsed, obj, parsed.length - 1) : obj,\n    name: last.p || last.i,\n    value: _getPathValue(parsed, obj)\n  };\n  info.exists = hasProperty(info.name, info.parent);\n\n  return info;\n};\n\n\n/*!\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `_getPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be as near infinitely deep and nested\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath (path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[')\n    , parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function (value) {\n    var re = /^\\[(\\d+)\\]$/\n      , mArr = re.exec(value);\n    if (mArr) return { i: parseFloat(mArr[1]) };\n    else return { p: value.replace(/\\\\([.\\[\\]])/g, '$1') };\n  });\n}\n\n\n/*!\n * ## _getPathValue(parsed, obj)\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(parsed, obj);\n *\n * @param {Object} parsed definition from `parsePath`.\n * @param {Object} object to search against\n * @param {Number} object to search against\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction _getPathValue (parsed, obj, index) {\n  var tmp = obj\n    , res;\n\n  index = (index === undefined ? parsed.length : index);\n\n  for (var i = 0, l = index; i < l; i++) {\n    var part = parsed[i];\n    if (tmp) {\n      if ('undefined' !== typeof part.p)\n        tmp = tmp[part.p];\n      else if ('undefined' !== typeof part.i)\n        tmp = tmp[part.i];\n      if (i == (l - 1)) res = tmp;\n    } else {\n      res = undefined;\n    }\n  }\n  return res;\n}\n","/*!\n * Chai - getPathValue utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\nvar getPathInfo = require('./getPathInfo');\n\n/**\n * ### .getPathValue(path, object)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue('prop1.str', obj); // Hello\n *     getPathValue('prop1.att[2]', obj); // b\n *     getPathValue('prop2.arr[0].nested', obj); // Universe\n *\n * @param {String} path\n * @param {Object} object\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\nmodule.exports = function(path, obj) {\n  var info = getPathInfo(path, obj);\n  return info.value;\n};\n","/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n","/*!\n * Chai - hasProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = require('type-detect');\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has\n * named property or numeric array index.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with natives\n * and null/undefined values.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty('str', obj);  // true\n *     hasProperty('constructor', obj);  // true\n *     hasProperty('bar', obj);  // false\n *\n *     hasProperty('length', obj.str); // true\n *     hasProperty(1, obj.str);  // true\n *     hasProperty(5, obj.str);  // false\n *\n *     hasProperty('length', obj.arr);  // true\n *     hasProperty(2, obj.arr);  // true\n *     hasProperty(3, obj.arr);  // false\n *\n * @param {Objuect} object\n * @param {String|Number} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nvar literals = {\n    'number': Number\n  , 'string': String\n};\n\nmodule.exports = function hasProperty(name, obj) {\n  var ot = type(obj);\n\n  // Bad Object, obviously no props at all\n  if(ot === 'null' || ot === 'undefined')\n    return false;\n\n  // The `in` operator does not work with certain literals\n  // box these before the check\n  if(literals[ot] && typeof obj !== 'object')\n    obj = new literals[ot](obj);\n\n  return name in obj;\n};\n","/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Main exports\n */\n\nvar exports = module.exports = {};\n\n/*!\n * test utility\n */\n\nexports.test = require('./test');\n\n/*!\n * type utility\n */\n\nexports.type = require('type-detect');\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = require('./expectTypes');\n\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n\n/*!\n * Deep path value\n */\n\nexports.getPathValue = require('./getPathValue');\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = require('./getPathInfo');\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = require('./hasProperty');\n\n/*!\n * Function name\n */\n\nexports.getName = require('./getName');\n\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n","// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('./getName');\nvar getProperties = require('./getProperties');\nvar getEnumerableProperties = require('./getEnumerableProperties');\n\nmodule.exports = inspect;\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: function (str) { return str; }\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\n\n// Returns true if object is a DOM element.\nvar isDOMElement = function (object) {\n  if (typeof HTMLElement === 'object') {\n    return object instanceof HTMLElement;\n  } else {\n    return object &&\n      typeof object === 'object' &&\n      object.nodeType === 1 &&\n      typeof object.nodeName === 'string';\n  }\n};\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes);\n    if (typeof ret !== 'string') {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // If this is a DOM element, try to get the outer HTML.\n  if (isDOMElement(value)) {\n    if ('outerHTML' in value) {\n      return value.outerHTML;\n      // This value does not have an outerHTML attribute,\n      //   it could still be an XML element\n    } else {\n      // Attempt to serialize it\n      try {\n        if (document.xmlVersion) {\n          var xmlSerializer = new XMLSerializer();\n          return xmlSerializer.serializeToString(value);\n        } else {\n          // Firefox 11- do not support outerHTML\n          //   It does, however, support innerHTML\n          //   Use the following to render the element\n          var ns = \"http://www.w3.org/1999/xhtml\";\n          var container = document.createElementNS(ns, '_');\n\n          container.appendChild(value.cloneNode(false));\n          html = container.innerHTML\n            .replace('><', '>' + value.innerHTML + '<');\n          container.innerHTML = '';\n          return html;\n        }\n      } catch (err) {\n        // This could be a non-native DOM implementation,\n        //   continue with the normal flow:\n        //   printing the element as if it is an object.\n      }\n    }\n  }\n\n  // Look up the keys of the object.\n  var visibleKeys = getEnumerableProperties(value);\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\n  // Some type of object without properties can be shortcutted.\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n  // a `stack` plus `description` property; ignore those for consistency.\n  if (keys.length === 0 || (isError(value) && (\n      (keys.length === 1 && keys[0] === 'stack') ||\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n     ))) {\n    if (typeof value === 'function') {\n      var name = getName(value);\n      var nameSuffix = name ? ': ' + name : '';\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    var name = getName(value);\n    var nameSuffix = name ? ': ' + name : '';\n    base = ' [Function' + nameSuffix + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    return formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      if (value === 0 && (1/value) === -Infinity) {\n        return ctx.stylize('-0', 'number');\n      }\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str;\n  if (value.__lookupGetter__) {\n    if (value.__lookupGetter__(key)) {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n}\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay (object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function (obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n","/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteChainableMethod (ctx, name, method, chainingBehavior)\n *\n * Overwites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.length(3);\n *     expect(myFoo).to.have.length.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function () {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    return result === undefined ? this : result;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function () {\n    var result = method(_method).apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n","/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteMethod (ctx, name, fn)\n *\n * Overwites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () { return this; };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  ctx[name] = function () {\n    var result = method(_super).apply(this, arguments);\n    return result === undefined ? this : result;\n  }\n};\n","/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteProperty (ctx, name, fn)\n *\n * Overwites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function (ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        var result = getter(_super).call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n","/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = require('./flag');\n\n/**\n * # test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n","/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, and `message`)\n * will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAsseriton = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function (assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n","\"use strict\";\n\nfunction dedent(strings) {\n\n  var raw = void 0;\n  if (typeof strings === \"string\") {\n    // dedent can be used as a plain function\n    raw = [strings];\n  } else {\n    raw = strings.raw;\n  }\n\n  // first, perform interpolation\n  var result = \"\";\n  for (var i = 0; i < raw.length; i++) {\n    result += raw[i].\n    // join lines when there is a suppressed newline\n    replace(/\\\\\\n[ \\t]*/g, \"\").\n\n    // handle escaped backticks\n    replace(/\\\\`/g, \"`\");\n\n    if (i < (arguments.length <= 1 ? 0 : arguments.length - 1)) {\n      result += arguments.length <= i + 1 ? undefined : arguments[i + 1];\n    }\n  }\n\n  // now strip indentation\n  var lines = result.split(\"\\n\");\n  var mindent = null;\n  lines.forEach(function (l) {\n    var m = l.match(/^(\\s+)\\S+/);\n    if (m) {\n      var indent = m[1].length;\n      if (!mindent) {\n        // this is the first indented line\n        mindent = indent;\n      } else {\n        mindent = Math.min(mindent, indent);\n      }\n    }\n  });\n\n  if (mindent !== null) {\n    result = lines.map(function (l) {\n      return l[0] === \" \" ? l.slice(mindent) : l;\n    }).join(\"\\n\");\n  }\n\n  // dedent eats leading and trailing whitespace too\n  result = result.trim();\n\n  // handle escaped newlines at the end to ensure they don't get stripped too\n  return result.replace(/\\\\n/g, \"\\n\");\n}\n\nif (typeof module !== \"undefined\") {\n  module.exports = dedent;\n}\n","module.exports = require('./lib/eql');\n","/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar type = require('type-detect');\n\n/*!\n * Buffer.isBuffer browser shim\n */\n\nvar Buffer;\ntry { Buffer = require('buffer').Buffer; }\ncatch(ex) {\n  Buffer = {};\n  Buffer.isBuffer = function() { return false; }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\n\n/**\n * Assert super-strict (egal) equality between\n * two objects of any type.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @param {Array} memoised (optional)\n * @return {Boolean} equal match\n */\n\nfunction deepEqual(a, b, m) {\n  if (sameValue(a, b)) {\n    return true;\n  } else if ('date' === type(a)) {\n    return dateEqual(a, b);\n  } else if ('regexp' === type(a)) {\n    return regexpEqual(a, b);\n  } else if (Buffer.isBuffer(a)) {\n    return bufferEqual(a, b);\n  } else if ('arguments' === type(a)) {\n    return argumentsEqual(a, b, m);\n  } else if (!typeEqual(a, b)) {\n    return false;\n  } else if (('object' !== type(a) && 'object' !== type(b))\n  && ('array' !== type(a) && 'array' !== type(b))) {\n    return sameValue(a, b);\n  } else {\n    return objectEqual(a, b, m);\n  }\n}\n\n/*!\n * Strict (egal) equality test. Ensures that NaN always\n * equals NaN and `-0` does not equal `+0`.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} equal match\n */\n\nfunction sameValue(a, b) {\n  if (a === b) return a !== 0 || 1 / a === 1 / b;\n  return a !== a && b !== b;\n}\n\n/*!\n * Compare the types of two given objects and\n * return if they are equal. Note that an Array\n * has a type of `array` (not `object`) and arguments\n * have a type of `arguments` (not `array`/`object`).\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction typeEqual(a, b) {\n  return type(a) === type(b);\n}\n\n/*!\n * Compare two Date objects by asserting that\n * the time values are equal using `saveValue`.\n *\n * @param {Date} a\n * @param {Date} b\n * @return {Boolean} result\n */\n\nfunction dateEqual(a, b) {\n  if ('date' !== type(b)) return false;\n  return sameValue(a.getTime(), b.getTime());\n}\n\n/*!\n * Compare two regular expressions by converting them\n * to string and checking for `sameValue`.\n *\n * @param {RegExp} a\n * @param {RegExp} b\n * @return {Boolean} result\n */\n\nfunction regexpEqual(a, b) {\n  if ('regexp' !== type(b)) return false;\n  return sameValue(a.toString(), b.toString());\n}\n\n/*!\n * Assert deep equality of two `arguments` objects.\n * Unfortunately, these must be sliced to arrays\n * prior to test to ensure no bad behavior.\n *\n * @param {Arguments} a\n * @param {Arguments} b\n * @param {Array} memoize (optional)\n * @return {Boolean} result\n */\n\nfunction argumentsEqual(a, b, m) {\n  if ('arguments' !== type(b)) return false;\n  a = [].slice.call(a);\n  b = [].slice.call(b);\n  return deepEqual(a, b, m);\n}\n\n/*!\n * Get enumerable properties of a given object.\n *\n * @param {Object} a\n * @return {Array} property names\n */\n\nfunction enumerable(a) {\n  var res = [];\n  for (var key in a) res.push(key);\n  return res;\n}\n\n/*!\n * Simple equality for flat iterable objects\n * such as Arrays or Node.js buffers.\n *\n * @param {Iterable} a\n * @param {Iterable} b\n * @return {Boolean} result\n */\n\nfunction iterableEqual(a, b) {\n  if (a.length !==  b.length) return false;\n\n  var i = 0;\n  var match = true;\n\n  for (; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      match = false;\n      break;\n    }\n  }\n\n  return match;\n}\n\n/*!\n * Extension to `iterableEqual` specifically\n * for Node.js Buffers.\n *\n * @param {Buffer} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction bufferEqual(a, b) {\n  if (!Buffer.isBuffer(b)) return false;\n  return iterableEqual(a, b);\n}\n\n/*!\n * Block for `objectEqual` ensuring non-existing\n * values don't get in.\n *\n * @param {Mixed} object\n * @return {Boolean} result\n */\n\nfunction isValue(a) {\n  return a !== null && a !== undefined;\n}\n\n/*!\n * Recursively check the equality of two objects.\n * Once basic sameness has been established it will\n * defer to `deepEqual` for each enumerable key\n * in the object.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction objectEqual(a, b, m) {\n  if (!isValue(a) || !isValue(b)) {\n    return false;\n  }\n\n  if (a.prototype !== b.prototype) {\n    return false;\n  }\n\n  var i;\n  if (m) {\n    for (i = 0; i < m.length; i++) {\n      if ((m[i][0] === a && m[i][1] === b)\n      ||  (m[i][0] === b && m[i][1] === a)) {\n        return true;\n      }\n    }\n  } else {\n    m = [];\n  }\n\n  try {\n    var ka = enumerable(a);\n    var kb = enumerable(b);\n  } catch (ex) {\n    return false;\n  }\n\n  ka.sort();\n  kb.sort();\n\n  if (!iterableEqual(ka, kb)) {\n    return false;\n  }\n\n  m.push([ a, b ]);\n\n  var key;\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], m)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","/*!\n    localForage -- Offline Storage, Improved\n    Version 1.5.0\n    https://localforage.github.io/localForage\n    (c) 2013-2017 Mozilla, Apache License 2.0\n*/\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.localforage = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw (f.code=\"MODULE_NOT_FOUND\", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode('');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var scriptEl = global.document.createElement('script');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],2:[function(_dereq_,module,exports){\n'use strict';\nvar immediate = _dereq_(1);\n\n/* istanbul ignore next */\nfunction INTERNAL() {}\n\nvar handlers = {};\n\nvar REJECTED = ['REJECTED'];\nvar FULFILLED = ['FULFILLED'];\nvar PENDING = ['PENDING'];\n\nmodule.exports = exports = Promise;\n\nfunction Promise(resolver) {\n  if (typeof resolver !== 'function') {\n    throw new TypeError('resolver must be a function');\n  }\n  this.state = PENDING;\n  this.queue = [];\n  this.outcome = void 0;\n  if (resolver !== INTERNAL) {\n    safelyResolveThenable(this, resolver);\n  }\n}\n\nPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n    typeof onRejected !== 'function' && this.state === REJECTED) {\n    return this;\n  }\n  var promise = new this.constructor(INTERNAL);\n  if (this.state !== PENDING) {\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n    unwrap(promise, resolver, this.outcome);\n  } else {\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n  }\n\n  return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n  this.promise = promise;\n  if (typeof onFulfilled === 'function') {\n    this.onFulfilled = onFulfilled;\n    this.callFulfilled = this.otherCallFulfilled;\n  }\n  if (typeof onRejected === 'function') {\n    this.onRejected = onRejected;\n    this.callRejected = this.otherCallRejected;\n  }\n}\nQueueItem.prototype.callFulfilled = function (value) {\n  handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function (value) {\n  unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function (value) {\n  handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function (value) {\n  unwrap(this.promise, this.onRejected, value);\n};\n\nfunction unwrap(promise, func, value) {\n  immediate(function () {\n    var returnValue;\n    try {\n      returnValue = func(value);\n    } catch (e) {\n      return handlers.reject(promise, e);\n    }\n    if (returnValue === promise) {\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n    } else {\n      handlers.resolve(promise, returnValue);\n    }\n  });\n}\n\nhandlers.resolve = function (self, value) {\n  var result = tryCatch(getThen, value);\n  if (result.status === 'error') {\n    return handlers.reject(self, result.value);\n  }\n  var thenable = result.value;\n\n  if (thenable) {\n    safelyResolveThenable(self, thenable);\n  } else {\n    self.state = FULFILLED;\n    self.outcome = value;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callFulfilled(value);\n    }\n  }\n  return self;\n};\nhandlers.reject = function (self, error) {\n  self.state = REJECTED;\n  self.outcome = error;\n  var i = -1;\n  var len = self.queue.length;\n  while (++i < len) {\n    self.queue[i].callRejected(error);\n  }\n  return self;\n};\n\nfunction getThen(obj) {\n  // Make sure we only access the accessor once as required by the spec\n  var then = obj && obj.then;\n  if (obj && typeof obj === 'object' && typeof then === 'function') {\n    return function appyThen() {\n      then.apply(obj, arguments);\n    };\n  }\n}\n\nfunction safelyResolveThenable(self, thenable) {\n  // Either fulfill, reject or reject with error\n  var called = false;\n  function onError(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.reject(self, value);\n  }\n\n  function onSuccess(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.resolve(self, value);\n  }\n\n  function tryToUnwrap() {\n    thenable(onSuccess, onError);\n  }\n\n  var result = tryCatch(tryToUnwrap);\n  if (result.status === 'error') {\n    onError(result.value);\n  }\n}\n\nfunction tryCatch(func, value) {\n  var out = {};\n  try {\n    out.value = func(value);\n    out.status = 'success';\n  } catch (e) {\n    out.status = 'error';\n    out.value = e;\n  }\n  return out;\n}\n\nexports.resolve = resolve;\nfunction resolve(value) {\n  if (value instanceof this) {\n    return value;\n  }\n  return handlers.resolve(new this(INTERNAL), value);\n}\n\nexports.reject = reject;\nfunction reject(reason) {\n  var promise = new this(INTERNAL);\n  return handlers.reject(promise, reason);\n}\n\nexports.all = all;\nfunction all(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var values = new Array(len);\n  var resolved = 0;\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    allResolver(iterable[i], i);\n  }\n  return promise;\n  function allResolver(value, i) {\n    self.resolve(value).then(resolveFromAll, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n    function resolveFromAll(outValue) {\n      values[i] = outValue;\n      if (++resolved === len && !called) {\n        called = true;\n        handlers.resolve(promise, values);\n      }\n    }\n  }\n}\n\nexports.race = race;\nfunction race(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    resolver(iterable[i]);\n  }\n  return promise;\n  function resolver(value) {\n    self.resolve(value).then(function (response) {\n      if (!called) {\n        called = true;\n        handlers.resolve(promise, response);\n      }\n    }, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n  }\n}\n\n},{\"1\":1}],3:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nif (typeof global.Promise !== 'function') {\n  global.Promise = _dereq_(2);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"2\":2}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction getIDB() {\n    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\n    try {\n        if (typeof indexedDB !== 'undefined') {\n            return indexedDB;\n        }\n        if (typeof webkitIndexedDB !== 'undefined') {\n            return webkitIndexedDB;\n        }\n        if (typeof mozIndexedDB !== 'undefined') {\n            return mozIndexedDB;\n        }\n        if (typeof OIndexedDB !== 'undefined') {\n            return OIndexedDB;\n        }\n        if (typeof msIndexedDB !== 'undefined') {\n            return msIndexedDB;\n        }\n    } catch (e) {}\n}\n\nvar idb = getIDB();\n\nfunction isIndexedDBValid() {\n    try {\n        // Initialize IndexedDB; fall back to vendor-prefixed versions\n        // if needed.\n        if (!idb) {\n            return false;\n        }\n        // We mimic PouchDB here;\n        //\n        // We test for openDatabase because IE Mobile identifies itself\n        // as Safari. Oh the lulz...\n        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);\n\n        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;\n\n        // Safari <10.1 does not meet our requirements for IDB support (#5572)\n        // since Safari 10.1 shipped with fetch, we can use that to detect it\n        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&\n        // some outdated implementations of IDB that appear on Samsung\n        // and HTC Android devices <4.4 are missing IDBKeyRange\n        typeof IDBKeyRange !== 'undefined';\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction isWebSQLValid() {\n    return typeof openDatabase === 'function';\n}\n\nfunction isLocalStorageValid() {\n    try {\n        return typeof localStorage !== 'undefined' && 'setItem' in localStorage && localStorage.setItem;\n    } catch (e) {\n        return false;\n    }\n}\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\nfunction createBlob(parts, properties) {\n    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n    parts = parts || [];\n    properties = properties || {};\n    try {\n        return new Blob(parts, properties);\n    } catch (e) {\n        if (e.name !== 'TypeError') {\n            throw e;\n        }\n        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n        var builder = new Builder();\n        for (var i = 0; i < parts.length; i += 1) {\n            builder.append(parts[i]);\n        }\n        return builder.getBlob(properties.type);\n    }\n}\n\n// This is CommonJS because lie is an external dependency, so Rollup\n// can just ignore it.\nif (typeof Promise === 'undefined') {\n    // In the \"nopromises\" build this will just throw if you don't have\n    // a global promise object, but it would throw anyway later.\n    _dereq_(3);\n}\nvar Promise$1 = Promise;\n\nfunction executeCallback(promise, callback) {\n    if (callback) {\n        promise.then(function (result) {\n            callback(null, result);\n        }, function (error) {\n            callback(error);\n        });\n    }\n}\n\nfunction executeTwoCallbacks(promise, callback, errorCallback) {\n    if (typeof callback === 'function') {\n        promise.then(callback);\n    }\n\n    if (typeof errorCallback === 'function') {\n        promise[\"catch\"](errorCallback);\n    }\n}\n\n// Some code originally from async_storage.js in\n// [Gaia](https://github.com/mozilla-b2g/gaia).\n\nvar DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\nvar supportsBlobs;\nvar dbContexts;\nvar toString = Object.prototype.toString;\n\n// Transform a binary string to an array buffer, because otherwise\n// weird stuff happens when you try to work with the binary string directly.\n// It is known.\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction _binStringToArrayBuffer(bin) {\n    var length = bin.length;\n    var buf = new ArrayBuffer(length);\n    var arr = new Uint8Array(buf);\n    for (var i = 0; i < length; i++) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return buf;\n}\n\n//\n// Blobs are not supported in all versions of IndexedDB, notably\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n//\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\n// Detecting them is expensive and confusing to users, and Chrome 37-42\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\n//\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\n// Code borrowed from PouchDB. See:\n// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js\n//\nfunction _checkBlobSupportWithoutCaching(idb) {\n    return new Promise$1(function (resolve) {\n        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, 'readwrite');\n        var blob = createBlob(['']);\n        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n        txn.onabort = function (e) {\n            // If the transaction aborts now its due to not being able to\n            // write to the database, likely due to the disk being full\n            e.preventDefault();\n            e.stopPropagation();\n            resolve(false);\n        };\n\n        txn.oncomplete = function () {\n            var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n            var matchedEdge = navigator.userAgent.match(/Edge\\//);\n            // MS Edge pretends to be Chrome 42:\n            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\n        };\n    })[\"catch\"](function () {\n        return false; // error, so assume unsupported\n    });\n}\n\nfunction _checkBlobSupport(idb) {\n    if (typeof supportsBlobs === 'boolean') {\n        return Promise$1.resolve(supportsBlobs);\n    }\n    return _checkBlobSupportWithoutCaching(idb).then(function (value) {\n        supportsBlobs = value;\n        return supportsBlobs;\n    });\n}\n\nfunction _deferReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Create a deferred object representing the current database operation.\n    var deferredOperation = {};\n\n    deferredOperation.promise = new Promise$1(function (resolve) {\n        deferredOperation.resolve = resolve;\n    });\n\n    // Enqueue the deferred operation.\n    dbContext.deferredOperations.push(deferredOperation);\n\n    // Chain its promise to the database readiness.\n    if (!dbContext.dbReady) {\n        dbContext.dbReady = deferredOperation.promise;\n    } else {\n        dbContext.dbReady = dbContext.dbReady.then(function () {\n            return deferredOperation.promise;\n        });\n    }\n}\n\nfunction _advanceReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Resolve its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.resolve();\n    }\n}\n\nfunction _getConnection(dbInfo, upgradeNeeded) {\n    return new Promise$1(function (resolve, reject) {\n\n        if (dbInfo.db) {\n            if (upgradeNeeded) {\n                _deferReadiness(dbInfo);\n                dbInfo.db.close();\n            } else {\n                return resolve(dbInfo.db);\n            }\n        }\n\n        var dbArgs = [dbInfo.name];\n\n        if (upgradeNeeded) {\n            dbArgs.push(dbInfo.version);\n        }\n\n        var openreq = idb.open.apply(idb, dbArgs);\n\n        if (upgradeNeeded) {\n            openreq.onupgradeneeded = function (e) {\n                var db = openreq.result;\n                try {\n                    db.createObjectStore(dbInfo.storeName);\n                    if (e.oldVersion <= 1) {\n                        // Added when support for blob shims was added\n                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n                    }\n                } catch (ex) {\n                    if (ex.name === 'ConstraintError') {\n                        console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\n                    } else {\n                        throw ex;\n                    }\n                }\n            };\n        }\n\n        openreq.onerror = function (e) {\n            e.preventDefault();\n            reject(openreq.error);\n        };\n\n        openreq.onsuccess = function () {\n            resolve(openreq.result);\n            _advanceReadiness(dbInfo);\n        };\n    });\n}\n\nfunction _getOriginalConnection(dbInfo) {\n    return _getConnection(dbInfo, false);\n}\n\nfunction _getUpgradedConnection(dbInfo) {\n    return _getConnection(dbInfo, true);\n}\n\nfunction _isUpgradeNeeded(dbInfo, defaultVersion) {\n    if (!dbInfo.db) {\n        return true;\n    }\n\n    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\n    var isDowngrade = dbInfo.version < dbInfo.db.version;\n    var isUpgrade = dbInfo.version > dbInfo.db.version;\n\n    if (isDowngrade) {\n        // If the version is not the default one\n        // then warn for impossible downgrade.\n        if (dbInfo.version !== defaultVersion) {\n            console.warn('The database \"' + dbInfo.name + '\"' + ' can\\'t be downgraded from version ' + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\n        }\n        // Align the versions to prevent errors.\n        dbInfo.version = dbInfo.db.version;\n    }\n\n    if (isUpgrade || isNewStore) {\n        // If the store is new then increment the version (if needed).\n        // This will trigger an \"upgradeneeded\" event which is required\n        // for creating a store.\n        if (isNewStore) {\n            var incVersion = dbInfo.db.version + 1;\n            if (incVersion > dbInfo.version) {\n                dbInfo.version = incVersion;\n            }\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n// encode a blob for indexeddb engines that don't support blobs\nfunction _encodeBlob(blob) {\n    return new Promise$1(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.onerror = reject;\n        reader.onloadend = function (e) {\n            var base64 = btoa(e.target.result || '');\n            resolve({\n                __local_forage_encoded_blob: true,\n                data: base64,\n                type: blob.type\n            });\n        };\n        reader.readAsBinaryString(blob);\n    });\n}\n\n// decode an encoded blob\nfunction _decodeBlob(encodedBlob) {\n    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\n    return createBlob([arrayBuff], { type: encodedBlob.type });\n}\n\n// is this one of our fancy encoded blobs?\nfunction _isEncodedBlob(value) {\n    return value && value.__local_forage_encoded_blob;\n}\n\n// Specialize the default `ready()` function by making it dependent\n// on the current database operations. Thus, the driver will be actually\n// ready when it's been initialized (default) *and* there are no pending\n// operations on the database (initiated by some other instances).\nfunction _fullyReady(callback) {\n    var self = this;\n\n    var promise = self._initReady().then(function () {\n        var dbContext = dbContexts[self._dbInfo.name];\n\n        if (dbContext && dbContext.dbReady) {\n            return dbContext.dbReady;\n        }\n    });\n\n    executeTwoCallbacks(promise, callback, callback);\n    return promise;\n}\n\n// Open the IndexedDB database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    // Initialize a singleton container for all running localForages.\n    if (!dbContexts) {\n        dbContexts = {};\n    }\n\n    // Get the current context of the database;\n    var dbContext = dbContexts[dbInfo.name];\n\n    // ...or create a new context.\n    if (!dbContext) {\n        dbContext = {\n            // Running localForages sharing a database.\n            forages: [],\n            // Shared database.\n            db: null,\n            // Database readiness (promise).\n            dbReady: null,\n            // Deferred operations on the database.\n            deferredOperations: []\n        };\n        // Register the new context in the global container.\n        dbContexts[dbInfo.name] = dbContext;\n    }\n\n    // Register itself as a running localForage in the current context.\n    dbContext.forages.push(self);\n\n    // Replace the default `ready()` function with the specialized one.\n    if (!self._initReady) {\n        self._initReady = self.ready;\n        self.ready = _fullyReady;\n    }\n\n    // Create an array of initialization states of the related localForages.\n    var initPromises = [];\n\n    function ignoreErrors() {\n        // Don't handle errors here,\n        // just makes sure related localForages aren't pending.\n        return Promise$1.resolve();\n    }\n\n    for (var j = 0; j < dbContext.forages.length; j++) {\n        var forage = dbContext.forages[j];\n        if (forage !== self) {\n            // Don't wait for itself...\n            initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\n        }\n    }\n\n    // Take a snapshot of the related localForages.\n    var forages = dbContext.forages.slice(0);\n\n    // Initialize the connection process only when\n    // all the related localForages aren't pending.\n    return Promise$1.all(initPromises).then(function () {\n        dbInfo.db = dbContext.db;\n        // Get the connection or open a new one without upgrade.\n        return _getOriginalConnection(dbInfo);\n    }).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        dbInfo.db = dbContext.db = db;\n        self._dbInfo = dbInfo;\n        // Share the final connection amongst related localForages.\n        for (var k = 0; k < forages.length; k++) {\n            var forage = forages[k];\n            if (forage !== self) {\n                // Self is already up-to-date.\n                forage._dbInfo.db = dbInfo.db;\n                forage._dbInfo.version = dbInfo.version;\n            }\n        }\n    });\n}\n\nfunction getItem(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n            var req = store.get(key);\n\n            req.onsuccess = function () {\n                var value = req.result;\n                if (value === undefined) {\n                    value = null;\n                }\n                if (_isEncodedBlob(value)) {\n                    value = _decodeBlob(value);\n                }\n                resolve(value);\n            };\n\n            req.onerror = function () {\n                reject(req.error);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items stored in database.\nfunction iterate(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n\n            var req = store.openCursor();\n            var iterationNumber = 1;\n\n            req.onsuccess = function () {\n                var cursor = req.result;\n\n                if (cursor) {\n                    var value = cursor.value;\n                    if (_isEncodedBlob(value)) {\n                        value = _decodeBlob(value);\n                    }\n                    var result = iterator(value, cursor.key, iterationNumber++);\n\n                    if (result !== void 0) {\n                        resolve(result);\n                    } else {\n                        cursor[\"continue\"]();\n                    }\n                } else {\n                    resolve();\n                }\n            };\n\n            req.onerror = function () {\n                reject(req.error);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n\n    return promise;\n}\n\nfunction setItem(key, value, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        var dbInfo;\n        self.ready().then(function () {\n            dbInfo = self._dbInfo;\n            if (toString.call(value) === '[object Blob]') {\n                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n                    if (blobSupport) {\n                        return value;\n                    }\n                    return _encodeBlob(value);\n                });\n            }\n            return value;\n        }).then(function (value) {\n            var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');\n            var store = transaction.objectStore(dbInfo.storeName);\n            var req = store.put(value, key);\n\n            // The reason we don't _save_ null is because IE 10 does\n            // not support saving the `null` type in IndexedDB. How\n            // ironic, given the bug below!\n            // See: https://github.com/mozilla/localForage/issues/161\n            if (value === null) {\n                value = undefined;\n            }\n\n            transaction.oncomplete = function () {\n                // Cast to undefined so the value passed to\n                // callback/promise is the same as what one would get out\n                // of `getItem()` later. This leads to some weirdness\n                // (setItem('foo', undefined) will return `null`), but\n                // it's not my fault localStorage is our baseline and that\n                // it's weird.\n                if (value === undefined) {\n                    value = null;\n                }\n\n                resolve(value);\n            };\n            transaction.onabort = transaction.onerror = function () {\n                var err = req.error ? req.error : req.transaction.error;\n                reject(err);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction removeItem(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');\n            var store = transaction.objectStore(dbInfo.storeName);\n\n            // We use a Grunt task to make this safe for IE and some\n            // versions of Android (including those used by Cordova).\n            // Normally IE won't like `.delete()` and will insist on\n            // using `['delete']()`, but we have a build step that\n            // fixes this for us now.\n            var req = store[\"delete\"](key);\n            transaction.oncomplete = function () {\n                resolve();\n            };\n\n            transaction.onerror = function () {\n                reject(req.error);\n            };\n\n            // The request will be also be aborted if we've exceeded our storage\n            // space.\n            transaction.onabort = function () {\n                var err = req.error ? req.error : req.transaction.error;\n                reject(err);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction clear(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');\n            var store = transaction.objectStore(dbInfo.storeName);\n            var req = store.clear();\n\n            transaction.oncomplete = function () {\n                resolve();\n            };\n\n            transaction.onabort = transaction.onerror = function () {\n                var err = req.error ? req.error : req.transaction.error;\n                reject(err);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction length(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n            var req = store.count();\n\n            req.onsuccess = function () {\n                resolve(req.result);\n            };\n\n            req.onerror = function () {\n                reject(req.error);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction key(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        if (n < 0) {\n            resolve(null);\n\n            return;\n        }\n\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n\n            var advanced = false;\n            var req = store.openCursor();\n            req.onsuccess = function () {\n                var cursor = req.result;\n                if (!cursor) {\n                    // this means there weren't enough keys\n                    resolve(null);\n\n                    return;\n                }\n\n                if (n === 0) {\n                    // We have the first key, return it if that's what they\n                    // wanted.\n                    resolve(cursor.key);\n                } else {\n                    if (!advanced) {\n                        // Otherwise, ask the cursor to skip ahead n\n                        // records.\n                        advanced = true;\n                        cursor.advance(n);\n                    } else {\n                        // When we get here, we've got the nth key.\n                        resolve(cursor.key);\n                    }\n                }\n            };\n\n            req.onerror = function () {\n                reject(req.error);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n\n            var req = store.openCursor();\n            var keys = [];\n\n            req.onsuccess = function () {\n                var cursor = req.result;\n\n                if (!cursor) {\n                    resolve(keys);\n                    return;\n                }\n\n                keys.push(cursor.key);\n                cursor[\"continue\"]();\n            };\n\n            req.onerror = function () {\n                reject(req.error);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar asyncStorage = {\n    _driver: 'asyncStorage',\n    _initStorage: _initStorage,\n    iterate: iterate,\n    getItem: getItem,\n    setItem: setItem,\n    removeItem: removeItem,\n    clear: clear,\n    length: length,\n    key: key,\n    keys: keys\n};\n\n// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n// it to Base64, so this is how we store it to prevent very strange errors with less\n// verbose ways of binary <-> string data storage.\nvar BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nvar BLOB_TYPE_PREFIX = '~~local_forage_type~';\nvar BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n\nvar SERIALIZED_MARKER = '__lfsc__:';\nvar SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\n\n// OMG the serializations!\nvar TYPE_ARRAYBUFFER = 'arbf';\nvar TYPE_BLOB = 'blob';\nvar TYPE_INT8ARRAY = 'si08';\nvar TYPE_UINT8ARRAY = 'ui08';\nvar TYPE_UINT8CLAMPEDARRAY = 'uic8';\nvar TYPE_INT16ARRAY = 'si16';\nvar TYPE_INT32ARRAY = 'si32';\nvar TYPE_UINT16ARRAY = 'ur16';\nvar TYPE_UINT32ARRAY = 'ui32';\nvar TYPE_FLOAT32ARRAY = 'fl32';\nvar TYPE_FLOAT64ARRAY = 'fl64';\nvar TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\n\nvar toString$1 = Object.prototype.toString;\n\nfunction stringToBuffer(serializedString) {\n    // Fill the string into a ArrayBuffer.\n    var bufferLength = serializedString.length * 0.75;\n    var len = serializedString.length;\n    var i;\n    var p = 0;\n    var encoded1, encoded2, encoded3, encoded4;\n\n    if (serializedString[serializedString.length - 1] === '=') {\n        bufferLength--;\n        if (serializedString[serializedString.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    var buffer = new ArrayBuffer(bufferLength);\n    var bytes = new Uint8Array(buffer);\n\n    for (i = 0; i < len; i += 4) {\n        encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\n        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\n        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\n\n        /*jslint bitwise: true */\n        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n    return buffer;\n}\n\n// Converts a buffer to a string to store, serialized, in the backend\n// storage library.\nfunction bufferToString(buffer) {\n    // base64-arraybuffer\n    var bytes = new Uint8Array(buffer);\n    var base64String = '';\n    var i;\n\n    for (i = 0; i < bytes.length; i += 3) {\n        /*jslint bitwise: true */\n        base64String += BASE_CHARS[bytes[i] >> 2];\n        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n        base64String += BASE_CHARS[bytes[i + 2] & 63];\n    }\n\n    if (bytes.length % 3 === 2) {\n        base64String = base64String.substring(0, base64String.length - 1) + '=';\n    } else if (bytes.length % 3 === 1) {\n        base64String = base64String.substring(0, base64String.length - 2) + '==';\n    }\n\n    return base64String;\n}\n\n// Serialize a value, afterwards executing a callback (which usually\n// instructs the `setItem()` callback/promise to be executed). This is how\n// we store binary data with localStorage.\nfunction serialize(value, callback) {\n    var valueType = '';\n    if (value) {\n        valueType = toString$1.call(value);\n    }\n\n    // Cannot use `value instanceof ArrayBuffer` or such here, as these\n    // checks fail when running the tests using casper.js...\n    //\n    // TODO: See why those tests fail and use a better solution.\n    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\n        // Convert binary arrays to a string and prefix the string with\n        // a special marker.\n        var buffer;\n        var marker = SERIALIZED_MARKER;\n\n        if (value instanceof ArrayBuffer) {\n            buffer = value;\n            marker += TYPE_ARRAYBUFFER;\n        } else {\n            buffer = value.buffer;\n\n            if (valueType === '[object Int8Array]') {\n                marker += TYPE_INT8ARRAY;\n            } else if (valueType === '[object Uint8Array]') {\n                marker += TYPE_UINT8ARRAY;\n            } else if (valueType === '[object Uint8ClampedArray]') {\n                marker += TYPE_UINT8CLAMPEDARRAY;\n            } else if (valueType === '[object Int16Array]') {\n                marker += TYPE_INT16ARRAY;\n            } else if (valueType === '[object Uint16Array]') {\n                marker += TYPE_UINT16ARRAY;\n            } else if (valueType === '[object Int32Array]') {\n                marker += TYPE_INT32ARRAY;\n            } else if (valueType === '[object Uint32Array]') {\n                marker += TYPE_UINT32ARRAY;\n            } else if (valueType === '[object Float32Array]') {\n                marker += TYPE_FLOAT32ARRAY;\n            } else if (valueType === '[object Float64Array]') {\n                marker += TYPE_FLOAT64ARRAY;\n            } else {\n                callback(new Error('Failed to get type for BinaryArray'));\n            }\n        }\n\n        callback(marker + bufferToString(buffer));\n    } else if (valueType === '[object Blob]') {\n        // Conver the blob to a binaryArray and then to a string.\n        var fileReader = new FileReader();\n\n        fileReader.onload = function () {\n            // Backwards-compatible prefix for the blob type.\n            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\n\n            callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n        };\n\n        fileReader.readAsArrayBuffer(value);\n    } else {\n        try {\n            callback(JSON.stringify(value));\n        } catch (e) {\n            console.error(\"Couldn't convert value into a JSON string: \", value);\n\n            callback(null, e);\n        }\n    }\n}\n\n// Deserialize data we've inserted into a value column/field. We place\n// special markers into our strings to mark them as encoded; this isn't\n// as nice as a meta field, but it's the only sane thing we can do whilst\n// keeping localStorage support intact.\n//\n// Oftentimes this will just deserialize JSON content, but if we have a\n// special marker (SERIALIZED_MARKER, defined above), we will extract\n// some kind of arraybuffer/binary data/typed array out of the string.\nfunction deserialize(value) {\n    // If we haven't marked this string as being specially serialized (i.e.\n    // something other than serialized JSON), we can just return it and be\n    // done with it.\n    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n        return JSON.parse(value);\n    }\n\n    // The following code deals with deserializing some kind of Blob or\n    // TypedArray. First we separate out the type of data we're dealing\n    // with from the data itself.\n    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n\n    var blobType;\n    // Backwards-compatible blob type serialization strategy.\n    // DBs created with older versions of localForage will simply not have the blob type.\n    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n        blobType = matcher[1];\n        serializedString = serializedString.substring(matcher[0].length);\n    }\n    var buffer = stringToBuffer(serializedString);\n\n    // Return the right type based on the code/type set during\n    // serialization.\n    switch (type) {\n        case TYPE_ARRAYBUFFER:\n            return buffer;\n        case TYPE_BLOB:\n            return createBlob([buffer], { type: blobType });\n        case TYPE_INT8ARRAY:\n            return new Int8Array(buffer);\n        case TYPE_UINT8ARRAY:\n            return new Uint8Array(buffer);\n        case TYPE_UINT8CLAMPEDARRAY:\n            return new Uint8ClampedArray(buffer);\n        case TYPE_INT16ARRAY:\n            return new Int16Array(buffer);\n        case TYPE_UINT16ARRAY:\n            return new Uint16Array(buffer);\n        case TYPE_INT32ARRAY:\n            return new Int32Array(buffer);\n        case TYPE_UINT32ARRAY:\n            return new Uint32Array(buffer);\n        case TYPE_FLOAT32ARRAY:\n            return new Float32Array(buffer);\n        case TYPE_FLOAT64ARRAY:\n            return new Float64Array(buffer);\n        default:\n            throw new Error('Unkown type: ' + type);\n    }\n}\n\nvar localforageSerializer = {\n    serialize: serialize,\n    deserialize: deserialize,\n    stringToBuffer: stringToBuffer,\n    bufferToString: bufferToString\n};\n\n/*\n * Includes code from:\n *\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n// Open the WebSQL database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage$1(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n        }\n    }\n\n    var dbInfoPromise = new Promise$1(function (resolve, reject) {\n        // Open the database; the openDatabase API will automatically\n        // create it for us if it doesn't exist.\n        try {\n            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n        } catch (e) {\n            return reject(e);\n        }\n\n        // Create our key/value table if it doesn't exist.\n        dbInfo.db.transaction(function (t) {\n            t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' (id INTEGER PRIMARY KEY, key unique, value)', [], function () {\n                self._dbInfo = dbInfo;\n                resolve();\n            }, function (t, error) {\n                reject(error);\n            });\n        });\n    });\n\n    dbInfo.serializer = localforageSerializer;\n    return dbInfoPromise;\n}\n\nfunction getItem$1(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).value : null;\n\n                    // Check to see if this is serialized content we need to\n                    // unpack.\n                    if (result) {\n                        result = dbInfo.serializer.deserialize(result);\n                    }\n\n                    resolve(result);\n                }, function (t, error) {\n\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction iterate$1(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var rows = results.rows;\n                    var length = rows.length;\n\n                    for (var i = 0; i < length; i++) {\n                        var item = rows.item(i);\n                        var result = item.value;\n\n                        // Check to see if this is serialized content\n                        // we need to unpack.\n                        if (result) {\n                            result = dbInfo.serializer.deserialize(result);\n                        }\n\n                        result = iterator(result, item.key, i + 1);\n\n                        // void(0) prevents problems with redefinition\n                        // of `undefined`.\n                        if (result !== void 0) {\n                            resolve(result);\n                            return;\n                        }\n                    }\n\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction _setItem(key, value, callback, retriesLeft) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            // The localStorage API doesn't return undefined values in an\n            // \"expected\" way, so undefined is always cast to null in all\n            // drivers. See: https://github.com/mozilla/localForage/pull/42\n            if (value === undefined) {\n                value = null;\n            }\n\n            // Save the original value to pass to the callback.\n            var originalValue = value;\n\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    dbInfo.db.transaction(function (t) {\n                        t.executeSql('INSERT OR REPLACE INTO ' + dbInfo.storeName + ' (key, value) VALUES (?, ?)', [key, value], function () {\n                            resolve(originalValue);\n                        }, function (t, error) {\n                            reject(error);\n                        });\n                    }, function (sqlError) {\n                        // The transaction failed; check\n                        // to see if it's a quota error.\n                        if (sqlError.code === sqlError.QUOTA_ERR) {\n                            // We reject the callback outright for now, but\n                            // it's worth trying to re-run the transaction.\n                            // Even if the user accepts the prompt to use\n                            // more storage on Safari, this error will\n                            // be called.\n                            //\n                            // Try to re-run the transaction.\n                            if (retriesLeft > 0) {\n                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));\n                                return;\n                            }\n                            reject(sqlError);\n                        }\n                    });\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction setItem$1(key, value, callback) {\n    return _setItem.apply(this, [key, value, callback, 1]);\n}\n\nfunction removeItem$1(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\n                    resolve();\n                }, function (t, error) {\n\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Deletes every item in the table.\n// TODO: Find out if this resets the AUTO_INCREMENT number.\nfunction clear$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('DELETE FROM ' + dbInfo.storeName, [], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Does a simple `COUNT(key)` to get the number of items stored in\n// localForage.\nfunction length$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                // Ahhh, SQL makes this one soooooo easy.\n                t.executeSql('SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var result = results.rows.item(0).c;\n\n                    resolve(result);\n                }, function (t, error) {\n\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Return the key located at key index X; essentially gets the key from a\n// `WHERE id = ?`. This is the most efficient way I can think to implement\n// this rarely-used (in my experience) part of the API, but it can seem\n// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n// the ID of each key will change every time it's updated. Perhaps a stored\n// procedure for the `setItem()` SQL would solve this problem?\n// TODO: Don't change ID on `setItem()`.\nfunction key$1(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).key : null;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var keys = [];\n\n                    for (var i = 0; i < results.rows.length; i++) {\n                        keys.push(results.rows.item(i).key);\n                    }\n\n                    resolve(keys);\n                }, function (t, error) {\n\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar webSQLStorage = {\n    _driver: 'webSQLStorage',\n    _initStorage: _initStorage$1,\n    iterate: iterate$1,\n    getItem: getItem$1,\n    setItem: setItem$1,\n    removeItem: removeItem$1,\n    clear: clear$1,\n    length: length$1,\n    key: key$1,\n    keys: keys$1\n};\n\n// Config the localStorage backend, using options set in the config.\nfunction _initStorage$2(options) {\n    var self = this;\n    var dbInfo = {};\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    dbInfo.keyPrefix = dbInfo.name + '/';\n\n    if (dbInfo.storeName !== self._defaultConfig.storeName) {\n        dbInfo.keyPrefix += dbInfo.storeName + '/';\n    }\n\n    self._dbInfo = dbInfo;\n    dbInfo.serializer = localforageSerializer;\n\n    return Promise$1.resolve();\n}\n\n// Remove all keys from the datastore, effectively destroying all data in\n// the app's key/value store!\nfunction clear$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var keyPrefix = self._dbInfo.keyPrefix;\n\n        for (var i = localStorage.length - 1; i >= 0; i--) {\n            var key = localStorage.key(i);\n\n            if (key.indexOf(keyPrefix) === 0) {\n                localStorage.removeItem(key);\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Retrieve an item from the store. Unlike the original async_storage\n// library in Gaia, we don't modify return values at all. If a key's value\n// is `undefined`, we pass that value to the callback function.\nfunction getItem$2(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result = localStorage.getItem(dbInfo.keyPrefix + key);\n\n        // If a result was found, parse it from the serialized\n        // string into a JS object. If result isn't truthy, the key\n        // is likely undefined and we'll pass it straight to the\n        // callback.\n        if (result) {\n            result = dbInfo.serializer.deserialize(result);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items in the store.\nfunction iterate$2(iterator, callback) {\n    var self = this;\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var keyPrefix = dbInfo.keyPrefix;\n        var keyPrefixLength = keyPrefix.length;\n        var length = localStorage.length;\n\n        // We use a dedicated iterator instead of the `i` variable below\n        // so other keys we fetch in localStorage aren't counted in\n        // the `iterationNumber` argument passed to the `iterate()`\n        // callback.\n        //\n        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n        var iterationNumber = 1;\n\n        for (var i = 0; i < length; i++) {\n            var key = localStorage.key(i);\n            if (key.indexOf(keyPrefix) !== 0) {\n                continue;\n            }\n            var value = localStorage.getItem(key);\n\n            // If a result was found, parse it from the serialized\n            // string into a JS object. If result isn't truthy, the\n            // key is likely undefined and we'll pass it straight\n            // to the iterator.\n            if (value) {\n                value = dbInfo.serializer.deserialize(value);\n            }\n\n            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\n\n            if (value !== void 0) {\n                return value;\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Same as localStorage's key() method, except takes a callback.\nfunction key$2(n, callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result;\n        try {\n            result = localStorage.key(n);\n        } catch (error) {\n            result = null;\n        }\n\n        // Remove the prefix from the key, if a key is found.\n        if (result) {\n            result = result.substring(dbInfo.keyPrefix.length);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var length = localStorage.length;\n        var keys = [];\n\n        for (var i = 0; i < length; i++) {\n            if (localStorage.key(i).indexOf(dbInfo.keyPrefix) === 0) {\n                keys.push(localStorage.key(i).substring(dbInfo.keyPrefix.length));\n            }\n        }\n\n        return keys;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Supply the number of keys in the datastore to the callback function.\nfunction length$2(callback) {\n    var self = this;\n    var promise = self.keys().then(function (keys) {\n        return keys.length;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Remove an item from the store, nice and simple.\nfunction removeItem$2(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        localStorage.removeItem(dbInfo.keyPrefix + key);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Set a key's value and run an optional callback once the value is set.\n// Unlike Gaia's implementation, the callback function is passed the value,\n// in case you want to operate on that value only after you're sure it\n// saved, or something like that.\nfunction setItem$2(key, value, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = self.ready().then(function () {\n        // Convert undefined values to null.\n        // https://github.com/mozilla/localForage/pull/42\n        if (value === undefined) {\n            value = null;\n        }\n\n        // Save the original value to pass to the callback.\n        var originalValue = value;\n\n        return new Promise$1(function (resolve, reject) {\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    try {\n                        localStorage.setItem(dbInfo.keyPrefix + key, value);\n                        resolve(originalValue);\n                    } catch (e) {\n                        // localStorage capacity exceeded.\n                        // TODO: Make this a specific error/event.\n                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                            reject(e);\n                        }\n                        reject(e);\n                    }\n                }\n            });\n        });\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar localStorageWrapper = {\n    _driver: 'localStorageWrapper',\n    _initStorage: _initStorage$2,\n    // Default API, from Gaia/localStorage.\n    iterate: iterate$2,\n    getItem: getItem$2,\n    setItem: setItem$2,\n    removeItem: removeItem$2,\n    clear: clear$2,\n    length: length$2,\n    key: key$2,\n    keys: keys$2\n};\n\n// Custom drivers are stored here when `defineDriver()` is called.\n// They are shared across all instances of localForage.\nvar CustomDrivers = {};\n\nvar DriverType = {\n    INDEXEDDB: 'asyncStorage',\n    LOCALSTORAGE: 'localStorageWrapper',\n    WEBSQL: 'webSQLStorage'\n};\n\nvar DefaultDriverOrder = [DriverType.INDEXEDDB, DriverType.WEBSQL, DriverType.LOCALSTORAGE];\n\nvar LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'];\n\nvar DefaultConfig = {\n    description: '',\n    driver: DefaultDriverOrder.slice(),\n    name: 'localforage',\n    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n    // we can use without a prompt.\n    size: 4980736,\n    storeName: 'keyvaluepairs',\n    version: 1.0\n};\n\nvar driverSupport = {};\n// Check to see if IndexedDB is available and if it is the latest\n// implementation; it's our preferred backend library. We use \"_spec_test\"\n// as the name of the database because it's not the one we'll operate on,\n// but it's useful to make sure its using the right spec.\n// See: https://github.com/mozilla/localForage/issues/128\ndriverSupport[DriverType.INDEXEDDB] = isIndexedDBValid();\n\ndriverSupport[DriverType.WEBSQL] = isWebSQLValid();\n\ndriverSupport[DriverType.LOCALSTORAGE] = isLocalStorageValid();\n\nvar isArray = Array.isArray || function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n};\n\nfunction callWhenReady(localForageInstance, libraryMethod) {\n    localForageInstance[libraryMethod] = function () {\n        var _args = arguments;\n        return localForageInstance.ready().then(function () {\n            return localForageInstance[libraryMethod].apply(localForageInstance, _args);\n        });\n    };\n}\n\nfunction extend() {\n    for (var i = 1; i < arguments.length; i++) {\n        var arg = arguments[i];\n\n        if (arg) {\n            for (var key in arg) {\n                if (arg.hasOwnProperty(key)) {\n                    if (isArray(arg[key])) {\n                        arguments[0][key] = arg[key].slice();\n                    } else {\n                        arguments[0][key] = arg[key];\n                    }\n                }\n            }\n        }\n    }\n\n    return arguments[0];\n}\n\nfunction isLibraryDriver(driverName) {\n    for (var driver in DriverType) {\n        if (DriverType.hasOwnProperty(driver) && DriverType[driver] === driverName) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nvar LocalForage = function () {\n    function LocalForage(options) {\n        _classCallCheck(this, LocalForage);\n\n        this.INDEXEDDB = DriverType.INDEXEDDB;\n        this.LOCALSTORAGE = DriverType.LOCALSTORAGE;\n        this.WEBSQL = DriverType.WEBSQL;\n\n        this._defaultConfig = extend({}, DefaultConfig);\n        this._config = extend({}, this._defaultConfig, options);\n        this._driverSet = null;\n        this._initDriver = null;\n        this._ready = false;\n        this._dbInfo = null;\n\n        this._wrapLibraryMethodsWithReady();\n        this.setDriver(this._config.driver)[\"catch\"](function () {});\n    }\n\n    // Set any config values for localForage; can be called anytime before\n    // the first API call (e.g. `getItem`, `setItem`).\n    // We loop through options so we don't overwrite existing config\n    // values.\n\n\n    LocalForage.prototype.config = function config(options) {\n        // If the options argument is an object, we use it to set values.\n        // Otherwise, we return either a specified config value or all\n        // config values.\n        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n            // If localforage is ready and fully initialized, we can't set\n            // any new configuration values. Instead, we return an error.\n            if (this._ready) {\n                return new Error(\"Can't call config() after localforage \" + 'has been used.');\n            }\n\n            for (var i in options) {\n                if (i === 'storeName') {\n                    options[i] = options[i].replace(/\\W/g, '_');\n                }\n\n                if (i === 'version' && typeof options[i] !== 'number') {\n                    return new Error('Database version must be a number.');\n                }\n\n                this._config[i] = options[i];\n            }\n\n            // after all config options are set and\n            // the driver option is used, try setting it\n            if ('driver' in options && options.driver) {\n                return this.setDriver(this._config.driver);\n            }\n\n            return true;\n        } else if (typeof options === 'string') {\n            return this._config[options];\n        } else {\n            return this._config;\n        }\n    };\n\n    // Used to define a custom driver, shared across all instances of\n    // localForage.\n\n\n    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\n        var promise = new Promise$1(function (resolve, reject) {\n            try {\n                var driverName = driverObject._driver;\n                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\n                var namingError = new Error('Custom driver name already in use: ' + driverObject._driver);\n\n                // A driver name should be defined and not overlap with the\n                // library-defined, default drivers.\n                if (!driverObject._driver) {\n                    reject(complianceError);\n                    return;\n                }\n                if (isLibraryDriver(driverObject._driver)) {\n                    reject(namingError);\n                    return;\n                }\n\n                var customDriverMethods = LibraryMethods.concat('_initStorage');\n                for (var i = 0; i < customDriverMethods.length; i++) {\n                    var customDriverMethod = customDriverMethods[i];\n                    if (!customDriverMethod || !driverObject[customDriverMethod] || typeof driverObject[customDriverMethod] !== 'function') {\n                        reject(complianceError);\n                        return;\n                    }\n                }\n\n                var supportPromise = Promise$1.resolve(true);\n                if ('_support' in driverObject) {\n                    if (driverObject._support && typeof driverObject._support === 'function') {\n                        supportPromise = driverObject._support();\n                    } else {\n                        supportPromise = Promise$1.resolve(!!driverObject._support);\n                    }\n                }\n\n                supportPromise.then(function (supportResult) {\n                    driverSupport[driverName] = supportResult;\n                    CustomDrivers[driverName] = driverObject;\n                    resolve();\n                }, reject);\n            } catch (e) {\n                reject(e);\n            }\n        });\n\n        executeTwoCallbacks(promise, callback, errorCallback);\n        return promise;\n    };\n\n    LocalForage.prototype.driver = function driver() {\n        return this._driver || null;\n    };\n\n    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\n        var self = this;\n        var getDriverPromise = Promise$1.resolve().then(function () {\n            if (isLibraryDriver(driverName)) {\n                switch (driverName) {\n                    case self.INDEXEDDB:\n                        return asyncStorage;\n                    case self.LOCALSTORAGE:\n                        return localStorageWrapper;\n                    case self.WEBSQL:\n                        return webSQLStorage;\n                }\n            } else if (CustomDrivers[driverName]) {\n                return CustomDrivers[driverName];\n            } else {\n                throw new Error('Driver not found.');\n            }\n        });\n        executeTwoCallbacks(getDriverPromise, callback, errorCallback);\n        return getDriverPromise;\n    };\n\n    LocalForage.prototype.getSerializer = function getSerializer(callback) {\n        var serializerPromise = Promise$1.resolve(localforageSerializer);\n        executeTwoCallbacks(serializerPromise, callback);\n        return serializerPromise;\n    };\n\n    LocalForage.prototype.ready = function ready(callback) {\n        var self = this;\n\n        var promise = self._driverSet.then(function () {\n            if (self._ready === null) {\n                self._ready = self._initDriver();\n            }\n\n            return self._ready;\n        });\n\n        executeTwoCallbacks(promise, callback, callback);\n        return promise;\n    };\n\n    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\n        var self = this;\n\n        if (!isArray(drivers)) {\n            drivers = [drivers];\n        }\n\n        var supportedDrivers = this._getSupportedDrivers(drivers);\n\n        function setDriverToConfig() {\n            self._config.driver = self.driver();\n        }\n\n        function extendSelfWithDriver(driver) {\n            self._extend(driver);\n            setDriverToConfig();\n\n            self._ready = self._initStorage(self._config);\n            return self._ready;\n        }\n\n        function initDriver(supportedDrivers) {\n            return function () {\n                var currentDriverIndex = 0;\n\n                function driverPromiseLoop() {\n                    while (currentDriverIndex < supportedDrivers.length) {\n                        var driverName = supportedDrivers[currentDriverIndex];\n                        currentDriverIndex++;\n\n                        self._dbInfo = null;\n                        self._ready = null;\n\n                        return self.getDriver(driverName).then(extendSelfWithDriver)[\"catch\"](driverPromiseLoop);\n                    }\n\n                    setDriverToConfig();\n                    var error = new Error('No available storage method found.');\n                    self._driverSet = Promise$1.reject(error);\n                    return self._driverSet;\n                }\n\n                return driverPromiseLoop();\n            };\n        }\n\n        // There might be a driver initialization in progress\n        // so wait for it to finish in order to avoid a possible\n        // race condition to set _dbInfo\n        var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\n            return Promise$1.resolve();\n        }) : Promise$1.resolve();\n\n        this._driverSet = oldDriverSetDone.then(function () {\n            var driverName = supportedDrivers[0];\n            self._dbInfo = null;\n            self._ready = null;\n\n            return self.getDriver(driverName).then(function (driver) {\n                self._driver = driver._driver;\n                setDriverToConfig();\n                self._wrapLibraryMethodsWithReady();\n                self._initDriver = initDriver(supportedDrivers);\n            });\n        })[\"catch\"](function () {\n            setDriverToConfig();\n            var error = new Error('No available storage method found.');\n            self._driverSet = Promise$1.reject(error);\n            return self._driverSet;\n        });\n\n        executeTwoCallbacks(this._driverSet, callback, errorCallback);\n        return this._driverSet;\n    };\n\n    LocalForage.prototype.supports = function supports(driverName) {\n        return !!driverSupport[driverName];\n    };\n\n    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\n        extend(this, libraryMethodsAndProperties);\n    };\n\n    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\n        var supportedDrivers = [];\n        for (var i = 0, len = drivers.length; i < len; i++) {\n            var driverName = drivers[i];\n            if (this.supports(driverName)) {\n                supportedDrivers.push(driverName);\n            }\n        }\n        return supportedDrivers;\n    };\n\n    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\n        // Add a stub for each driver API method that delays the call to the\n        // corresponding driver method until localForage is ready. These stubs\n        // will be replaced by the driver methods as soon as the driver is\n        // loaded, so there is no performance impact.\n        for (var i = 0; i < LibraryMethods.length; i++) {\n            callWhenReady(this, LibraryMethods[i]);\n        }\n    };\n\n    LocalForage.prototype.createInstance = function createInstance(options) {\n        return new LocalForage(options);\n    };\n\n    return LocalForage;\n}();\n\n// The actual localForage object that we expose as a module or via a\n// global. It's extended by pulling in one of our other libraries.\n\n\nvar localforage_js = new LocalForage();\n\nmodule.exports = localforage_js;\n\n},{\"3\":3}]},{},[4])(4)\n});","module.exports = require('./lib/type');\n","/*!\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Primary Exports\n */\n\nvar exports = module.exports = getType;\n\n/*!\n * Detectable javascript natives\n */\n\nvar natives = {\n    '[object Array]': 'array'\n  , '[object RegExp]': 'regexp'\n  , '[object Function]': 'function'\n  , '[object Arguments]': 'arguments'\n  , '[object Date]': 'date'\n};\n\n/**\n * ### typeOf (obj)\n *\n * Use several different techniques to determine\n * the type of object being tested.\n *\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\n\nfunction getType (obj) {\n  var str = Object.prototype.toString.call(obj);\n  if (natives[str]) return natives[str];\n  if (obj === null) return 'null';\n  if (obj === undefined) return 'undefined';\n  if (obj === Object(obj)) return 'object';\n  return typeof obj;\n}\n\nexports.Library = Library;\n\n/**\n * ### Library\n *\n * Create a repository for custom type detection.\n *\n * ```js\n * var lib = new type.Library;\n * ```\n *\n */\n\nfunction Library () {\n  this.tests = {};\n}\n\n/**\n * #### .of (obj)\n *\n * Expose replacement `typeof` detection to the library.\n *\n * ```js\n * if ('string' === lib.of('hello world')) {\n *   // ...\n * }\n * ```\n *\n * @param {Mixed} object to test\n * @return {String} type\n */\n\nLibrary.prototype.of = getType;\n\n/**\n * #### .define (type, test)\n *\n * Add a test to for the `.test()` assertion.\n *\n * Can be defined as a regular expression:\n *\n * ```js\n * lib.define('int', /^[0-9]+$/);\n * ```\n *\n * ... or as a function:\n *\n * ```js\n * lib.define('bln', function (obj) {\n *   if ('boolean' === lib.of(obj)) return true;\n *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n *   return !! ~blns.indexOf(obj);\n * });\n * ```\n *\n * @param {String} type\n * @param {RegExp|Function} test\n * @api public\n */\n\nLibrary.prototype.define = function (type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};\n\n/**\n * #### .test (obj, test)\n *\n * Assert that an object is of type. Will first\n * check natives, and if that does not pass it will\n * use the user defined custom tests.\n *\n * ```js\n * assert(lib.test('1', 'int'));\n * assert(lib.test('yes', 'bln'));\n * ```\n *\n * @param {Mixed} object\n * @param {String} type\n * @return {Boolean} result\n * @api public\n */\n\nLibrary.prototype.test = function (obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n","/*!\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Primary Exports\n */\n\nvar exports = module.exports = getType;\n\n/**\n * ### typeOf (obj)\n *\n * Use several different techniques to determine\n * the type of object being tested.\n *\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nvar objectTypeRegexp = /^\\[object (.*)\\]$/;\n\nfunction getType(obj) {\n  var type = Object.prototype.toString.call(obj).match(objectTypeRegexp)[1].toLowerCase();\n  // Let \"new String('')\" return 'object'\n  if (typeof Promise === 'function' && obj instanceof Promise) return 'promise';\n  // PhantomJS has type \"DOMWindow\" for null\n  if (obj === null) return 'null';\n  // PhantomJS has type \"DOMWindow\" for undefined\n  if (obj === undefined) return 'undefined';\n  return type;\n}\n\nexports.Library = Library;\n\n/**\n * ### Library\n *\n * Create a repository for custom type detection.\n *\n * ```js\n * var lib = new type.Library;\n * ```\n *\n */\n\nfunction Library() {\n  if (!(this instanceof Library)) return new Library();\n  this.tests = {};\n}\n\n/**\n * #### .of (obj)\n *\n * Expose replacement `typeof` detection to the library.\n *\n * ```js\n * if ('string' === lib.of('hello world')) {\n *   // ...\n * }\n * ```\n *\n * @param {Mixed} object to test\n * @return {String} type\n */\n\nLibrary.prototype.of = getType;\n\n/**\n * #### .define (type, test)\n *\n * Add a test to for the `.test()` assertion.\n *\n * Can be defined as a regular expression:\n *\n * ```js\n * lib.define('int', /^[0-9]+$/);\n * ```\n *\n * ... or as a function:\n *\n * ```js\n * lib.define('bln', function (obj) {\n *   if ('boolean' === lib.of(obj)) return true;\n *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n *   return !! ~blns.indexOf(obj);\n * });\n * ```\n *\n * @param {String} type\n * @param {RegExp|Function} test\n * @api public\n */\n\nLibrary.prototype.define = function(type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};\n\n/**\n * #### .test (obj, test)\n *\n * Assert that an object is of type. Will first\n * check natives, and if that does not pass it will\n * use the user defined custom tests.\n *\n * ```js\n * assert(lib.test('1', 'int'));\n * assert(lib.test('yes', 'bln'));\n * ```\n *\n * @param {Mixed} object\n * @param {String} type\n * @return {Boolean} result\n * @api public\n */\n\nLibrary.prototype.test = function(obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n","(function (document, window) {\n  // DEPENDENCIES\n  // ============================================================\n  const localforage = require('localforage');\n  const probs = require('pjs-problems');\n  const dedent = require('dedent');\n  const assert = require('chai').assert;\n\n  // PROBLEM TEMPLATE NICE-IFICATION\n  // ============================================================\n\n  function dedentStrings(problems) {\n    return problems.map(prob => {\n      prob.given = dedent(prob.given)\n      prob.answer = dedent(prob.answer)\n      return prob\n    });\n  }\n\n\n  // PROBLEMS\n  // ============================================================\n\n  let problems = [];\n  Object.keys(probs).forEach(subject => {\n    problems.push(...probs[subject]);\n  });\n  problems = dedentStrings(problems);\n\n\n  // CONFIG\n  // ============================================================\n\n  // Hoist current problem\n  let currentProblem;\n\n  // Keys to ignore while user is navigating around the textarea but not changing any code\n  const ignoreKeyCodes = [\n    9, // Tab\n    37, // Left arrow\n    39, // Right arrow\n    38, // Up arrow\n    40 // Down arrow\n  ];\n\n  let config = {\n    shuffle: true,\n    timer: false,\n    currentIndex: 0\n  };\n\n  // Pull config from localforage\n  localforage\n    .getItem('js_practice_config')\n    .then(val => {\n      if (val) {\n        config = val;\n      }\n      loadApp(config);\n    })\n    .catch(err => {\n      console.log('localforage err:', err);\n      loadApp(config);\n    });\n\n  function updateLocalstore(config) {\n    return localforage\n      .setItem('js_practice_config', config)\n      .then(val => val)\n      .catch(err => {\n        console.log('Settings update error:', err);\n      });\n  }\n\n  // HELPERS\n  // ============================================================\n\n  function debounce(func, wait, immediate) {\n    let timeout;\n    return function () {\n      const context = this;\n      const args = arguments;\n      const later = function () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      };\n      const callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n      if (callNow) {\n        func.apply(context, args);\n      }\n    };\n  }\n\n  // UI\n  // ============================================================\n\n  // elements\n  const problemEl = document.getElementById('problem');\n  const codeEl = document.getElementById('code');\n  const testSuiteEl = document.getElementById('test-suite');\n  const testTotalEl = document.getElementById('test-total');\n  const evalConsoleEl = document.getElementById('eval-output');\n  const assertConsoleEl = document.getElementById('assert-output');\n  const shuffleProblemsButtonEl = document.getElementById('shuffle-problems');\n  const previousProblemButtonEl = document.getElementById('prev-problem');\n  const nextProblemButtonEl = document.getElementById('next-problem');\n\n  // Get indexes\n  function getRandomIndex(problemsArr) {\n    const ind = Math.floor(Math.random() * problemsArr.length);\n    config.currentIndex = ind;\n    updateLocalstore(config);\n    return ind;\n  }\n\n  function getPreviousIndex(problemsArr) {\n    let probInd;\n    const currentIndex = config.currentIndex;\n    // If at beginning, go to end\n    if (currentIndex === 0) {\n      probInd = problemsArr.length - 1;\n    } else {\n      probInd = currentIndex - 1;\n    }\n    return probInd;\n  }\n\n  function getNextIndex(problemsArr) {\n    let probInd;\n    const currentIndex = config.currentIndex;\n    // If at end or invalid, restart series\n    if (currentIndex >= problemsArr.length - 1 || currentIndex < 0) {\n      probInd = 0;\n    } else {\n      probInd = currentIndex + 1;\n    }\n    return probInd;\n  }\n\n  // Get problems\n  function getCurrentProblem(problemsArr) {\n    return problemsArr[config.currentIndex];\n  }\n\n  function previousProblem() {\n    console.log('previousProblem!');\n    // Activate back button, for visual queue of nav feedback\n    previousProblemButtonEl.classList.add('active');\n    config.currentIndex = config.shuffle\n      ? getRandomIndex(problems)\n      : getPreviousIndex(problems);\n    updateLocalstore(config).then(() => {\n      window.location.reload();\n    });\n  }\n\n  function nextProblem() {\n    console.log('nextProblem!');\n    // Activate next button, for visual queue of nav feedback\n    nextProblemButtonEl.classList.add('active');\n    config.currentIndex = config.shuffle\n      ? getRandomIndex(problems)\n      : getNextIndex(problems);\n    updateLocalstore(config).then(() => {\n      window.location.reload();\n    });\n  }\n\n  function toggleShuffle() {\n    console.log('toggle shuffle!');\n    config.shuffle = !config.shuffle; // Flip it\n    shuffleProblemsButtonEl.classList.toggle('active');\n    previousProblemButtonEl.parentNode.classList.toggle('hidden');\n    updateLocalstore(config);\n  }\n\n  function loadProblem(problemObj) {\n    currentProblem = problemObj;\n    // Prob question\n    problemEl.innerText = problemObj.prompt;\n    // Prob given code\n    if (problemObj.given) {\n      codeEl.value = problemObj.given;\n    }\n    // Seed the tests, pass (init = true) as second param\n    testSuite(null, true);\n  }\n\n  // TODO: Build the assert errors into the test dom on each update.\n  function updateTests(testStatus, init) {\n    if (init === true) {\n      buildTests(currentProblem.tests);\n    }\n    updateTestStatus(testStatus);\n  }\n\n  function buildTests(tests) {\n    if (tests) {\n      const testsDom = tests\n        .map(test => {\n          return `<div class=\"test monospace\">\n                  <div class=\"test-state\">[&#x2718;]</div>\n                  <div class=\"test-name\">${test.name}</div>\n                </div>`;\n        })\n        .join('');\n      testSuiteEl.innerHTML = testsDom;\n    }\n  }\n\n  function updateTestStatus(testStatuses) {\n    if (!testStatuses) {\n      throw new Error('No testStatuses provided.');\n    }\n    // Find out if all tests have passed or not\n    let allPassed = true;\n    testStatuses.forEach(testPassed => {\n      if (testPassed !== true) {\n        allPassed = false;\n      }\n    });\n    const testEls = [].slice.call(testSuiteEl.querySelectorAll('.test-state'));\n    testEls.forEach((testStatusEl, iter) => {\n      if (testStatuses[iter] === true) {\n        testStatusEl.innerHTML = '[&#x2713;]';\n        testStatusEl.classList.remove('fail');\n        testStatusEl.classList.add('pass');\n      } else {\n        testStatusEl.innerHTML = '[&#x2718;]';\n        testStatusEl.classList.remove('pass');\n        testStatusEl.classList.add('fail');\n      }\n    });\n\n    if (allPassed === true) {\n      testTotalEl.innerText = 'PASS';\n      testTotalEl.classList.remove('fail');\n      testTotalEl.classList.add('pass');\n    } else {\n      testTotalEl.innerText = 'FAIL';\n      testTotalEl.classList.remove('pass');\n      testTotalEl.classList.add('fail');\n    }\n  }\n\n  function printAssertError(errObj) {\n    // Make element string\n    let inner = '';\n    if (errObj !== null) {\n      inner = `\n      <div class=\"assert-error\">\n        Expected: ${JSON.stringify(errObj.expected)}\n        Actual: ${JSON.stringify(errObj.actual)}\n      </div>`;\n    }\n\n    // Prepend element\n    assertConsoleEl.innerHTML = inner;\n  }\n\n  function printEvalOutput(errObj, output) {\n    // Make element string\n    let inner = '';\n    if (errObj && errObj.message !== undefined) {\n      inner = `\n      <div class=\"assert-error\">\n        Syntax Error: ${JSON.stringify(errObj.message)}\n      </div>`;\n    } else if (output) {\n      inner = `\n      <div class=\"assert-error\">\n        Output: ${JSON.stringify(output)}\n      </div>`;\n    }\n    // Prepend element\n    evalConsoleEl.innerHTML = inner;\n  }\n\n\n  // VERIFICATION LOGIC\n  // ============================================================\n\n  function testSuite(init) {\n    // Show 'working' indicator\n    testTotalEl.classList.toggle('working');\n    // Run stuff\n    const output = getOutput(codeEl.value);\n    // Run tests on code, return object/array of test results\n    const tested = runTests(output);\n    // Hide 'working' indicator\n    testTotalEl.classList.toggle('working');\n    // Update UI with results\n    updateTests(tested, init);\n  }\n\n  function getOutput(code) {\n    let evald = false;\n    try {\n      evald = eval(`(function(){${code}})()`); // eslint-disable-line no-eval\n      printEvalOutput(null, evald); // Print current output\n    } catch (err) {\n      printEvalOutput(err);\n    }\n    return evald;\n  }\n\n  function runTests(output) {\n    let tested = false;\n    tested = currentProblem.tests.map(test => {\n      let testOutcome = false;\n      try {\n        if (output) {\n          // const testEval = eval(test.test);\n\n          testOutcome = eval(test.test);\n          console.log('testOutcome:', testOutcome);\n\n        }\n        printAssertError(null);\n      } catch (err) {\n        printAssertError(err);\n      }\n      return testOutcome;\n    });\n    return tested;\n  }\n\n  // Wrapped to prevent race with local config retrieval\n  function loadApp(config) {\n    console.log('loading app!');\n\n    // Show current toggle state\n    if (config.shuffle === true) {\n      shuffleProblemsButtonEl.classList.add('active');\n      previousProblemButtonEl.parentNode.classList.add('hidden');\n    }\n\n    // Keybinding stuff\n    // ============================================================\n\n    // Debounced code validation\n    const debouncedInputValidation = debounce(e => {\n      // If not arrow keys or other non-character keys\n      if (ignoreKeyCodes.indexOf(e.keyCode) === -1) {\n        // Run test suite\n        testSuite();\n      }\n    }, 200);\n\n    function problemNav(e) {\n      // Go to previous problem keybinding\n      // If CMD/CTRL + SHIFT + RETURN/ENTER\n      if (config.shuffle === false && e.keyCode === 13 && e.shiftKey && (e.metaKey || e.ctrlKey)) {\n        // Go to next problem\n        previousProblem();\n      } else if (e.keyCode === 13 && !e.shiftKey && (e.metaKey || e.ctrlKey)) {\n      // Go to next problem keybinding\n      // If CMD/CTRL + RETURN/ENTER\n        // Go to next problem\n        nextProblem();\n      }\n    }\n\n    // Event Bindings\n    // ============================================================\n\n    // Bind it up\n    codeEl.addEventListener('keydown', debouncedInputValidation);\n    document.addEventListener('keydown', problemNav);\n    shuffleProblemsButtonEl.addEventListener('click', toggleShuffle);\n    previousProblemButtonEl.addEventListener('click', previousProblem);\n    nextProblemButtonEl.addEventListener('click', nextProblem);\n\n    // Start it up!\n    // Load current problem\n    const currProb = getCurrentProblem(problems);\n    loadProblem(currProb);\n    // Initalized test suite with starting failures\n    testSuite(true);\n  }\n})(document, window);\n"]}