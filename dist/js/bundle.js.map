{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js","node_modules/assertion-error/index.js","node_modules/chai/index.js","node_modules/chai/lib/chai.js","node_modules/chai/lib/chai/assertion.js","node_modules/chai/lib/chai/config.js","node_modules/chai/lib/chai/core/assertions.js","node_modules/chai/lib/chai/interface/assert.js","node_modules/chai/lib/chai/interface/expect.js","node_modules/chai/lib/chai/interface/should.js","node_modules/chai/lib/chai/utils/addChainableMethod.js","node_modules/chai/lib/chai/utils/addMethod.js","node_modules/chai/lib/chai/utils/addProperty.js","node_modules/chai/lib/chai/utils/expectTypes.js","node_modules/chai/lib/chai/utils/flag.js","node_modules/chai/lib/chai/utils/getActual.js","node_modules/chai/lib/chai/utils/getEnumerableProperties.js","node_modules/chai/lib/chai/utils/getMessage.js","node_modules/chai/lib/chai/utils/getName.js","node_modules/chai/lib/chai/utils/getPathInfo.js","node_modules/chai/lib/chai/utils/getPathValue.js","node_modules/chai/lib/chai/utils/getProperties.js","node_modules/chai/lib/chai/utils/hasProperty.js","node_modules/chai/lib/chai/utils/index.js","node_modules/chai/lib/chai/utils/inspect.js","node_modules/chai/lib/chai/utils/objDisplay.js","node_modules/chai/lib/chai/utils/overwriteChainableMethod.js","node_modules/chai/lib/chai/utils/overwriteMethod.js","node_modules/chai/lib/chai/utils/overwriteProperty.js","node_modules/chai/lib/chai/utils/test.js","node_modules/chai/lib/chai/utils/transferFlags.js","node_modules/deep-eql/index.js","node_modules/deep-eql/lib/eql.js","node_modules/deep-eql/node_modules/type-detect/index.js","node_modules/deep-eql/node_modules/type-detect/lib/type.js","node_modules/hoister/index.js","node_modules/notevil/index.js","node_modules/notevil/lib/infinite-checker.js","node_modules/notevil/lib/primitives.js","node_modules/notevil/node_modules/esprima/esprima.js","node_modules/type-detect/lib/type.js","problems/arrays.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","getRandomProblem","problemsArr","Math","floor","random","loadProblem","problemObj","currentProblem","problemNameEl","innerText","name","problemEl","prompt","given","codeEl","value","testSuite","updateTests","testStatus","init","buildTests","tests","updateTestStatus","testsDom","map","test","join","testSuiteEl","innerHTML","testStatuses","allPassed","forEach","testPassed","Array","from","querySelectorAll","testStatusEl","iter","classList","remove","add","testTotalEl","printAssertError","errObj","el","document","createElement","inner","JSON","stringify","expected","actual","consoleEl","insertBefore","firstChild","printEvalError","message","runTests","getOutput","evald","safeEval","error","output","type","correctOutput","problems","assert","getElementById","addEventListener","window","exclude","excludeProps","res","obj","Object","keys","key","excludes","indexOf","slice","arguments","args","AssertionError","_props","ssf","extend","props","this","showDiff","callee","captureStackTrace","stack","prototype","create","constructor","toJSON","used","version","util","use","fn","push","config","assertion","core","expect","should","_chai","Assertion","msg","flag","defineProperty","get","console","warn","includeStack","set","addProperty","addMethod","addChainableMethod","chainingBehavior","overwriteProperty","overwriteMethod","overwriteChainableMethod","expr","negateMsg","_actual","ok","getMessage","getActual","val","truncateThreshold","chai","_","an","toLowerCase","article","charAt","includeChainingBehavior","include","expectTypes","eql","k","property","subset","undefined","inspect","checkArguments","toString","assertEqual","_obj","assertEql","assertAbove","to","have","len","assertLeast","assertBelow","assertMost","assertInstanceOf","getName","assertOwnProperty","hasOwnProperty","assertOwnPropertyDescriptor","descriptor","actualDescriptor","getOwnPropertyDescriptor","assertLengthChain","assertLength","assertMatch","re","exec","assertKeys","str","mixedArgsMsg","any","all","filter","every","last","pop","sort","assertThrows","errMsg","is","thrown","desiredError","thrownError","RegExp","err","actuallyGot","expectedThrown","respondTo","method","itself","context","satisfy","matcher","result","objDisplay","negate","closeTo","delta","abs","isSubsetOf","superset","cmp","elem","some","elem2","oneOf","list","be","assertChanges","object","prop","initial","assertIncreases","assertDecreases","chain","isNaN","isArray","start","finish","range","isDeep","pathInfo","getPathInfo","hasProperty","exists","isExtensible","TypeError","isSealed","isFrozen","express","errmsg","fail","operator","isOk","isNotOk","not","equal","act","exp","notEqual","strictEqual","notStrictEqual","deepEqual","notDeepEqual","isAbove","abv","above","isAtLeast","atlst","least","isBelow","blw","below","isAtMost","atmst","most","isTrue","isNotTrue","isFalse","isNotFalse","isNull","isNotNull","NaN","isNotNaN","isUndefined","isDefined","isFunction","isNotFunction","isObject","isNotObject","isNotArray","isString","isNotString","isNumber","isNotNumber","isBoolean","isNotBoolean","typeOf","notTypeOf","instanceOf","notInstanceOf","inc","notInclude","match","notMatch","notProperty","deepProperty","deep","notDeepProperty","propertyVal","propertyNotVal","deepPropertyVal","deepPropertyNotVal","lengthOf","throws","errt","errs","assertErr","throw","doesNotThrow","Throw","val2","approximately","sameMembers","set1","set2","same","members","sameDeepMembers","includeMembers","includeDeepMembers","inList","changes","change","doesNotChange","increases","increase","doesNotIncrease","decreases","decrease","doesNotDecrease","ifError","extensible","isNotExtensible","sealed","isNotSealed","frozen","isNotFrozen","alias","as","loadShould","shouldGetter","String","Number","Boolean","valueOf","shouldSetter","enumerable","configurable","writable","val1","exist","Should","transferFlags","hasProtoSupport","excludeNames","Function","apply","ctx","chainableBehavior","__methods","__proto__","getOwnPropertyNames","asserterName","pd","getter","types","index","art","flags","__flags","flagMsg","replace","func","parsePath","path","mArr","parseFloat","p","_getPathValue","parsed","tmp","part","info","parent","proto","getPrototypeOf","literals","number","string","ot","getPathValue","showHidden","depth","colors","formatValue","seen","stylize","recurseTimes","ret","primitive","formatPrimitive","isDOMElement","outerHTML","xmlVersion","XMLSerializer","serializeToString","container","createElementNS","appendChild","cloneNode","html","visibleKeys","getEnumerableProperties","getProperties","isError","nameSuffix","isRegExp","isDate","Date","toUTCString","formatError","base","array","braces","formatArray","formatProperty","reduceToSingleString","simple","Infinity","__lookupGetter__","__lookupSetter__","split","line","substr","numLinesEst","reduce","prev","cur","ar","objectToString","d","HTMLElement","nodeType","nodeName","splice","_chainingBehavior","_method","_super","_get","includeAll","b","m","sameValue","dateEqual","regexpEqual","Buffer","isBuffer","bufferEqual","argumentsEqual","typeEqual","objectEqual","getTime","iterableEqual","isValue","ka","kb","ex","getType","natives","Library","[object Array]","[object RegExp]","[object Function]","[object Arguments]","[object Date]","of","define","ReferenceError","hoist","ast","walkAll","nodes","childNode","walk","node","parentStack","excludeBody","shouldScope","body","variables","functions","prependScope","declarations","id","unshift","kind","src","parentContext","finalValue","evaluateAst","prepareAst","FunctionFactory","parse","getFunction","tree","ReturnValue","enterBlock","leaveBlock","params","blockContext","argument","expression","setValue","left","right","declaration","target","defaultHandler","matched","discriminant","cases","consequent","alternate","infinite","InfiniteChecker","maxIterations","update","check","block","catchClause","handlers","param","finalizer","arg","computed","unsupportedExpression","elements","properties","primitives","applyNew","getPropertyObject","checkValue","safeFunction","objectForKey","canSetProperty","Primitives","hasOwn","propertyIsEnumerable","isPrimitive","global","idx","identifier","eval","count","names","wrap","getProto","getGlobal","setProto","prim","instance","wrapped","immutable","boolean","protos","primIndex","protoIndex","immutableType","replacement","bind","root","factory","amd","esprima","condition","sliceSource","source","isDecimalDigit","ch","isHexDigit","isOctalDigit","isWhiteSpace","charCodeAt","isLineTerminator","isIdentifierStart","Regex","NonAsciiIdentifierStart","isIdentifierPart","NonAsciiIdentifierPart","isFutureReservedWord","isStrictModeReservedWord","isRestrictedWord","isKeyword","keyword","strict","skipComment","blockComment","lineComment","lineNumber","lineStart","throwError","Messages","UnexpectedToken","scanHexEscape","prefix","fromCharCode","scanIdentifier","restore","Token","Identifier","Keyword","NullLiteral","BooleanLiteral","scanPunctuator","ch2","ch3","ch4","ch1","Punctuator","scanNumericLiteral","NumericLiteral","parseInt","octal","scanStringLiteral","quote","unescaped","StringLiteral","scanRegExp","pattern","classMarker","terminated","buffer","UnterminatedRegExp","InvalidRegExp","literal","isIdentifierName","token","advance","EOF","lex","lookahead","pos","peekLineTerminator","found","messageFormat","whole","column","throwErrorTolerant","extra","errors","throwUnexpected","UnexpectedEOS","UnexpectedNumber","UnexpectedString","UnexpectedIdentifier","UnexpectedReserved","StrictReservedWord","expectKeyword","matchKeyword","matchAssign","op","consumeSemicolon","isLeftHandSide","Syntax","MemberExpression","parseArrayInitialiser","parseAssignmentExpression","ArrayExpression","parsePropertyFunction","first","previousStrict","parseFunctionSourceElements","StrictParamName","FunctionExpression","defaults","rest","generator","parseObjectPropertyKey","StrictOctalLiteral","createLiteral","parseObjectProperty","Property","parseVariableIdentifier","parseObjectInitialiser","PropertyKind","Data","Get","Set","StrictDuplicateProperty","AccessorDataProperty","AccessorGetSet","ObjectExpression","parseGroupExpression","parseExpression","parsePrimaryExpression","ThisExpression","parseFunctionExpression","parseArguments","parseNonComputedProperty","parseNonComputedMember","parseComputedMember","parseNewExpression","NewExpression","parseLeftHandSideExpression","parseLeftHandSideExpressionAllowCall","CallExpression","parsePostfixExpression","StrictLHSPostfix","InvalidLHSInAssignment","UpdateExpression","parseUnaryExpression","StrictLHSPrefix","UnaryExpression","StrictDelete","parseMultiplicativeExpression","BinaryExpression","parseAdditiveExpression","parseShiftExpression","parseRelationalExpression","previousAllowIn","state","allowIn","parseEqualityExpression","parseBitwiseANDExpression","parseBitwiseXORExpression","parseBitwiseORExpression","parseLogicalANDExpression","LogicalExpression","parseLogicalORExpression","parseConditionalExpression","ConditionalExpression","StrictLHSAssignment","AssignmentExpression","SequenceExpression","expressions","parseStatementList","statement","parseSourceElement","parseBlock","BlockStatement","parseVariableDeclaration","StrictVarName","VariableDeclarator","parseVariableDeclarationList","parseVariableStatement","VariableDeclaration","parseConstLetDeclaration","parseEmptyStatement","EmptyStatement","parseExpressionStatement","ExpressionStatement","parseIfStatement","parseStatement","IfStatement","parseDoWhileStatement","oldInIteration","inIteration","DoWhileStatement","parseWhileStatement","WhileStatement","parseForVariableDeclaration","parseForStatement","InvalidLHSInForIn","ForStatement","ForInStatement","each","parseContinueStatement","label","IllegalContinue","ContinueStatement","labelSet","UnknownLabel","parseBreakStatement","inSwitch","IllegalBreak","BreakStatement","parseReturnStatement","inFunctionBody","IllegalReturn","ReturnStatement","parseWithStatement","StrictModeWith","WithStatement","parseSwitchCase","SwitchCase","parseSwitchStatement","clause","oldInSwitch","defaultFound","SwitchStatement","MultipleDefaultsInSwitch","parseThrowStatement","NewlineAfterThrow","ThrowStatement","parseCatchClause","StrictCatchVariable","CatchClause","parseTryStatement","NoCatchOrFinally","TryStatement","guardedHandlers","parseDebuggerStatement","DebuggerStatement","labeledBody","parseFunctionDeclaration","Redeclaration","LabeledStatement","sourceElement","directive","firstRestricted","oldLabelSet","oldInFunctionBody","sourceElements","Literal","stricted","paramSet","StrictFunctionName","StrictParamDupe","FunctionDeclaration","parseSourceElements","parseProgram","Program","addComment","end","loc","comments","scanComment","comment","filterCommentLocation","entry","collectToken","tokens","TokenName","collectRegex","regex","filterTokenLocation","createRawLiteral","raw","createLocationMarker","marker","applyGroup","groupRange","groupLoc","trackGroupExpression","trackLeftHandSideExpression","trackLeftHandSideExpressionAllowCall","filterGroup","wrapTrackingFunction","parseFunction","isBinary","visit","patch","wrapTracking","unpatch","stringToArray","options","program","tolerant","freeze","objectTypeRegexp","Promise","answer"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function(){\n\n  // DEPENDENCIES\n  // ============================================================\n\n  // notevil doesn't support ES6 arrows, probably other parts of syntax :(\n  const safeEval = require('notevil');\n  // const safeEval = require('static-eval');              // required AST to work?\n  // const safeEval = require('ecmascript-evaluator').run; // 6MB, limited on inputs\n  // const safeEval = require('@nx-js/compiler-util').compileCode; // no idea?\n  const assert = require('chai').assert;\n\n\n  // PROBLEMS\n  // ============================================================\n  const problems = require('./problems/arrays.js');\n\n\n  // CONFIG\n  // ============================================================\n  // Hoist current problem\n  let currentProblem;\n\n  // UI\n  // ============================================================\n\n  // elements\n  const problemNameEl = document.getElementById('problem-name');\n  const problemEl = document.getElementById('problem');\n  const codeEl = document.getElementById('code');\n  const testAreaEl = document.getElementById('test-area');\n  const testSuiteEl = document.getElementById('test-suite');\n  const testTotalEl = document.getElementById('test-total');\n  const consoleEl = document.getElementById('console');\n\n  function getRandomProblem(problemsArr) {\n    return problemsArr[Math.floor(Math.random()*problemsArr.length)]\n  }\n\n  function loadProblem(problemObj) {\n    currentProblem = problemObj;\n    // prob name\n    problemNameEl.innerText = problemObj.name;\n    // prob question\n    problemEl.innerText = problemObj.prompt;\n    // prob given\n    if (problemObj.given) {\n      codeEl.value = problemObj.given;\n    }\n    // seed tests, pass (init = true) as second param\n    testSuite(null, true);\n  }\n\n  // TODO: show tests and current pass state of them\n  // test array and test dom array will be matched in order,\n  // so we don't need to rebuild dom each time the tests change\n  function updateTests(testStatus, init) {\n    if(init === true) {\n      buildTests(currentProblem.tests);\n    }\n    updateTestStatus(testStatus);\n  }\n\n  function buildTests(tests) {\n    if (tests) {\n      const testsDom = tests.map(test => {\n        return `<div class=\"test monospace\">\n                  <div class=\"test-state\">[&#x2718;]</div>\n                  <div class=\"test-name\">${test.name}</div>\n                </div>`;\n      }).join('');\n      testSuiteEl.innerHTML = testsDom;\n    }\n  }\n\n  function updateTestStatus(testStatuses) {\n    if (!testStatuses) {\n      throw new Error('No testStatuses provided.');\n    }\n    // Find out if all tests have passed or not\n    let allPassed = true;\n    testStatuses.forEach(testPassed => {\n      if (testPassed !== true) {\n        allPassed = false;\n      }\n    });\n    const testEls = Array.from(testSuiteEl.querySelectorAll('.test-state'));\n    testEls.forEach((testStatusEl, iter) => {\n      if (testStatuses[iter] === true) {\n        testStatusEl.innerHTML = '[&#x2713;]';\n        testStatusEl.classList.remove('fail');\n        testStatusEl.classList.add('pass');\n      } else {\n        testStatusEl.innerHTML = '[&#x2718;]';\n        testStatusEl.classList.remove('pass');\n        testStatusEl.classList.add('fail');\n      }\n    });\n\n    if (allPassed === true) {\n      testTotalEl.innerText = 'PASS';\n      testTotalEl.classList.remove('fail');\n      testTotalEl.classList.add('pass');\n    } else {\n      testTotalEl.innerText = 'FAIL';\n      testTotalEl.classList.remove('pass');\n      testTotalEl.classList.add('fail');\n    }\n  }\n\n  function printAssertError(errObj) {\n    // make element\n    const el = document.createElement('div');\n    el.classList.add('assert-error');\n    const inner = `\n      Expected: ${JSON.stringify(errObj.expected)}\n      Actual: ${JSON.stringify(errObj.actual)}\n    `;\n    el.innerHTML = inner;\n    // prepend element\n    consoleEl.insertBefore(el, consoleEl.firstChild)\n  }\n\n  function printEvalError(errObj) {\n    // // make element\n    const el = document.createElement('div');\n    el.classList.add('assert-error');\n    const inner = `\n      Syntax Error: ${JSON.stringify(errObj.message)}\n    `;\n    el.innerHTML = inner;\n    // prepend element\n    consoleEl.insertBefore(el, consoleEl.firstChild)\n  }\n\n\n\n\n  // VERIFICATION LOGIC\n  // ============================================================\n\n  function testSuite(e, init) {\n    // console.log('codeEl.value:', codeEl.value);\n    // console.log(typeof codeEl.value);\n    // run stuff\n    const output = getOutput(codeEl.value);\n    // console.log('output:', output);\n    // run tests on code, return object/array of test results\n    const tested = runTests(output);\n    // update UI with results\n    updateTests(tested, init);\n  }\n\n  function getOutput(code) {\n    let evald = false;\n    try {\n      evald = safeEval(`(function(){${code}})()`);\n    } catch (error) {\n      // console.log('safeEval error:', error);\n      printEvalError(error);\n    }\n    return evald;\n  }\n\n  function runTests(output) {\n    let tested = false;\n    tested = currentProblem.tests.map(test => {\n      let testOutcome = false;\n      try {\n        if (!output) {\n          testOutcome = false;\n        } else if (test.type === 'assertCorrectOutput') {\n          // output is correct\n          testOutcome = test.test(output, test.correctOutput);\n        } else {\n          // other tests that don't need args passed\n          testOutcome = test.test();\n        }\n        return testOutcome;\n      } catch (error) {\n        // console.log('error:', error);\n        printAssertError(error);\n      }\n    });\n    return tested;\n  }\n\n\n\n  // bind it up\n  codeEl.addEventListener('keyup', testSuite);\n\n  // start it up\n  window.addEventListener('load', () => {\n    // load random problem\n    loadProblem(getRandomProblem(problems));\n    // initalized test suite with starting failures\n    testSuite(null, true);\n  });\n\n})();\n","/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || arguments.callee;\n  if (ssf && Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n","module.exports = require('./lib/chai');\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = []\n  , exports = module.exports = {};\n\n/*!\n * Chai version\n */\n\nexports.version = '3.5.0';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(this, util);\n    used.push(fn);\n  }\n\n  return this;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * @api private\n   */\n\n  function Assertion (obj, msg, stack) {\n    flag(this, 'ssfi', stack || arguments.callee);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (true !== showDiff) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      var msg = util.getMessage(this, arguments)\n        , actual = util.getActual(this, arguments);\n      throw new AssertionError(msg, {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n","module.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n   includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40\n\n};\n","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , toString = Object.prototype.toString\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to\n   * improve the readability of your assertions. They\n   * do not provide testing capabilities unless they\n   * have been overwritten by a plugin.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been'\n  , 'is', 'and', 'has', 'have'\n  , 'with', 'that', 'which', 'at'\n  , 'of', 'same' ].forEach(function (chain) {\n    Assertion.addProperty(chain, function () {\n      return this;\n    });\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates any of assertions following in the chain.\n   *\n   *     expect(foo).to.not.equal('bar');\n   *     expect(goodFn).to.not.throw(Error);\n   *     expect({ foo: 'baz' }).to.have.property('foo')\n   *       .and.not.equal('bar');\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Sets the `deep` flag, later used by the `equal` and\n   * `property` assertions.\n   *\n   *     expect(foo).to.deep.equal({ bar: 'baz' });\n   *     expect({ foo: { bar: { baz: 'quux' } } })\n   *       .to.have.deep.property('foo.bar.baz', 'quux');\n   *\n   * `.deep.property` special characters can be escaped\n   * by adding two slashes before the `.` or `[]`.\n   *\n   *     var deepCss = { '.link': { '[target]': 42 }};\n   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Sets the `any` flag, (opposite of the `all` flag)\n   * later used in the `keys` assertion.\n   *\n   *     expect(foo).to.have.any.keys('bar', 'baz');\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false)\n  });\n\n\n  /**\n   * ### .all\n   *\n   * Sets the `all` flag (opposite of the `any` flag)\n   * later used by the `keys` assertion.\n   *\n   *     expect(foo).to.have.all.keys('bar', 'baz');\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type)\n   *\n   * The `a` and `an` assertions are aliases that can be\n   * used either as language chains or to assert a value's\n   * type.\n   *\n   *     // typeof\n   *     expect('test').to.be.a('string');\n   *     expect({ foo: 'bar' }).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(new Promise).to.be.a('promise');\n   *     expect(new Float32Array()).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   *     // es6 overrides\n   *     expect({[Symbol.toStringTag]:()=>'foo'}).to.be.a('foo');\n   *\n   *     // language chain\n   *     expect(foo).to.be.an.instanceof(Foo);\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj)\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(value)\n   *\n   * The `include` and `contain` assertions can be used as either property\n   * based language chains or as methods to assert the inclusion of an object\n   * in an array or a substring in a string. When used as language chains,\n   * they toggle the `contains` flag for the `keys` assertion.\n   *\n   *     expect([1,2,3]).to.include(2);\n   *     expect('foobar').to.contain('foo');\n   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Object|String|Number} obj\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    _.expectTypes(this, ['array', 'object', 'string']);\n\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var expected = false;\n\n    if (_.type(obj) === 'array' && _.type(val) === 'object') {\n      for (var i in obj) {\n        if (_.eql(obj[i], val)) {\n          expected = true;\n          break;\n        }\n      }\n    } else if (_.type(val) === 'object') {\n      if (!flag(this, 'negate')) {\n        for (var k in val) new Assertion(obj).property(k, val[k]);\n        return;\n      }\n      var subset = {};\n      for (var k in val) subset[k] = obj[k];\n      expected = _.eql(subset, val);\n    } else {\n      expected = (obj != undefined) && ~obj.indexOf(val);\n    }\n    this.assert(\n        expected\n      , 'expected #{this} to include ' + _.inspect(val)\n      , 'expected #{this} to not include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is truthy.\n   *\n   *     expect('everything').to.be.ok;\n   *     expect(1).to.be.ok;\n   *     expect(false).to.not.be.ok;\n   *     expect(undefined).to.not.be.ok;\n   *     expect(null).to.not.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is `true`.\n   *\n   *     expect(true).to.be.true;\n   *     expect(1).to.not.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , this.negate ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is `false`.\n   *\n   *     expect(false).to.be.false;\n   *     expect(0).to.not.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , this.negate ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is `null`.\n   *\n   *     expect(null).to.be.null;\n   *     expect(undefined).to.not.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *     expect(null).to.not.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   * Asserts that the target is `NaN`.\n   *\n   *     expect('foo').to.be.NaN;\n   *     expect(4).not.to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi'\n   *       , bar = null\n   *       , baz;\n   *\n   *     expect(foo).to.exist;\n   *     expect(bar).to.not.exist;\n   *     expect(baz).to.not.exist;\n   *\n   * @name exist\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('exist', function () {\n    this.assert(\n        null != flag(this, 'object')\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  });\n\n\n  /**\n   * ### .empty\n   *\n   * Asserts that the target's length is `0`. For arrays and strings, it checks\n   * the `length` property. For objects, it gets the count of\n   * enumerable keys.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *     expect({}).to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var obj = flag(this, 'object')\n      , expected = obj;\n\n    if (Array.isArray(obj) || 'string' === typeof object) {\n      expected = obj.length;\n    } else if (typeof obj === 'object') {\n      expected = Object.keys(obj).length;\n    }\n\n    this.assert(\n        !expected\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an arguments object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = Object.prototype.toString.call(obj);\n    this.assert(\n        '[object Arguments]' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(value)\n   *\n   * Asserts that the target is strictly equal (`===`) to `value`.\n   * Alternately, if the `deep` flag is set, asserts that\n   * the target is deeply equal to `value`.\n   *\n   *     expect('hello').to.equal('hello');\n   *     expect(42).to.equal(42);\n   *     expect(1).to.not.equal(true);\n   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });\n   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @alias deep.equal\n   * @param {Mixed} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      return this.eql(val);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(value)\n   *\n   * Asserts that the target is deeply equal to `value`.\n   *\n   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });\n   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(value)\n   *\n   * Asserts that the target is greater than `value`.\n   *\n   *     expect(10).to.be.above(5);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a minimum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.above(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len > n\n        , 'expected #{this} to have a length above #{exp} but got #{act}'\n        , 'expected #{this} to not have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above ' + n\n        , 'expected #{this} to be at most ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(value)\n   *\n   * Asserts that the target is greater than or equal to `value`.\n   *\n   *     expect(10).to.be.at.least(10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a minimum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.of.at.least(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);\n   *\n   * @name least\n   * @alias gte\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len >= n\n        , 'expected #{this} to have a length at least #{exp} but got #{act}'\n        , 'expected #{this} to have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least ' + n\n        , 'expected #{this} to be below ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n\n  /**\n   * ### .below(value)\n   *\n   * Asserts that the target is less than `value`.\n   *\n   *     expect(5).to.be.below(10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a maximum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.below(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len < n\n        , 'expected #{this} to have a length below #{exp} but got #{act}'\n        , 'expected #{this} to not have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below ' + n\n        , 'expected #{this} to be at least ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(value)\n   *\n   * Asserts that the target is less than or equal to `value`.\n   *\n   *     expect(5).to.be.at.most(5);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a maximum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.of.at.most(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);\n   *\n   * @name most\n   * @alias lte\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len <= n\n        , 'expected #{this} to have a length at most #{exp} but got #{act}'\n        , 'expected #{this} to have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most ' + n\n        , 'expected #{this} to be above ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n\n  /**\n   * ### .within(start, finish)\n   *\n   * Asserts that the target is within a range.\n   *\n   *     expect(7).to.be.within(5,10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a length range. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.within(2,4);\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n   *\n   * @name within\n   * @param {Number} start lowerbound inclusive\n   * @param {Number} finish upperbound inclusive\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , range = start + '..' + finish;\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len >= start && len <= finish\n        , 'expected #{this} to have a length within ' + range\n        , 'expected #{this} to not have a length within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor)\n   *\n   * Asserts that the target is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , Chai = new Tea('chai');\n   *\n   *     expect(Chai).to.be.an.instanceof(Tea);\n   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} message _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n    var name = _.getName(constructor);\n    this.assert(\n        flag(this, 'object') instanceof constructor\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name, [value])\n   *\n   * Asserts that the target has a property `name`, optionally asserting that\n   * the value of that property is strictly equal to  `value`.\n   * If the `deep` flag is set, you can use dot- and bracket-notation for deep\n   * references into objects and arrays.\n   *\n   *     // simple referencing\n   *     var obj = { foo: 'bar' };\n   *     expect(obj).to.have.property('foo');\n   *     expect(obj).to.have.property('foo', 'bar');\n   *\n   *     // deep referencing\n   *     var deepObj = {\n   *         green: { tea: 'matcha' }\n   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]\n   *     };\n   *\n   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');\n   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');\n   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');\n   *\n   * You can also use an array as the starting point of a `deep.property`\n   * assertion, or traverse nested arrays.\n   *\n   *     var arr = [\n   *         [ 'chai', 'matcha', 'konacha' ]\n   *       , [ { tea: 'chai' }\n   *         , { tea: 'matcha' }\n   *         , { tea: 'konacha' } ]\n   *     ];\n   *\n   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');\n   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');\n   *\n   * Furthermore, `property` changes the subject of the assertion\n   * to be the value of that property from the original object. This\n   * permits for further chainable assertions on that property.\n   *\n   *     expect(obj).to.have.property('foo')\n   *       .that.is.a('string');\n   *     expect(deepObj).to.have.property('green')\n   *       .that.is.an('object')\n   *       .that.deep.equals({ tea: 'matcha' });\n   *     expect(deepObj).to.have.property('teas')\n   *       .that.is.an('array')\n   *       .with.deep.property('[2]')\n   *         .that.deep.equals({ tea: 'konacha' });\n   *\n   * Note that dots and bracket in `name` must be backslash-escaped when\n   * the `deep` flag is set, while they must NOT be escaped when the `deep`\n   * flag is not set.\n   *\n   *     // simple referencing\n   *     var css = { '.link[target]': 42 };\n   *     expect(css).to.have.property('.link[target]', 42);\n   *\n   *     // deep referencing\n   *     var deepCss = { '.link': { '[target]': 42 }};\n   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n   *\n   * @name property\n   * @alias deep.property\n   * @param {String} name\n   * @param {Mixed} value (optional)\n   * @param {String} message _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('property', function (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isDeep = !!flag(this, 'deep')\n      , descriptor = isDeep ? 'deep property ' : 'property '\n      , negate = flag(this, 'negate')\n      , obj = flag(this, 'object')\n      , pathInfo = isDeep ? _.getPathInfo(name, obj) : null\n      , hasProperty = isDeep\n        ? pathInfo.exists\n        : _.hasProperty(name, obj)\n      , value = isDeep\n        ? pathInfo.value\n        : obj[name];\n\n    if (negate && arguments.length > 1) {\n      if (undefined === value) {\n        msg = (msg != null) ? msg + ': ' : '';\n        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));\n      }\n    } else {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          val === value\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  });\n\n\n  /**\n   * ### .ownProperty(name)\n   *\n   * Asserts that the target has an own property `name`.\n   *\n   *     expect('test').to.have.ownProperty('length');\n   *\n   * @name ownProperty\n   * @alias haveOwnProperty\n   * @param {String} name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnProperty (name, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        obj.hasOwnProperty(name)\n      , 'expected #{this} to have own property ' + _.inspect(name)\n      , 'expected #{this} to not have own property ' + _.inspect(name)\n    );\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, message]])\n   *\n   * Asserts that the target has an own property descriptor `name`, that optionally matches `descriptor`.\n   *\n   *     expect('test').to.have.ownPropertyDescriptor('length');\n   *     expect('test').to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 4 });\n   *     expect('test').not.to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 3 });\n   *     expect('test').ownPropertyDescriptor('length').to.have.property('enumerable', false);\n   *     expect('test').ownPropertyDescriptor('length').to.have.keys('value');\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          _.eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .length\n   *\n   * Sets the `doLength` flag later used as a chain precursor to a value\n   * comparison for the `length` property.\n   *\n   *     expect('foo').to.have.length.above(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n   *     expect('foo').to.have.length.below(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n   *     expect('foo').to.have.length.within(2,4);\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n   *\n   * *Deprecation notice:* Using `length` as an assertion will be deprecated\n   * in version 2.4.0 and removed in 3.0.0. Code using the old style of\n   * asserting for `length` property value using `length(value)` should be\n   * switched to use `lengthOf(value)` instead.\n   *\n   * @name length\n   * @namespace BDD\n   * @api public\n   */\n\n  /**\n   * ### .lengthOf(value[, message])\n   *\n   * Asserts that the target's `length` property has\n   * the expected value.\n   *\n   *     expect([ 1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foobar').to.have.lengthOf(6);\n   *\n   * @name lengthOf\n   * @param {Number} length\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).to.have.property('length');\n    var len = obj.length;\n\n    this.assert(\n        len == n\n      , 'expected #{this} to have a length of #{exp} but got #{act}'\n      , 'expected #{this} to not have a length of #{act}'\n      , n\n      , len\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addMethod('lengthOf', assertLength);\n\n  /**\n   * ### .match(regexp)\n   *\n   * Asserts that the target matches a regular expression.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} RegularExpression\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(string)\n   *\n   * Asserts that the string target contains another string.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * @name string\n   * @param {String} string\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n\n  /**\n   * ### .keys(key1, [key2], [...])\n   *\n   * Asserts that the target contains any or all of the passed-in keys.\n   * Use in combination with `any`, `all`, `contains`, or `have` will affect\n   * what will pass.\n   *\n   * When used in conjunction with `any`, at least one key that is passed\n   * in must exist in the target object. This is regardless whether or not\n   * the `have` or `contain` qualifiers are used. Note, either `any` or `all`\n   * should be used in the assertion. If neither are used, the assertion is\n   * defaulted to `all`.\n   *\n   * When both `all` and `contain` are used, the target object must have at\n   * least all of the passed-in keys but may have more keys not listed.\n   *\n   * When both `all` and `have` are used, the target object must both contain\n   * all of the passed-in keys AND the number of keys in the target object must\n   * match the number of keys passed in (in other words, a target object must\n   * have all and only all of the passed-in keys).\n   *\n   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo', 'baz');\n   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo');\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys('bar', 'baz');\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys(['foo']);\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys({'foo': 6});\n   *     expect({ foo: 1, bar: 2 }).to.have.all.keys(['bar', 'foo']);\n   *     expect({ foo: 1, bar: 2 }).to.have.all.keys({'bar': 6, 'foo': 7});\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys(['bar', 'foo']);\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys({'bar': 6});\n   *\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , str\n      , ok = true\n      , mixedArgsMsg = 'keys must be given single argument of Array|Object|String, or multiple String arguments';\n\n    switch (_.type(keys)) {\n      case \"array\":\n        if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n        break;\n      case \"object\":\n        if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n        keys = Object.keys(keys);\n        break;\n      default:\n        keys = Array.prototype.slice.call(arguments);\n    }\n\n    if (!keys.length) throw new Error('keys required');\n\n    var actual = Object.keys(obj)\n      , expected = keys\n      , len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all');\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      var intersection = expected.filter(function(key) {\n        return ~actual.indexOf(key);\n      });\n      ok = intersection.length > 0;\n    }\n\n    // Has all\n    if (all) {\n      ok = keys.every(function(key){\n        return ~actual.indexOf(key);\n      });\n      if (!flag(this, 'negate') && !flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key){\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + str\n      , 'expected #{this} to not ' + str\n      , expected.slice(0).sort()\n      , actual.sort()\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw(constructor)\n   *\n   * Asserts that the function target will throw a specific error, or specific type of error\n   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test\n   * for the error's message.\n   *\n   *     var err = new ReferenceError('This is a bad function.');\n   *     var fn = function () { throw err; }\n   *     expect(fn).to.throw(ReferenceError);\n   *     expect(fn).to.throw(Error);\n   *     expect(fn).to.throw(/bad function/);\n   *     expect(fn).to.not.throw('good function');\n   *     expect(fn).to.throw(ReferenceError, /bad function/);\n   *     expect(fn).to.throw(err);\n   *\n   * Please note that when a throw expectation is negated, it will check each\n   * parameter independently, starting with error constructor type. The appropriate way\n   * to check for the existence of a type of error but for a message that does not match\n   * is to use `and`.\n   *\n   *     expect(fn).to.throw(ReferenceError)\n   *        .and.not.throw(/good function/);\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {ErrorConstructor} constructor\n   * @param {String|RegExp} expected error message\n   * @param {String} message _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (constructor, errMsg, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).is.a('function');\n\n    var thrown = false\n      , desiredError = null\n      , name = null\n      , thrownError = null;\n\n    if (arguments.length === 0) {\n      errMsg = null;\n      constructor = null;\n    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {\n      errMsg = constructor;\n      constructor = null;\n    } else if (constructor && constructor instanceof Error) {\n      desiredError = constructor;\n      constructor = null;\n      errMsg = null;\n    } else if (typeof constructor === 'function') {\n      name = constructor.prototype.name;\n      if (!name || (name === 'Error' && constructor !== Error)) {\n        name = constructor.name || (new constructor()).name;\n      }\n    } else {\n      constructor = null;\n    }\n\n    try {\n      obj();\n    } catch (err) {\n      // first, check desired error\n      if (desiredError) {\n        this.assert(\n            err === desiredError\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n          , 'expected #{this} to not throw #{exp}'\n          , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n          , (err instanceof Error ? err.toString() : err)\n        );\n\n        flag(this, 'object', err);\n        return this;\n      }\n\n      // next, check constructor\n      if (constructor) {\n        this.assert(\n            err instanceof constructor\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n          , 'expected #{this} to not throw #{exp} but #{act} was thrown'\n          , name\n          , (err instanceof Error ? err.toString() : err)\n        );\n\n        if (!errMsg) {\n          flag(this, 'object', err);\n          return this;\n        }\n      }\n\n      // next, check message\n      var message = 'error' === _.type(err) && \"message\" in err\n        ? err.message\n        : '' + err;\n\n      if ((message != null) && errMsg && errMsg instanceof RegExp) {\n        this.assert(\n            errMsg.exec(message)\n          , 'expected #{this} to throw error matching #{exp} but got #{act}'\n          , 'expected #{this} to throw error not matching #{exp}'\n          , errMsg\n          , message\n        );\n\n        flag(this, 'object', err);\n        return this;\n      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {\n        this.assert(\n            ~message.indexOf(errMsg)\n          , 'expected #{this} to throw error including #{exp} but got #{act}'\n          , 'expected #{this} to throw error not including #{act}'\n          , errMsg\n          , message\n        );\n\n        flag(this, 'object', err);\n        return this;\n      } else {\n        thrown = true;\n        thrownError = err;\n      }\n    }\n\n    var actuallyGot = ''\n      , expectedThrown = name !== null\n        ? name\n        : desiredError\n          ? '#{exp}' //_.inspect(desiredError)\n          : 'an error';\n\n    if (thrown) {\n      actuallyGot = ' but #{act} was thrown'\n    }\n\n    this.assert(\n        thrown === true\n      , 'expected #{this} to throw ' + expectedThrown + actuallyGot\n      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot\n      , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n      , (thrownError instanceof Error ? thrownError.toString() : thrownError)\n    );\n\n    flag(this, 'object', thrownError);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method)\n   *\n   * Asserts that the object or class target will respond to a method.\n   *\n   *     Klass.prototype.bar = function(){};\n   *     expect(Klass).to.respondTo('bar');\n   *     expect(obj).to.respondTo('bar');\n   *\n   * To check if a constructor will respond to a static function,\n   * set the `itself` flag.\n   *\n   *     Klass.baz = function(){};\n   *     expect(Klass).itself.to.respondTo('baz');\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === _.type(obj) && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Sets the `itself` flag, later used by the `respondTo` assertion.\n   *\n   *     function Foo() {}\n   *     Foo.bar = function() {}\n   *     Foo.prototype.baz = function() {}\n   *\n   *     expect(Foo).itself.to.respondTo('bar');\n   *     expect(Foo).itself.not.to.respondTo('baz');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(method)\n   *\n   * Asserts that the target passes a given truth test.\n   *\n   *     expect(1).to.satisfy(function(num) { return num > 0; });\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , this.negate ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta)\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n\n    new Assertion(obj, msg).is.a('number');\n    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {\n      throw new Error('the arguments to closeTo or approximately must be numbers');\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  function isSubsetOf(subset, superset, cmp) {\n    return subset.every(function(elem) {\n      if (!cmp) return superset.indexOf(elem) !== -1;\n\n      return superset.some(function(elem2) {\n        return cmp(elem, elem2);\n      });\n    })\n  }\n\n  /**\n   * ### .members(set)\n   *\n   * Asserts that the target is a superset of `set`,\n   * or that the target and `set` have the same strictly-equal (===) members.\n   * Alternately, if the `deep` flag is set, set members are compared for deep\n   * equality.\n   *\n   *     expect([1, 2, 3]).to.include.members([3, 2]);\n   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);\n   *\n   *     expect([4, 2]).to.have.members([2, 4]);\n   *     expect([5, 2]).to.not.have.members([5, 2, 1]);\n   *\n   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n\n    new Assertion(obj).to.be.an('array');\n    new Assertion(subset).to.be.an('array');\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    if (flag(this, 'contains')) {\n      return this.assert(\n          isSubsetOf(subset, obj, cmp)\n        , 'expected #{this} to be a superset of #{act}'\n        , 'expected #{this} to not be a superset of #{act}'\n        , obj\n        , subset\n      );\n    }\n\n    this.assert(\n        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)\n        , 'expected #{this} to have the same members as #{act}'\n        , 'expected #{this} to not have the same members as #{act}'\n        , obj\n        , subset\n    );\n  });\n\n  /**\n   * ### .oneOf(list)\n   *\n   * Assert that a value appears somewhere in the top level of array `list`.\n   *\n   *     expect('a').to.be.oneOf(['a', 'b', 'c']);\n   *     expect(9).to.not.be.oneOf(['z']);\n   *     expect([3]).to.not.be.oneOf([1, 2, [3]]);\n   *\n   *     var three = [3];\n   *     // for object-types, contents are not compared\n   *     expect(three).to.not.be.oneOf([1, 2, [3]]);\n   *     // comparing references works\n   *     expect(three).to.be.oneOf([1, 2, three]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object');\n    new Assertion(list).to.be.an('array');\n\n    this.assert(\n        list.indexOf(expected) > -1\n      , 'expected #{this} to be one of #{exp}'\n      , 'expected #{this} to not be one of #{exp}'\n      , list\n      , expected\n    );\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n\n  /**\n   * ### .change(function)\n   *\n   * Asserts that a function changes an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 3 };\n   *     var noChangeFn = function() { return 'foo' + 'bar'; }\n   *     expect(fn).to.change(obj, 'val');\n   *     expect(noChangeFn).to.not.change(obj, 'val')\n   *\n   * @name change\n   * @alias changes\n   * @alias Change\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      initial !== object[prop]\n      , 'expected .' + prop + ' to change'\n      , 'expected .' + prop + ' to not change'\n    );\n  }\n\n  Assertion.addChainableMethod('change', assertChanges);\n  Assertion.addChainableMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(function)\n   *\n   * Asserts that a function increases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     expect(fn).to.increase(obj, 'val');\n   *\n   * @name increase\n   * @alias increases\n   * @alias Increase\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      object[prop] - initial > 0\n      , 'expected .' + prop + ' to increase'\n      , 'expected .' + prop + ' to not increase'\n    );\n  }\n\n  Assertion.addChainableMethod('increase', assertIncreases);\n  Assertion.addChainableMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(function)\n   *\n   * Asserts that a function decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     expect(fn).to.decrease(obj, 'val');\n   *\n   * @name decrease\n   * @alias decreases\n   * @alias Decrease\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      object[prop] - initial < 0\n      , 'expected .' + prop + ' to decrease'\n      , 'expected .' + prop + ' to not decrease'\n    );\n  }\n\n  Assertion.addChainableMethod('decrease', assertDecreases);\n  Assertion.addChainableMethod('decreases', assertDecreases);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible (can have new properties added to\n   * it).\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect({}).to.be.extensible;\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isExtensible;\n\n    try {\n      isExtensible = Object.isExtensible(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isExtensible = false;\n      else throw err;\n    }\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect({}).to.not.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isSealed;\n\n    try {\n      isSealed = Object.isSealed(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isSealed = true;\n      else throw err;\n    }\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect({}).to.not.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isFrozen;\n\n    try {\n      isFrozen = Object.isFrozen(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isFrozen = true;\n      else throw err;\n    }\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\nmodule.exports = function (chai, util) {\n\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   * Asserts that value is NaN\n   *\n   *    assert.isNaN('foo', 'foo is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   * Asserts that value is not NaN\n   *\n   *    assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg).not.to.be.NaN;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('number');\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg).to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Works\n   * for strings and arrays.\n   *\n   *     assert.include('foobar', 'bar', 'foobar contains string \"bar\"');\n   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Works\n   * for strings and arrays.\n   *\n   *     assert.notInclude('foobar', 'baz', 'string not include substring');\n   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude).not.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a property named by `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.not.have.property(prop);\n  };\n\n  /**\n   * ### .deepProperty(object, property, [message])\n   *\n   * Asserts that `object` has a property named by `property`, which can be a\n   * string using dot- and bracket-notation for deep reference.\n   *\n   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name deepProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.have.deep.property(prop);\n  };\n\n  /**\n   * ### .notDeepProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for deep reference.\n   *\n   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notDeepProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.not.have.deep.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`.\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.have.property(prop, val);\n  };\n\n  /**\n   * ### .propertyNotVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property`, but with a value\n   * different from that given by `value`.\n   *\n   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');\n   *\n   * @name propertyNotVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyNotVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for deep\n   * reference.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyNotVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property`, but with a value\n   * different from that given by `value`. `property` can use dot- and\n   * bracket-notation for deep reference.\n   *\n   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *\n   * @name deepPropertyNotVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyNotVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` property with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg).to.have.length(len);\n  };\n\n  /**\n   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])\n   *\n   * Asserts that `function` will throw an error that is an instance of\n   * `constructor`, or alternately that it will throw an error with message\n   * matching `regexp`.\n   *\n   *     assert.throws(fn, 'function throws a reference error');\n   *     assert.throws(fn, /function throws a reference error/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, ReferenceError, 'function throws a reference error');\n   *     assert.throws(fn, ReferenceError, /function throws a reference error/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} function\n   * @param {ErrorConstructor} constructor\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errt, errs, msg) {\n    if ('string' === typeof errt || errt instanceof RegExp) {\n      errs = errt;\n      errt = null;\n    }\n\n    var assertErr = new Assertion(fn, msg).to.throw(errt, errs);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(function, [constructor/regexp], [message])\n   *\n   * Asserts that `function` will _not_ throw an error that is an instance of\n   * `constructor`, or alternately that it will not throw an error with message\n   * matching `regexp`.\n   *\n   *     assert.doesNotThrow(fn, Error, 'function does not throw');\n   *\n   * @name doesNotThrow\n   * @param {Function} function\n   * @param {ErrorConstructor} constructor\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, type, msg) {\n    if ('string' === typeof type) {\n      msg = type;\n      type = null;\n    }\n\n    new Assertion(fn, msg).to.not.Throw(type);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        throw new Error('Invalid operator \"' + operator + '\"');\n    }\n    var test = new Assertion(ok, msg);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg).to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members.\n   * Order is not taken into account.\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg).to.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members - using a deep equality checking.\n   * Order is not taken into account.\n   *\n   *     assert.sameDeepMembers([ {b: 3}, {a: 2}, {c: 5} ], [ {c: 5}, {b: 3}, {a: 2} ], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg).to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset`.\n   * Order is not taken into account.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg).to.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` - using deep equality checking.\n   * Order is not taken into account.\n   * Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ {a: 1}, {b: 2}, {c: 3} ], [ {b: 2}, {a: 1}, {b: 2} ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg).to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg).to.be.oneOf(list);\n  }\n\n   /**\n   * ### .changes(function, object, property)\n   *\n   * Asserts that a function changes the value of a property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop) {\n    new Assertion(fn).to.change(obj, prop);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property)\n   *\n   * Asserts that a function does not changes the value of a property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop) {\n    new Assertion(fn).to.not.change(obj, prop);\n  }\n\n   /**\n   * ### .increases(function, object, property)\n   *\n   * Asserts that a function increases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop) {\n    new Assertion(fn).to.increase(obj, prop);\n  }\n\n   /**\n   * ### .doesNotIncrease(function, object, property)\n   *\n   * Asserts that a function does not increase object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop) {\n    new Assertion(fn).to.not.increase(obj, prop);\n  }\n\n   /**\n   * ### .decreases(function, object, property)\n   *\n   * Asserts that a function decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop) {\n    new Assertion(fn).to.decrease(obj, prop);\n  }\n\n   /**\n   * ### .doesNotDecrease(function, object, property)\n   *\n   * Asserts that a function does not decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop) {\n    new Assertion(fn).to.not.decrease(obj, prop);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freese({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.frozen;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen');\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Expect\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String || this instanceof Number || this instanceof Boolean ) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace Should\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n","/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar transferFlags = require('./transferFlags');\nvar flag = require('./flag');\nvar config = require('../config');\n\n/*!\n * Module variables\n */\n\n// Check whether `__proto__` is supported\nvar hasProtoSupport = '__proto__' in Object;\n\n// Without `__proto__` support, this module will need to add properties to a function.\n// However, some Function.prototype methods cannot be overwritten,\n// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).\nvar excludeNames = /^(?:length|name|arguments|caller)$/;\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### addChainableMethod (ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var assert = function assert() {\n          var old_ssfi = flag(this, 'ssfi');\n          if (old_ssfi && config.includeStack === false)\n            flag(this, 'ssfi', assert);\n          var result = chainableBehavior.method.apply(this, arguments);\n          return result === undefined ? this : result;\n        };\n\n        // Use `__proto__` if available\n        if (hasProtoSupport) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = assert.__proto__ = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (!excludeNames.test(asserterName)) {\n              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n              Object.defineProperty(assert, asserterName, pd);\n            }\n          });\n        }\n\n        transferFlags(this, assert);\n        return assert;\n      }\n    , configurable: true\n  });\n};\n","/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('../config');\n\n/**\n * ### .addMethod (ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\nvar flag = require('./flag');\n\nmodule.exports = function (ctx, name, method) {\n  ctx[name] = function () {\n    var old_ssfi = flag(this, 'ssfi');\n    if (old_ssfi && config.includeStack === false)\n      flag(this, 'ssfi', ctx[name]);\n    var result = method.apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n","/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('../config');\nvar flag = require('./flag');\n\n/**\n * ### addProperty (ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function (ctx, name, getter) {\n  Object.defineProperty(ctx, name,\n    { get: function addProperty() {\n        var old_ssfi = flag(this, 'ssfi');\n        if (old_ssfi && config.includeStack === false)\n          flag(this, 'ssfi', addProperty);\n\n        var result = getter.call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n","/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = require('assertion-error');\nvar flag = require('./flag');\nvar type = require('type-detect');\n\nmodule.exports = function (obj, types) {\n  var obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lirum, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  if (!types.some(function (expected) { return type(obj) === expected; })) {\n    throw new AssertionError(\n      'object tested must be ' + str + ', but ' + type(obj) + ' given'\n    );\n  }\n};\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function (obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n","/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * # getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function (obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n","/*!\n * Chai - getEnumerableProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getEnumerableProperties(object)\n *\n * This allows the retrieval of enumerable property names of an object,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getEnumerableProperties(object) {\n  var result = [];\n  for (var name in object) {\n    result.push(name);\n  }\n  return result;\n};\n","/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , inspect = require('./inspect')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n","/*!\n * Chai - getName utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * # getName(func)\n *\n * Gets the name of a function, in a cross-browser way.\n *\n * @param {Function} a function (usually a constructor)\n * @namespace Utils\n * @name getName\n */\n\nmodule.exports = function (func) {\n  if (func.name) return func.name;\n\n  var match = /^\\s?function ([^(]*)\\(/.exec(func);\n  return match && match[1] ? match[1] : \"\";\n};\n","/*!\n * Chai - getPathInfo utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar hasProperty = require('./hasProperty');\n\n/**\n * ### .getPathInfo(path, object)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {String} path\n * @param {Object} object\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nmodule.exports = function getPathInfo(path, obj) {\n  var parsed = parsePath(path),\n      last = parsed[parsed.length - 1];\n\n  var info = {\n    parent: parsed.length > 1 ? _getPathValue(parsed, obj, parsed.length - 1) : obj,\n    name: last.p || last.i,\n    value: _getPathValue(parsed, obj)\n  };\n  info.exists = hasProperty(info.name, info.parent);\n\n  return info;\n};\n\n\n/*!\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `_getPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be as near infinitely deep and nested\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath (path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[')\n    , parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function (value) {\n    var re = /^\\[(\\d+)\\]$/\n      , mArr = re.exec(value);\n    if (mArr) return { i: parseFloat(mArr[1]) };\n    else return { p: value.replace(/\\\\([.\\[\\]])/g, '$1') };\n  });\n}\n\n\n/*!\n * ## _getPathValue(parsed, obj)\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(parsed, obj);\n *\n * @param {Object} parsed definition from `parsePath`.\n * @param {Object} object to search against\n * @param {Number} object to search against\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction _getPathValue (parsed, obj, index) {\n  var tmp = obj\n    , res;\n\n  index = (index === undefined ? parsed.length : index);\n\n  for (var i = 0, l = index; i < l; i++) {\n    var part = parsed[i];\n    if (tmp) {\n      if ('undefined' !== typeof part.p)\n        tmp = tmp[part.p];\n      else if ('undefined' !== typeof part.i)\n        tmp = tmp[part.i];\n      if (i == (l - 1)) res = tmp;\n    } else {\n      res = undefined;\n    }\n  }\n  return res;\n}\n","/*!\n * Chai - getPathValue utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\nvar getPathInfo = require('./getPathInfo');\n\n/**\n * ### .getPathValue(path, object)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue('prop1.str', obj); // Hello\n *     getPathValue('prop1.att[2]', obj); // b\n *     getPathValue('prop2.arr[0].nested', obj); // Universe\n *\n * @param {String} path\n * @param {Object} object\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\nmodule.exports = function(path, obj) {\n  var info = getPathInfo(path, obj);\n  return info.value;\n};\n","/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n","/*!\n * Chai - hasProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = require('type-detect');\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has\n * named property or numeric array index.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with natives\n * and null/undefined values.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty('str', obj);  // true\n *     hasProperty('constructor', obj);  // true\n *     hasProperty('bar', obj);  // false\n *\n *     hasProperty('length', obj.str); // true\n *     hasProperty(1, obj.str);  // true\n *     hasProperty(5, obj.str);  // false\n *\n *     hasProperty('length', obj.arr);  // true\n *     hasProperty(2, obj.arr);  // true\n *     hasProperty(3, obj.arr);  // false\n *\n * @param {Objuect} object\n * @param {String|Number} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nvar literals = {\n    'number': Number\n  , 'string': String\n};\n\nmodule.exports = function hasProperty(name, obj) {\n  var ot = type(obj);\n\n  // Bad Object, obviously no props at all\n  if(ot === 'null' || ot === 'undefined')\n    return false;\n\n  // The `in` operator does not work with certain literals\n  // box these before the check\n  if(literals[ot] && typeof obj !== 'object')\n    obj = new literals[ot](obj);\n\n  return name in obj;\n};\n","/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Main exports\n */\n\nvar exports = module.exports = {};\n\n/*!\n * test utility\n */\n\nexports.test = require('./test');\n\n/*!\n * type utility\n */\n\nexports.type = require('type-detect');\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = require('./expectTypes');\n\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n\n/*!\n * Deep path value\n */\n\nexports.getPathValue = require('./getPathValue');\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = require('./getPathInfo');\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = require('./hasProperty');\n\n/*!\n * Function name\n */\n\nexports.getName = require('./getName');\n\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n","// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('./getName');\nvar getProperties = require('./getProperties');\nvar getEnumerableProperties = require('./getEnumerableProperties');\n\nmodule.exports = inspect;\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: function (str) { return str; }\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\n\n// Returns true if object is a DOM element.\nvar isDOMElement = function (object) {\n  if (typeof HTMLElement === 'object') {\n    return object instanceof HTMLElement;\n  } else {\n    return object &&\n      typeof object === 'object' &&\n      object.nodeType === 1 &&\n      typeof object.nodeName === 'string';\n  }\n};\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes);\n    if (typeof ret !== 'string') {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // If this is a DOM element, try to get the outer HTML.\n  if (isDOMElement(value)) {\n    if ('outerHTML' in value) {\n      return value.outerHTML;\n      // This value does not have an outerHTML attribute,\n      //   it could still be an XML element\n    } else {\n      // Attempt to serialize it\n      try {\n        if (document.xmlVersion) {\n          var xmlSerializer = new XMLSerializer();\n          return xmlSerializer.serializeToString(value);\n        } else {\n          // Firefox 11- do not support outerHTML\n          //   It does, however, support innerHTML\n          //   Use the following to render the element\n          var ns = \"http://www.w3.org/1999/xhtml\";\n          var container = document.createElementNS(ns, '_');\n\n          container.appendChild(value.cloneNode(false));\n          html = container.innerHTML\n            .replace('><', '>' + value.innerHTML + '<');\n          container.innerHTML = '';\n          return html;\n        }\n      } catch (err) {\n        // This could be a non-native DOM implementation,\n        //   continue with the normal flow:\n        //   printing the element as if it is an object.\n      }\n    }\n  }\n\n  // Look up the keys of the object.\n  var visibleKeys = getEnumerableProperties(value);\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\n  // Some type of object without properties can be shortcutted.\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n  // a `stack` plus `description` property; ignore those for consistency.\n  if (keys.length === 0 || (isError(value) && (\n      (keys.length === 1 && keys[0] === 'stack') ||\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n     ))) {\n    if (typeof value === 'function') {\n      var name = getName(value);\n      var nameSuffix = name ? ': ' + name : '';\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    var name = getName(value);\n    var nameSuffix = name ? ': ' + name : '';\n    base = ' [Function' + nameSuffix + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    return formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      if (value === 0 && (1/value) === -Infinity) {\n        return ctx.stylize('-0', 'number');\n      }\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str;\n  if (value.__lookupGetter__) {\n    if (value.__lookupGetter__(key)) {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n}\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay (object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function (obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n","/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteChainableMethod (ctx, name, method, chainingBehavior)\n *\n * Overwites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.length(3);\n *     expect(myFoo).to.have.length.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function () {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    return result === undefined ? this : result;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function () {\n    var result = method(_method).apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n","/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteMethod (ctx, name, fn)\n *\n * Overwites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () { return this; };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  ctx[name] = function () {\n    var result = method(_super).apply(this, arguments);\n    return result === undefined ? this : result;\n  }\n};\n","/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteProperty (ctx, name, fn)\n *\n * Overwites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function (ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        var result = getter(_super).call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n","/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = require('./flag');\n\n/**\n * # test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n","/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, and `message`)\n * will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAsseriton = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function (assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n","module.exports = require('./lib/eql');\n","/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar type = require('type-detect');\n\n/*!\n * Buffer.isBuffer browser shim\n */\n\nvar Buffer;\ntry { Buffer = require('buffer').Buffer; }\ncatch(ex) {\n  Buffer = {};\n  Buffer.isBuffer = function() { return false; }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\n\n/**\n * Assert super-strict (egal) equality between\n * two objects of any type.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @param {Array} memoised (optional)\n * @return {Boolean} equal match\n */\n\nfunction deepEqual(a, b, m) {\n  if (sameValue(a, b)) {\n    return true;\n  } else if ('date' === type(a)) {\n    return dateEqual(a, b);\n  } else if ('regexp' === type(a)) {\n    return regexpEqual(a, b);\n  } else if (Buffer.isBuffer(a)) {\n    return bufferEqual(a, b);\n  } else if ('arguments' === type(a)) {\n    return argumentsEqual(a, b, m);\n  } else if (!typeEqual(a, b)) {\n    return false;\n  } else if (('object' !== type(a) && 'object' !== type(b))\n  && ('array' !== type(a) && 'array' !== type(b))) {\n    return sameValue(a, b);\n  } else {\n    return objectEqual(a, b, m);\n  }\n}\n\n/*!\n * Strict (egal) equality test. Ensures that NaN always\n * equals NaN and `-0` does not equal `+0`.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} equal match\n */\n\nfunction sameValue(a, b) {\n  if (a === b) return a !== 0 || 1 / a === 1 / b;\n  return a !== a && b !== b;\n}\n\n/*!\n * Compare the types of two given objects and\n * return if they are equal. Note that an Array\n * has a type of `array` (not `object`) and arguments\n * have a type of `arguments` (not `array`/`object`).\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction typeEqual(a, b) {\n  return type(a) === type(b);\n}\n\n/*!\n * Compare two Date objects by asserting that\n * the time values are equal using `saveValue`.\n *\n * @param {Date} a\n * @param {Date} b\n * @return {Boolean} result\n */\n\nfunction dateEqual(a, b) {\n  if ('date' !== type(b)) return false;\n  return sameValue(a.getTime(), b.getTime());\n}\n\n/*!\n * Compare two regular expressions by converting them\n * to string and checking for `sameValue`.\n *\n * @param {RegExp} a\n * @param {RegExp} b\n * @return {Boolean} result\n */\n\nfunction regexpEqual(a, b) {\n  if ('regexp' !== type(b)) return false;\n  return sameValue(a.toString(), b.toString());\n}\n\n/*!\n * Assert deep equality of two `arguments` objects.\n * Unfortunately, these must be sliced to arrays\n * prior to test to ensure no bad behavior.\n *\n * @param {Arguments} a\n * @param {Arguments} b\n * @param {Array} memoize (optional)\n * @return {Boolean} result\n */\n\nfunction argumentsEqual(a, b, m) {\n  if ('arguments' !== type(b)) return false;\n  a = [].slice.call(a);\n  b = [].slice.call(b);\n  return deepEqual(a, b, m);\n}\n\n/*!\n * Get enumerable properties of a given object.\n *\n * @param {Object} a\n * @return {Array} property names\n */\n\nfunction enumerable(a) {\n  var res = [];\n  for (var key in a) res.push(key);\n  return res;\n}\n\n/*!\n * Simple equality for flat iterable objects\n * such as Arrays or Node.js buffers.\n *\n * @param {Iterable} a\n * @param {Iterable} b\n * @return {Boolean} result\n */\n\nfunction iterableEqual(a, b) {\n  if (a.length !==  b.length) return false;\n\n  var i = 0;\n  var match = true;\n\n  for (; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      match = false;\n      break;\n    }\n  }\n\n  return match;\n}\n\n/*!\n * Extension to `iterableEqual` specifically\n * for Node.js Buffers.\n *\n * @param {Buffer} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction bufferEqual(a, b) {\n  if (!Buffer.isBuffer(b)) return false;\n  return iterableEqual(a, b);\n}\n\n/*!\n * Block for `objectEqual` ensuring non-existing\n * values don't get in.\n *\n * @param {Mixed} object\n * @return {Boolean} result\n */\n\nfunction isValue(a) {\n  return a !== null && a !== undefined;\n}\n\n/*!\n * Recursively check the equality of two objects.\n * Once basic sameness has been established it will\n * defer to `deepEqual` for each enumerable key\n * in the object.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction objectEqual(a, b, m) {\n  if (!isValue(a) || !isValue(b)) {\n    return false;\n  }\n\n  if (a.prototype !== b.prototype) {\n    return false;\n  }\n\n  var i;\n  if (m) {\n    for (i = 0; i < m.length; i++) {\n      if ((m[i][0] === a && m[i][1] === b)\n      ||  (m[i][0] === b && m[i][1] === a)) {\n        return true;\n      }\n    }\n  } else {\n    m = [];\n  }\n\n  try {\n    var ka = enumerable(a);\n    var kb = enumerable(b);\n  } catch (ex) {\n    return false;\n  }\n\n  ka.sort();\n  kb.sort();\n\n  if (!iterableEqual(ka, kb)) {\n    return false;\n  }\n\n  m.push([ a, b ]);\n\n  var key;\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], m)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","module.exports = require('./lib/type');\n","/*!\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Primary Exports\n */\n\nvar exports = module.exports = getType;\n\n/*!\n * Detectable javascript natives\n */\n\nvar natives = {\n    '[object Array]': 'array'\n  , '[object RegExp]': 'regexp'\n  , '[object Function]': 'function'\n  , '[object Arguments]': 'arguments'\n  , '[object Date]': 'date'\n};\n\n/**\n * ### typeOf (obj)\n *\n * Use several different techniques to determine\n * the type of object being tested.\n *\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\n\nfunction getType (obj) {\n  var str = Object.prototype.toString.call(obj);\n  if (natives[str]) return natives[str];\n  if (obj === null) return 'null';\n  if (obj === undefined) return 'undefined';\n  if (obj === Object(obj)) return 'object';\n  return typeof obj;\n}\n\nexports.Library = Library;\n\n/**\n * ### Library\n *\n * Create a repository for custom type detection.\n *\n * ```js\n * var lib = new type.Library;\n * ```\n *\n */\n\nfunction Library () {\n  this.tests = {};\n}\n\n/**\n * #### .of (obj)\n *\n * Expose replacement `typeof` detection to the library.\n *\n * ```js\n * if ('string' === lib.of('hello world')) {\n *   // ...\n * }\n * ```\n *\n * @param {Mixed} object to test\n * @return {String} type\n */\n\nLibrary.prototype.of = getType;\n\n/**\n * #### .define (type, test)\n *\n * Add a test to for the `.test()` assertion.\n *\n * Can be defined as a regular expression:\n *\n * ```js\n * lib.define('int', /^[0-9]+$/);\n * ```\n *\n * ... or as a function:\n *\n * ```js\n * lib.define('bln', function (obj) {\n *   if ('boolean' === lib.of(obj)) return true;\n *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n *   return !! ~blns.indexOf(obj);\n * });\n * ```\n *\n * @param {String} type\n * @param {RegExp|Function} test\n * @api public\n */\n\nLibrary.prototype.define = function (type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};\n\n/**\n * #### .test (obj, test)\n *\n * Assert that an object is of type. Will first\n * check natives, and if that does not pass it will\n * use the user defined custom tests.\n *\n * ```js\n * assert(lib.test('1', 'int'));\n * assert(lib.test('yes', 'bln'));\n * ```\n *\n * @param {Mixed} object\n * @param {String} type\n * @return {Boolean} result\n * @api public\n */\n\nLibrary.prototype.test = function (obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n","module.exports = hoist\n\nfunction hoist(ast){\n\n  var parentStack = []\n  var variables = []\n  var functions = []\n\n  if (Array.isArray(ast)){\n\n    walkAll(ast)\n    prependScope(ast, variables, functions)\n    \n  } else {\n    walk(ast)\n  }\n\n  return ast\n\n  // walk through each node of a program of block statement\n  function walkAll(nodes){\n    var result = null\n    for (var i=0;i<nodes.length;i++){\n      var childNode = nodes[i]\n      if (childNode.type === 'EmptyStatement') continue\n      var result = walk(childNode)\n      if (result === 'remove'){\n        nodes.splice(i--, 1)\n      }\n    }\n  }\n\n  function walk(node){\n    var parent = parentStack[parentStack.length-1]\n    var remove = false\n    parentStack.push(node)\n\n    var excludeBody = false\n    if (shouldScope(node, parent)){\n      hoist(node.body)\n      excludeBody = true\n    }\n\n    if (node.type === 'VariableDeclarator'){\n      variables.push(node)\n    }\n\n    if (node.type === 'FunctionDeclaration'){\n      functions.push(node)\n      remove = true\n    }\n\n    for (var key in node){\n      if (key === 'type' || (excludeBody && key === 'body')) continue\n      if (key in node && node[key] && typeof node[key] == 'object'){\n        if (node[key].type){\n          walk(node[key])\n        } else if (Array.isArray(node[key])){\n          walkAll(node[key])\n        }\n      }\n    }\n\n    parentStack.pop()\n    if (remove){\n      return 'remove'\n    }\n  }\n}\n\nfunction shouldScope(node, parent){\n  if (node.type === 'Program'){\n    return true\n  } else if (node.type === 'BlockStatement'){\n    if (parent && (parent.type === 'FunctionExpression' || parent.type === 'FunctionDeclaration')){\n      return true\n    }\n  }\n}\n\nfunction prependScope(nodes, variables, functions){\n  if (variables && variables.length){\n    var declarations = []\n    for (var i=0;i<variables.length;i++){\n      declarations.push({\n        type: 'VariableDeclarator', \n        id: variables[i].id,\n        init: null\n      })\n    }\n    \n    nodes.unshift({\n      type: 'VariableDeclaration', \n      kind: 'var', \n      declarations: declarations\n    })\n\n  }\n\n  if (functions && functions.length){\n    for (var i=0;i<functions.length;i++){\n      nodes.unshift(functions[i]) \n    }\n  }\n}","var parse = require('esprima').parse\nvar hoist = require('hoister')\n\nvar InfiniteChecker = require('./lib/infinite-checker')\nvar Primitives = require('./lib/primitives')\n\nmodule.exports = safeEval\nmodule.exports.eval = safeEval\nmodule.exports.FunctionFactory = FunctionFactory\nmodule.exports.Function = FunctionFactory()\n\nvar maxIterations = 1000000\n\n// 'eval' with a controlled environment\nfunction safeEval(src, parentContext){\n  var tree = prepareAst(src)\n  var context = Object.create(parentContext || {})\n  return finalValue(evaluateAst(tree, context))\n}\n\n// create a 'Function' constructor for a controlled environment\nfunction FunctionFactory(parentContext){\n  var context = Object.create(parentContext || {})\n  return function Function() {\n    // normalize arguments array\n    var args = Array.prototype.slice.call(arguments)\n    var src = args.slice(-1)[0]\n    args = args.slice(0,-1)\n    if (typeof src === 'string'){\n      //HACK: esprima doesn't like returns outside functions\n      src = parse('function a(){' + src + '}').body[0].body\n    }\n    var tree = prepareAst(src)\n    return getFunction(tree, args, context)\n  }\n}\n\n// takes an AST or js source and returns an AST\nfunction prepareAst(src){\n  var tree = (typeof src === 'string') ? parse(src) : src\n  return hoist(tree)\n}\n\n// evaluate an AST in the given context\nfunction evaluateAst(tree, context){\n\n  var safeFunction = FunctionFactory(context)\n  var primitives = Primitives(context)\n\n  // block scoped context for catch (ex) and 'let'\n  var blockContext = context\n\n  return walk(tree)\n\n  // recursively walk every node in an array\n  function walkAll(nodes){\n    var result = undefined\n    for (var i=0;i<nodes.length;i++){\n      var childNode = nodes[i]\n      if (childNode.type === 'EmptyStatement') continue\n      result = walk(childNode)\n      if (result instanceof ReturnValue){\n        return result\n      }\n    }\n    return result\n  }\n\n  // recursively evalutate the node of an AST\n  function walk(node){\n    if (!node) return\n    switch (node.type) {\n\n      case 'Program':\n        return walkAll(node.body)\n\n      case 'BlockStatement':\n        enterBlock()\n        var result = walkAll(node.body)\n        leaveBlock()\n        return result\n\n      case 'FunctionDeclaration':\n        var params = node.params.map(getName)\n        var value = getFunction(node.body, params, blockContext)\n        return context[node.id.name] = value\n\n      case 'FunctionExpression':\n        var params = node.params.map(getName)\n        return getFunction(node.body, params, blockContext)\n\n      case 'ReturnStatement':\n        var value = walk(node.argument)\n        return new ReturnValue('return', value)\n\n      case 'BreakStatement':\n        return new ReturnValue('break')\n\n      case 'ContinueStatement':\n        return new ReturnValue('continue')\n\n      case 'ExpressionStatement':\n        return walk(node.expression)\n\n      case 'AssignmentExpression':\n        return setValue(blockContext, node.left, node.right, node.operator)\n\n      case 'UpdateExpression':\n        return setValue(blockContext, node.argument, null, node.operator)\n\n      case 'VariableDeclaration':\n        node.declarations.forEach(function(declaration){\n          var target = node.kind === 'let' ? blockContext : context\n          if (declaration.init){\n            target[declaration.id.name] = walk(declaration.init)\n          } else {\n            target[declaration.id.name] = undefined\n          }\n        })\n        break\n\n      case 'SwitchStatement':\n        var defaultHandler = null\n        var matched = false\n        var value = walk(node.discriminant)\n        var result = undefined\n\n        enterBlock()\n\n        var i = 0\n        while (result == null){\n          if (i<node.cases.length){\n            if (node.cases[i].test){ // check or fall through\n              matched = matched || (walk(node.cases[i].test) === value)\n            } else if (defaultHandler == null) {\n              defaultHandler = i\n            }\n            if (matched){\n              var r = walkAll(node.cases[i].consequent)\n              if (r instanceof ReturnValue){ // break out\n                if (r.type == 'break') break\n                result = r\n              }\n            }\n            i += 1 // continue\n          } else if (!matched && defaultHandler != null){\n            // go back and do the default handler\n            i = defaultHandler\n            matched = true\n          } else {\n            // nothing we can do\n            break\n          }\n        }\n\n        leaveBlock()\n        return result\n\n      case 'IfStatement':\n        if (walk(node.test)){\n          return walk(node.consequent)\n        } else if (node.alternate) {\n          return walk(node.alternate)\n        }\n\n      case 'ForStatement':\n        var infinite = InfiniteChecker(maxIterations)\n        var result = undefined\n\n        enterBlock() // allow lets on delarations\n        for (walk(node.init); walk(node.test); walk(node.update)){\n          var r = walk(node.body)\n\n          // handle early return, continue and break\n          if (r instanceof ReturnValue){\n            if (r.type == 'continue') continue\n            if (r.type == 'break') break\n            result = r\n            break\n          }\n\n          infinite.check()\n        }\n        leaveBlock()\n        return result\n\n      case 'ForInStatement':\n        var infinite = InfiniteChecker(maxIterations)\n        var result = undefined\n\n        var value = walk(node.right)\n        var property = node.left\n\n        var target = context\n        enterBlock()\n\n        if (property.type == 'VariableDeclaration'){\n          walk(property)\n          property = property.declarations[0].id\n          if (property.kind === 'let'){\n            target = blockContext\n          }\n        }\n\n        for (var key in value){\n          setValue(target, property, {type: 'Literal', value: key})\n          var r = walk(node.body)\n\n          // handle early return, continue and break\n          if (r instanceof ReturnValue){\n            if (r.type == 'continue') continue\n            if (r.type == 'break') break\n            result = r\n            break\n          }\n\n          infinite.check()\n        }\n        leaveBlock()\n\n        return result\n\n      case 'WhileStatement':\n        var infinite = InfiniteChecker(maxIterations)\n        while (walk(node.test)){\n          walk(node.body)\n          infinite.check()\n        }\n        break\n\n      case 'TryStatement':\n        try {\n          walk(node.block)\n        } catch (error) {\n          enterBlock()\n          var catchClause = node.handlers[0]\n          if (catchClause) {\n            blockContext[catchClause.param.name] = error\n            walk(catchClause.body)\n          }\n          leaveBlock()\n        } finally {\n          if (node.finalizer) {\n            walk(node.finalizer)\n          }\n        }\n        break\n\n      case 'Literal':\n        return node.value\n\n      case 'UnaryExpression':\n        if (node.operator === 'delete' && node.argument.type === 'MemberExpression') {\n          var arg = node.argument\n          var parent = walk(arg.object)\n          var prop = arg.computed ? walk(arg.property) : arg.property.name\n          delete parent[prop]\n          return true\n        } else {\n          var val = walk(node.argument)\n          switch(node.operator) {\n            case '+': return +val\n            case '-': return -val\n            case '~': return ~val\n            case '!': return !val\n            case 'typeof': return typeof val\n            default: return unsupportedExpression(node)\n          }\n        }\n\n      case 'ArrayExpression':\n        var obj = blockContext['Array']()\n        for (var i=0;i<node.elements.length;i++){\n          obj.push(walk(node.elements[i]))\n        }\n        return obj\n\n      case 'ObjectExpression':\n        var obj = blockContext['Object']()\n        for (var i = 0; i < node.properties.length; i++) {\n          var prop = node.properties[i]\n          var value = (prop.value === null) ? prop.value : walk(prop.value)\n          obj[prop.key.value || prop.key.name] = value\n        }\n        return obj\n\n      case 'NewExpression':\n        var args = node.arguments.map(function(arg){\n          return walk(arg)\n        })\n        var target = walk(node.callee)\n        return primitives.applyNew(target, args)\n\n\n      case 'BinaryExpression':\n        var l = walk(node.left)\n        var r = walk(node.right)\n        switch(node.operator) {\n          case '==':  return l === r\n          case '===': return l === r\n          case '!=':  return l != r\n          case '!==': return l !== r\n          case '+':   return l + r\n          case '-':   return l - r\n          case '*':   return l * r\n          case '/':   return l / r\n          case '%':   return l % r\n          case '<':   return l < r\n          case '<=':  return l <= r\n          case '>':   return l > r\n          case '>=':  return l >= r\n          case '|':   return l | r\n          case '&':   return l & r\n          case '^':   return l ^ r\n          case 'instanceof': return l instanceof r\n          default: return unsupportedExpression(node)\n        }\n\n      case 'LogicalExpression':\n        switch(node.operator) {\n          case '&&':  return walk(node.left) && walk(node.right)\n          case '||':  return walk(node.left) || walk(node.right)\n          default: return unsupportedExpression(node)\n        }\n\n      case 'ThisExpression':\n        return blockContext['this']\n\n      case 'Identifier':\n        if (node.name === 'undefined'){\n          return undefined\n        } else if (hasProperty(blockContext, node.name, primitives)){\n          return finalValue(blockContext[node.name])\n        } else {\n          throw new ReferenceError(node.name + ' is not defined')\n        }\n\n      case 'CallExpression':\n        var args = node.arguments.map(function(arg){\n          return walk(arg)\n        })\n        var object = null\n        var target = walk(node.callee)\n\n        if (node.callee.type === 'MemberExpression'){\n          object = walk(node.callee.object)\n        }\n        return target.apply(object, args)\n\n      case 'MemberExpression':\n        var obj = walk(node.object)\n        if (node.computed){\n          var prop = walk(node.property)\n        } else {\n          var prop = node.property.name\n        }\n        obj = primitives.getPropertyObject(obj, prop)\n        return checkValue(obj[prop]);\n\n      case 'ConditionalExpression':\n        var val = walk(node.test)\n        return val ? walk(node.consequent) : walk(node.alternate)\n\n      case 'EmptyStatement':\n        return\n\n      default:\n        return unsupportedExpression(node)\n    }\n  }\n\n  // safely retrieve a value\n  function checkValue(value){\n    if (value === Function){\n      value = safeFunction\n    }\n    return finalValue(value)\n  }\n\n  // block scope context control\n  function enterBlock(){\n    blockContext = Object.create(blockContext)\n  }\n  function leaveBlock(){\n    blockContext = Object.getPrototypeOf(blockContext)\n  }\n\n  // set a value in the specified context if allowed\n  function setValue(object, left, right, operator){\n    var name = null\n\n    if (left.type === 'Identifier'){\n      name = left.name\n      // handle parent context shadowing\n      object = objectForKey(object, name, primitives)\n    } else if (left.type === 'MemberExpression'){\n      if (left.computed){\n        name = walk(left.property)\n      } else {\n        name = left.property.name\n      }\n      object = walk(left.object)\n    }\n\n    // stop built in properties from being able to be changed\n    if (canSetProperty(object, name, primitives)){\n      switch(operator) {\n        case undefined: return object[name] = walk(right)\n        case '=':  return object[name] = walk(right)\n        case '+=': return object[name] += walk(right)\n        case '-=': return object[name] -= walk(right)\n        case '++': return object[name]++\n        case '--': return object[name]--\n      }\n    }\n\n  }\n\n}\n\n// when an unsupported expression is encountered, throw an error\nfunction unsupportedExpression(node){\n  console.error(node)\n  var err = new Error('Unsupported expression: ' + node.type)\n  err.node = node\n  throw err\n}\n\n// walk a provided object's prototypal hierarchy to retrieve an inherited object\nfunction objectForKey(object, key, primitives){\n  var proto = primitives.getPrototypeOf(object)\n  if (!proto || hasOwnProperty(object, key)){\n    return object\n  } else {\n    return objectForKey(proto, key, primitives)\n  }\n}\n\nfunction hasProperty(object, key, primitives){\n  var proto = primitives.getPrototypeOf(object)\n  var hasOwn = hasOwnProperty(object, key)\n  if (object[key] !== undefined){\n    return true\n  } else if (!proto || hasOwn){\n    return hasOwn\n  } else {\n    return hasProperty(proto, key, primitives)\n  }\n}\n\nfunction hasOwnProperty(object, key){\n  return Object.prototype.hasOwnProperty.call(object, key)\n}\n\nfunction propertyIsEnumerable(object, key){\n  return Object.prototype.propertyIsEnumerable.call(object, key)\n}\n\n\n// determine if we have write access to a property\nfunction canSetProperty(object, property, primitives){\n  if (property === '__proto__' || primitives.isPrimitive(object)){\n    return false\n  } else if (object != null){\n\n    if (hasOwnProperty(object, property)){\n      if (propertyIsEnumerable(object, property)){\n        return true\n      } else {\n        return false\n      }\n    } else {\n      return canSetProperty(primitives.getPrototypeOf(object), property, primitives)\n    }\n\n  } else {\n    return true\n  }\n}\n\n// generate a function with specified context\nfunction getFunction(body, params, parentContext){\n  return function(){\n    var context = Object.create(parentContext)\n    if (this == global){\n      context['this'] = null\n    } else {\n      context['this'] = this\n    }\n    // normalize arguments array\n    var args = Array.prototype.slice.call(arguments)\n    context['arguments'] = arguments\n    args.forEach(function(arg,idx){\n      var param = params[idx]\n      if (param){\n        context[param] = arg\n      }\n    })\n    var result = evaluateAst(body, context)\n\n    if (result instanceof ReturnValue){\n      return result.value\n    }\n  }\n}\n\nfunction finalValue(value){\n  if (value instanceof ReturnValue){\n    return value.value\n  }\n  return value\n}\n\n// get the name of an identifier\nfunction getName(identifier){\n  return identifier.name\n}\n\n// a ReturnValue struct for differentiating between expression result and return statement\nfunction ReturnValue(type, value){\n  this.type = type\n  this.value = value\n}\n","module.exports = InfiniteChecker\n\nfunction InfiniteChecker(maxIterations){\n  if (this instanceof InfiniteChecker){\n    this.maxIterations = maxIterations\n    this.count = 0\n  } else {\n    return new InfiniteChecker(maxIterations)\n  }\n}\n\nInfiniteChecker.prototype.check = function(){\n  this.count += 1\n  if (this.count > this.maxIterations){\n    throw new Error('Infinite loop detected - reached max iterations')\n  }\n}","var names = ['Object', 'String', 'Boolean', 'Number', 'RegExp', 'Date', 'Array']\nvar immutable = {string: 'String', boolean: 'Boolean', number: 'Number' }\n\nvar primitives = names.map(getGlobal)\nvar protos = primitives.map(getProto)\n\nvar protoReplacements = {}\n\nmodule.exports = Primitives\n\nfunction Primitives(context){\n  if (this instanceof Primitives){\n    this.context = context\n    for (var i=0;i<names.length;i++){\n      if (!this.context[names[i]]){\n        this.context[names[i]] = wrap(primitives[i])\n      }\n    }\n  } else {\n    return new Primitives(context)\n  }\n}\n\nPrimitives.prototype.replace = function(value){\n  var primIndex = primitives.indexOf(value)\n  var protoIndex = protos.indexOf(value)\n\n  if (~primIndex){\n    var name = names[primIndex]\n    return this.context[name]\n  } else if (~protoIndex) {\n    var name = names[protoIndex]\n    return this.context[name].prototype\n  } else  {\n    return value\n  }\n}\n\nPrimitives.prototype.getPropertyObject = function(object, property){\n  if (immutable[typeof object]){\n    return this.getPrototypeOf(object)\n  }\n  return object\n}\n\nPrimitives.prototype.isPrimitive = function(value){\n  return !!~primitives.indexOf(value) || !!~protos.indexOf(value)\n}\n\nPrimitives.prototype.getPrototypeOf = function(value){\n  if (value == null){ // handle null and undefined\n    return value\n  }\n\n  var immutableType = immutable[typeof value]\n  if (immutableType){\n    var proto = this.context[immutableType].prototype\n  } else {\n    var proto = Object.getPrototypeOf(value)\n  }\n\n  if (!proto || proto === Object.prototype){\n    return null\n  } else {\n    var replacement = this.replace(proto)\n    if (replacement === value){\n      replacement = this.replace(Object.prototype)\n    }\n    return replacement\n  }\n}\n\nPrimitives.prototype.applyNew = function(func, args){\n  if (func.wrapped){\n    var prim = Object.getPrototypeOf(func)\n    var instance = new (Function.prototype.bind.apply(prim, arguments))\n    setProto(instance, func.prototype)\n    return instance\n  } else {\n    return new (Function.prototype.bind.apply(func, arguments))\n  }\n}\n\nfunction getProto(func){\n  return func.prototype\n}\n\nfunction getGlobal(str){\n  return global[str]\n}\n\nfunction setProto(obj, proto){\n  obj.__proto__ = proto\n}\n\nfunction wrap(prim){\n  var proto = Object.create(prim.prototype)\n\n  var result = function() {\n    if (this instanceof result){\n      prim.apply(this, arguments)\n    } else {\n      var instance = prim.apply(null, arguments)\n      setProto(instance, proto)\n      return instance\n    }\n  }\n  setProto(result, prim)\n  result.prototype = proto\n  result.wrapped = true\n  return result\n}","/*\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint bitwise:true plusplus:true */\n/*global esprima:true, define:true, exports:true, window: true,\nthrowError: true, createLiteral: true, generateStatement: true,\nparseAssignmentExpression: true, parseBlock: true, parseExpression: true,\nparseFunctionDeclaration: true, parseFunctionExpression: true,\nparseFunctionSourceElements: true, parseVariableIdentifier: true,\nparseLeftHandSideExpression: true,\nparseStatement: true, parseSourceElement: true */\n\n(function (root, factory) {\n    'use strict';\n\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,\n    // Rhino, and plain browser loading.\n    if (typeof define === 'function' && define.amd) {\n        define(['exports'], factory);\n    } else if (typeof exports !== 'undefined') {\n        factory(exports);\n    } else {\n        factory((root.esprima = {}));\n    }\n}(this, function (exports) {\n    'use strict';\n\n    var Token,\n        TokenName,\n        Syntax,\n        PropertyKind,\n        Messages,\n        Regex,\n        source,\n        strict,\n        index,\n        lineNumber,\n        lineStart,\n        length,\n        buffer,\n        state,\n        extra;\n\n    Token = {\n        BooleanLiteral: 1,\n        EOF: 2,\n        Identifier: 3,\n        Keyword: 4,\n        NullLiteral: 5,\n        NumericLiteral: 6,\n        Punctuator: 7,\n        StringLiteral: 8\n    };\n\n    TokenName = {};\n    TokenName[Token.BooleanLiteral] = 'Boolean';\n    TokenName[Token.EOF] = '<end>';\n    TokenName[Token.Identifier] = 'Identifier';\n    TokenName[Token.Keyword] = 'Keyword';\n    TokenName[Token.NullLiteral] = 'Null';\n    TokenName[Token.NumericLiteral] = 'Numeric';\n    TokenName[Token.Punctuator] = 'Punctuator';\n    TokenName[Token.StringLiteral] = 'String';\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        ArrayExpression: 'ArrayExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        Program: 'Program',\n        Property: 'Property',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement'\n    };\n\n    PropertyKind = {\n        Data: 1,\n        Get: 2,\n        Set: 4\n    };\n\n    // Error messages should be identical to V8.\n    Messages = {\n        UnexpectedToken:  'Unexpected token %0',\n        UnexpectedNumber:  'Unexpected number',\n        UnexpectedString:  'Unexpected string',\n        UnexpectedIdentifier:  'Unexpected identifier',\n        UnexpectedReserved:  'Unexpected reserved word',\n        UnexpectedEOS:  'Unexpected end of input',\n        NewlineAfterThrow:  'Illegal newline after throw',\n        InvalidRegExp: 'Invalid regular expression',\n        UnterminatedRegExp:  'Invalid regular expression: missing /',\n        InvalidLHSInAssignment:  'Invalid left-hand side in assignment',\n        InvalidLHSInForIn:  'Invalid left-hand side in for-in',\n        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n        NoCatchOrFinally:  'Missing catch or finally after try',\n        UnknownLabel: 'Undefined label \\'%0\\'',\n        Redeclaration: '%0 \\'%1\\' has already been declared',\n        IllegalContinue: 'Illegal continue statement',\n        IllegalBreak: 'Illegal break statement',\n        IllegalReturn: 'Illegal return statement',\n        StrictModeWith:  'Strict mode code may not include a with statement',\n        StrictCatchVariable:  'Catch variable may not be eval or arguments in strict mode',\n        StrictVarName:  'Variable name may not be eval or arguments in strict mode',\n        StrictParamName:  'Parameter name eval or arguments is not allowed in strict mode',\n        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n        StrictFunctionName:  'Function name may not be eval or arguments in strict mode',\n        StrictOctalLiteral:  'Octal literals are not allowed in strict mode.',\n        StrictDelete:  'Delete of an unqualified identifier in strict mode.',\n        StrictDuplicateProperty:  'Duplicate data property in object literal not allowed in strict mode',\n        AccessorDataProperty:  'Object literal may not have data and accessor property with the same name',\n        AccessorGetSet:  'Object literal may not have multiple get/set accessors with the same name',\n        StrictLHSAssignment:  'Assignment to eval or arguments is not allowed in strict mode',\n        StrictLHSPostfix:  'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictLHSPrefix:  'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictReservedWord:  'Use of future reserved word in strict mode'\n    };\n\n    // See also tools/generate-unicode-regex.py.\n    Regex = {\n        NonAsciiIdentifierStart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]'),\n        NonAsciiIdentifierPart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0300-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u0483-\\u0487\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0610-\\u061a\\u0620-\\u0669\\u066e-\\u06d3\\u06d5-\\u06dc\\u06df-\\u06e8\\u06ea-\\u06fc\\u06ff\\u0710-\\u074a\\u074d-\\u07b1\\u07c0-\\u07f5\\u07fa\\u0800-\\u082d\\u0840-\\u085b\\u08a0\\u08a2-\\u08ac\\u08e4-\\u08fe\\u0900-\\u0963\\u0966-\\u096f\\u0971-\\u0977\\u0979-\\u097f\\u0981-\\u0983\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bc-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09ce\\u09d7\\u09dc\\u09dd\\u09df-\\u09e3\\u09e6-\\u09f1\\u0a01-\\u0a03\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a59-\\u0a5c\\u0a5e\\u0a66-\\u0a75\\u0a81-\\u0a83\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abc-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ad0\\u0ae0-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3c-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5c\\u0b5d\\u0b5f-\\u0b63\\u0b66-\\u0b6f\\u0b71\\u0b82\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd0\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c58\\u0c59\\u0c60-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbc-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0cde\\u0ce0-\\u0ce3\\u0ce6-\\u0cef\\u0cf1\\u0cf2\\u0d02\\u0d03\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4e\\u0d57\\u0d60-\\u0d63\\u0d66-\\u0d6f\\u0d7a-\\u0d7f\\u0d82\\u0d83\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e01-\\u0e3a\\u0e40-\\u0e4e\\u0e50-\\u0e59\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb9\\u0ebb-\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0edc-\\u0edf\\u0f00\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e-\\u0f47\\u0f49-\\u0f6c\\u0f71-\\u0f84\\u0f86-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1049\\u1050-\\u109d\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u135d-\\u135f\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176c\\u176e-\\u1770\\u1772\\u1773\\u1780-\\u17d3\\u17d7\\u17dc\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a1b\\u1a20-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1aa7\\u1b00-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1bf3\\u1c00-\\u1c37\\u1c40-\\u1c49\\u1c4d-\\u1c7d\\u1cd0-\\u1cd2\\u1cd4-\\u1cf6\\u1d00-\\u1de6\\u1dfc-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u200c\\u200d\\u203f\\u2040\\u2054\\u2071\\u207f\\u2090-\\u209c\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d7f-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2de0-\\u2dff\\u2e2f\\u3005-\\u3007\\u3021-\\u302f\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u3099\\u309a\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua62b\\ua640-\\ua66f\\ua674-\\ua67d\\ua67f-\\ua697\\ua69f-\\ua6f1\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua827\\ua840-\\ua873\\ua880-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f7\\ua8fb\\ua900-\\ua92d\\ua930-\\ua953\\ua960-\\ua97c\\ua980-\\ua9c0\\ua9cf-\\ua9d9\\uaa00-\\uaa36\\uaa40-\\uaa4d\\uaa50-\\uaa59\\uaa60-\\uaa76\\uaa7a\\uaa7b\\uaa80-\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaef\\uaaf2-\\uaaf6\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff10-\\uff19\\uff21-\\uff3a\\uff3f\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]')\n    };\n\n    // Ensure the condition is true, otherwise throw an error.\n    // This is only to have a better contract semantic, i.e. another safety net\n    // to catch a logic error. The condition shall be fulfilled in normal case.\n    // Do NOT use this to enforce a certain condition on any user input.\n\n    function assert(condition, message) {\n        if (!condition) {\n            throw new Error('ASSERT: ' + message);\n        }\n    }\n\n    function sliceSource(from, to) {\n        return source.slice(from, to);\n    }\n\n    if (typeof 'esprima'[0] === 'undefined') {\n        sliceSource = function sliceArraySource(from, to) {\n            return source.slice(from, to).join('');\n        };\n    }\n\n    function isDecimalDigit(ch) {\n        return '0123456789'.indexOf(ch) >= 0;\n    }\n\n    function isHexDigit(ch) {\n        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n    }\n\n    function isOctalDigit(ch) {\n        return '01234567'.indexOf(ch) >= 0;\n    }\n\n\n    // 7.2 White Space\n\n    function isWhiteSpace(ch) {\n        return (ch === ' ') || (ch === '\\u0009') || (ch === '\\u000B') ||\n            (ch === '\\u000C') || (ch === '\\u00A0') ||\n            (ch.charCodeAt(0) >= 0x1680 &&\n             '\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\uFEFF'.indexOf(ch) >= 0);\n    }\n\n    // 7.3 Line Terminators\n\n    function isLineTerminator(ch) {\n        return (ch === '\\n' || ch === '\\r' || ch === '\\u2028' || ch === '\\u2029');\n    }\n\n    // 7.6 Identifier Names and Identifiers\n\n    function isIdentifierStart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierStart.test(ch));\n    }\n\n    function isIdentifierPart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch >= '0') && (ch <= '9')) ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierPart.test(ch));\n    }\n\n    // 7.6.1.2 Future Reserved Words\n\n    function isFutureReservedWord(id) {\n        switch (id) {\n\n        // Future reserved words.\n        case 'class':\n        case 'enum':\n        case 'export':\n        case 'extends':\n        case 'import':\n        case 'super':\n            return true;\n        }\n\n        return false;\n    }\n\n    function isStrictModeReservedWord(id) {\n        switch (id) {\n\n        // Strict Mode reserved words.\n        case 'implements':\n        case 'interface':\n        case 'package':\n        case 'private':\n        case 'protected':\n        case 'public':\n        case 'static':\n        case 'yield':\n        case 'let':\n            return true;\n        }\n\n        return false;\n    }\n\n    function isRestrictedWord(id) {\n        return id === 'eval' || id === 'arguments';\n    }\n\n    // 7.6.1.1 Keywords\n\n    function isKeyword(id) {\n        var keyword = false;\n        switch (id.length) {\n        case 2:\n            keyword = (id === 'if') || (id === 'in') || (id === 'do');\n            break;\n        case 3:\n            keyword = (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');\n            break;\n        case 4:\n            keyword = (id === 'this') || (id === 'else') || (id === 'case') || (id === 'void') || (id === 'with');\n            break;\n        case 5:\n            keyword = (id === 'while') || (id === 'break') || (id === 'catch') || (id === 'throw');\n            break;\n        case 6:\n            keyword = (id === 'return') || (id === 'typeof') || (id === 'delete') || (id === 'switch');\n            break;\n        case 7:\n            keyword = (id === 'default') || (id === 'finally');\n            break;\n        case 8:\n            keyword = (id === 'function') || (id === 'continue') || (id === 'debugger');\n            break;\n        case 10:\n            keyword = (id === 'instanceof');\n            break;\n        }\n\n        if (keyword) {\n            return true;\n        }\n\n        switch (id) {\n        // Future reserved words.\n        // 'const' is specialized as Keyword in V8.\n        case 'const':\n            return true;\n\n        // For compatiblity to SpiderMonkey and ES.next\n        case 'yield':\n        case 'let':\n            return true;\n        }\n\n        if (strict && isStrictModeReservedWord(id)) {\n            return true;\n        }\n\n        return isFutureReservedWord(id);\n    }\n\n    // 7.4 Comments\n\n    function skipComment() {\n        var ch, blockComment, lineComment;\n\n        blockComment = false;\n        lineComment = false;\n\n        while (index < length) {\n            ch = source[index];\n\n            if (lineComment) {\n                ch = source[index++];\n                if (isLineTerminator(ch)) {\n                    lineComment = false;\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    lineStart = index;\n                }\n            } else if (blockComment) {\n                if (isLineTerminator(ch)) {\n                    if (ch === '\\r' && source[index + 1] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    ++index;\n                    lineStart = index;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    ch = source[index++];\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                    if (ch === '*') {\n                        ch = source[index];\n                        if (ch === '/') {\n                            ++index;\n                            blockComment = false;\n                        }\n                    }\n                }\n            } else if (ch === '/') {\n                ch = source[index + 1];\n                if (ch === '/') {\n                    index += 2;\n                    lineComment = true;\n                } else if (ch === '*') {\n                    index += 2;\n                    blockComment = true;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    break;\n                }\n            } else if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n            } else {\n                break;\n            }\n        }\n    }\n\n    function scanHexEscape(prefix) {\n        var i, len, ch, code = 0;\n\n        len = (prefix === 'u') ? 4 : 2;\n        for (i = 0; i < len; ++i) {\n            if (index < length && isHexDigit(source[index])) {\n                ch = source[index++];\n                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n            } else {\n                return '';\n            }\n        }\n        return String.fromCharCode(code);\n    }\n\n    function scanIdentifier() {\n        var ch, start, id, restore;\n\n        ch = source[index];\n        if (!isIdentifierStart(ch)) {\n            return;\n        }\n\n        start = index;\n        if (ch === '\\\\') {\n            ++index;\n            if (source[index] !== 'u') {\n                return;\n            }\n            ++index;\n            restore = index;\n            ch = scanHexEscape('u');\n            if (ch) {\n                if (ch === '\\\\' || !isIdentifierStart(ch)) {\n                    return;\n                }\n                id = ch;\n            } else {\n                index = restore;\n                id = 'u';\n            }\n        } else {\n            id = source[index++];\n        }\n\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n            if (ch === '\\\\') {\n                ++index;\n                if (source[index] !== 'u') {\n                    return;\n                }\n                ++index;\n                restore = index;\n                ch = scanHexEscape('u');\n                if (ch) {\n                    if (ch === '\\\\' || !isIdentifierPart(ch)) {\n                        return;\n                    }\n                    id += ch;\n                } else {\n                    index = restore;\n                    id += 'u';\n                }\n            } else {\n                id += source[index++];\n            }\n        }\n\n        // There is no keyword or literal with only one character.\n        // Thus, it must be an identifier.\n        if (id.length === 1) {\n            return {\n                type: Token.Identifier,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (isKeyword(id)) {\n            return {\n                type: Token.Keyword,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 7.8.1 Null Literals\n\n        if (id === 'null') {\n            return {\n                type: Token.NullLiteral,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 7.8.2 Boolean Literals\n\n        if (id === 'true' || id === 'false') {\n            return {\n                type: Token.BooleanLiteral,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        return {\n            type: Token.Identifier,\n            value: id,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    // 7.7 Punctuators\n\n    function scanPunctuator() {\n        var start = index,\n            ch1 = source[index],\n            ch2,\n            ch3,\n            ch4;\n\n        // Check for most common single-character punctuators.\n\n        if (ch1 === ';' || ch1 === '{' || ch1 === '}') {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === ',' || ch1 === '(' || ch1 === ')') {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // Dot (.) can also start a floating-point number, hence the need\n        // to check the next character.\n\n        ch2 = source[index + 1];\n        if (ch1 === '.' && !isDecimalDigit(ch2)) {\n            return {\n                type: Token.Punctuator,\n                value: source[index++],\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // Peek more characters.\n\n        ch3 = source[index + 2];\n        ch4 = source[index + 3];\n\n        // 4-character punctuator: >>>=\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            if (ch4 === '=') {\n                index += 4;\n                return {\n                    type: Token.Punctuator,\n                    value: '>>>=',\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        // 3-character punctuators: === !== >>> <<= >>=\n\n        if (ch1 === '=' && ch2 === '=' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '===',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '!' && ch2 === '=' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '!==',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>>',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '<' && ch2 === '<' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '<<=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 2-character punctuators: <= >= == != ++ -- << >> && ||\n        // += -= *= %= &= |= ^= /=\n\n        if (ch2 === '=') {\n            if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n                index += 2;\n                return {\n                    type: Token.Punctuator,\n                    value: ch1 + ch2,\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        if (ch1 === ch2 && ('+-<>&|'.indexOf(ch1) >= 0)) {\n            if ('+-<>&|'.indexOf(ch2) >= 0) {\n                index += 2;\n                return {\n                    type: Token.Punctuator,\n                    value: ch1 + ch2,\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        // The remaining 1-character punctuators.\n\n        if ('[]<>+-*%&|^!~?:=/'.indexOf(ch1) >= 0) {\n            return {\n                type: Token.Punctuator,\n                value: source[index++],\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n    }\n\n    // 7.8.3 Numeric Literals\n\n    function scanNumericLiteral() {\n        var number, start, ch;\n\n        ch = source[index];\n        assert(isDecimalDigit(ch) || (ch === '.'),\n            'Numeric literal must start with a decimal digit or a decimal point');\n\n        start = index;\n        number = '';\n        if (ch !== '.') {\n            number = source[index++];\n            ch = source[index];\n\n            // Hex number starts with '0x'.\n            // Octal number starts with '0'.\n            if (number === '0') {\n                if (ch === 'x' || ch === 'X') {\n                    number += source[index++];\n                    while (index < length) {\n                        ch = source[index];\n                        if (!isHexDigit(ch)) {\n                            break;\n                        }\n                        number += source[index++];\n                    }\n\n                    if (number.length <= 2) {\n                        // only 0x\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 16),\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                } else if (isOctalDigit(ch)) {\n                    number += source[index++];\n                    while (index < length) {\n                        ch = source[index];\n                        if (!isOctalDigit(ch)) {\n                            break;\n                        }\n                        number += source[index++];\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch) || isDecimalDigit(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 8),\n                        octal: true,\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                }\n\n                // decimal number starts with '0' such as '09' is illegal.\n                if (isDecimalDigit(ch)) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n            }\n\n            while (index < length) {\n                ch = source[index];\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += source[index++];\n            }\n        }\n\n        if (ch === '.') {\n            number += source[index++];\n            while (index < length) {\n                ch = source[index];\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += source[index++];\n            }\n        }\n\n        if (ch === 'e' || ch === 'E') {\n            number += source[index++];\n\n            ch = source[index];\n            if (ch === '+' || ch === '-') {\n                number += source[index++];\n            }\n\n            ch = source[index];\n            if (isDecimalDigit(ch)) {\n                number += source[index++];\n                while (index < length) {\n                    ch = source[index];\n                    if (!isDecimalDigit(ch)) {\n                        break;\n                    }\n                    number += source[index++];\n                }\n            } else {\n                ch = 'character ' + ch;\n                if (index >= length) {\n                    ch = '<end>';\n                }\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        if (index < length) {\n            ch = source[index];\n            if (isIdentifierStart(ch)) {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseFloat(number),\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    // 7.8.4 String Literals\n\n    function scanStringLiteral() {\n        var str = '', quote, start, ch, code, unescaped, restore, octal = false;\n\n        quote = source[index];\n        assert((quote === '\\'' || quote === '\"'),\n            'String literal must starts with a quote');\n\n        start = index;\n        ++index;\n\n        while (index < length) {\n            ch = source[index++];\n\n            if (ch === quote) {\n                quote = '';\n                break;\n            } else if (ch === '\\\\') {\n                ch = source[index++];\n                if (!isLineTerminator(ch)) {\n                    switch (ch) {\n                    case 'n':\n                        str += '\\n';\n                        break;\n                    case 'r':\n                        str += '\\r';\n                        break;\n                    case 't':\n                        str += '\\t';\n                        break;\n                    case 'u':\n                    case 'x':\n                        restore = index;\n                        unescaped = scanHexEscape(ch);\n                        if (unescaped) {\n                            str += unescaped;\n                        } else {\n                            index = restore;\n                            str += ch;\n                        }\n                        break;\n                    case 'b':\n                        str += '\\b';\n                        break;\n                    case 'f':\n                        str += '\\f';\n                        break;\n                    case 'v':\n                        str += '\\x0B';\n                        break;\n\n                    default:\n                        if (isOctalDigit(ch)) {\n                            code = '01234567'.indexOf(ch);\n\n                            // \\0 is not octal escape sequence\n                            if (code !== 0) {\n                                octal = true;\n                            }\n\n                            if (index < length && isOctalDigit(source[index])) {\n                                octal = true;\n                                code = code * 8 + '01234567'.indexOf(source[index++]);\n\n                                // 3 digits are only allowed when string starts\n                                // with 0, 1, 2, 3\n                                if ('0123'.indexOf(ch) >= 0 &&\n                                        index < length &&\n                                        isOctalDigit(source[index])) {\n                                    code = code * 8 + '01234567'.indexOf(source[index++]);\n                                }\n                            }\n                            str += String.fromCharCode(code);\n                        } else {\n                            str += ch;\n                        }\n                        break;\n                    }\n                } else {\n                    ++lineNumber;\n                    if (ch ===  '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                }\n            } else if (isLineTerminator(ch)) {\n                break;\n            } else {\n                str += ch;\n            }\n        }\n\n        if (quote !== '') {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.StringLiteral,\n            value: str,\n            octal: octal,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    function scanRegExp() {\n        var str, ch, start, pattern, flags, value, classMarker = false, restore, terminated = false;\n\n        buffer = null;\n        skipComment();\n\n        start = index;\n        ch = source[index];\n        assert(ch === '/', 'Regular expression literal must start with a slash');\n        str = source[index++];\n\n        while (index < length) {\n            ch = source[index++];\n            str += ch;\n            if (ch === '\\\\') {\n                ch = source[index++];\n                // ECMA-262 7.8.5\n                if (isLineTerminator(ch)) {\n                    throwError({}, Messages.UnterminatedRegExp);\n                }\n                str += ch;\n            } else if (classMarker) {\n                if (ch === ']') {\n                    classMarker = false;\n                }\n            } else {\n                if (ch === '/') {\n                    terminated = true;\n                    break;\n                } else if (ch === '[') {\n                    classMarker = true;\n                } else if (isLineTerminator(ch)) {\n                    throwError({}, Messages.UnterminatedRegExp);\n                }\n            }\n        }\n\n        if (!terminated) {\n            throwError({}, Messages.UnterminatedRegExp);\n        }\n\n        // Exclude leading and trailing slash.\n        pattern = str.substr(1, str.length - 2);\n\n        flags = '';\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n\n            ++index;\n            if (ch === '\\\\' && index < length) {\n                ch = source[index];\n                if (ch === 'u') {\n                    ++index;\n                    restore = index;\n                    ch = scanHexEscape('u');\n                    if (ch) {\n                        flags += ch;\n                        str += '\\\\u';\n                        for (; restore < index; ++restore) {\n                            str += source[restore];\n                        }\n                    } else {\n                        index = restore;\n                        flags += 'u';\n                        str += '\\\\u';\n                    }\n                } else {\n                    str += '\\\\';\n                }\n            } else {\n                flags += ch;\n                str += ch;\n            }\n        }\n\n        try {\n            value = new RegExp(pattern, flags);\n        } catch (e) {\n            throwError({}, Messages.InvalidRegExp);\n        }\n\n        return {\n            literal: str,\n            value: value,\n            range: [start, index]\n        };\n    }\n\n    function isIdentifierName(token) {\n        return token.type === Token.Identifier ||\n            token.type === Token.Keyword ||\n            token.type === Token.BooleanLiteral ||\n            token.type === Token.NullLiteral;\n    }\n\n    function advance() {\n        var ch, token;\n\n        skipComment();\n\n        if (index >= length) {\n            return {\n                type: Token.EOF,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [index, index]\n            };\n        }\n\n        token = scanPunctuator();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        ch = source[index];\n\n        if (ch === '\\'' || ch === '\"') {\n            return scanStringLiteral();\n        }\n\n        if (ch === '.' || isDecimalDigit(ch)) {\n            return scanNumericLiteral();\n        }\n\n        token = scanIdentifier();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n    }\n\n    function lex() {\n        var token;\n\n        if (buffer) {\n            index = buffer.range[1];\n            lineNumber = buffer.lineNumber;\n            lineStart = buffer.lineStart;\n            token = buffer;\n            buffer = null;\n            return token;\n        }\n\n        buffer = null;\n        return advance();\n    }\n\n    function lookahead() {\n        var pos, line, start;\n\n        if (buffer !== null) {\n            return buffer;\n        }\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        buffer = advance();\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return buffer;\n    }\n\n    // Return true if there is a line terminator before the next token.\n\n    function peekLineTerminator() {\n        var pos, line, start, found;\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        skipComment();\n        found = lineNumber !== line;\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return found;\n    }\n\n    // Throw an exception\n\n    function throwError(token, messageFormat) {\n        var error,\n            args = Array.prototype.slice.call(arguments, 2),\n            msg = messageFormat.replace(\n                /%(\\d)/g,\n                function (whole, index) {\n                    return args[index] || '';\n                }\n            );\n\n        if (typeof token.lineNumber === 'number') {\n            error = new Error('Line ' + token.lineNumber + ': ' + msg);\n            error.index = token.range[0];\n            error.lineNumber = token.lineNumber;\n            error.column = token.range[0] - lineStart + 1;\n        } else {\n            error = new Error('Line ' + lineNumber + ': ' + msg);\n            error.index = index;\n            error.lineNumber = lineNumber;\n            error.column = index - lineStart + 1;\n        }\n\n        throw error;\n    }\n\n    function throwErrorTolerant() {\n        try {\n            throwError.apply(null, arguments);\n        } catch (e) {\n            if (extra.errors) {\n                extra.errors.push(e);\n            } else {\n                throw e;\n            }\n        }\n    }\n\n\n    // Throw an exception because of the token.\n\n    function throwUnexpected(token) {\n        if (token.type === Token.EOF) {\n            throwError(token, Messages.UnexpectedEOS);\n        }\n\n        if (token.type === Token.NumericLiteral) {\n            throwError(token, Messages.UnexpectedNumber);\n        }\n\n        if (token.type === Token.StringLiteral) {\n            throwError(token, Messages.UnexpectedString);\n        }\n\n        if (token.type === Token.Identifier) {\n            throwError(token, Messages.UnexpectedIdentifier);\n        }\n\n        if (token.type === Token.Keyword) {\n            if (isFutureReservedWord(token.value)) {\n                throwError(token, Messages.UnexpectedReserved);\n            } else if (strict && isStrictModeReservedWord(token.value)) {\n                throwErrorTolerant(token, Messages.StrictReservedWord);\n                return;\n            }\n            throwError(token, Messages.UnexpectedToken, token.value);\n        }\n\n        // BooleanLiteral, NullLiteral, or Punctuator.\n        throwError(token, Messages.UnexpectedToken, token.value);\n    }\n\n    // Expect the next token to match the specified punctuator.\n    // If not, an exception will be thrown.\n\n    function expect(value) {\n        var token = lex();\n        if (token.type !== Token.Punctuator || token.value !== value) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Expect the next token to match the specified keyword.\n    // If not, an exception will be thrown.\n\n    function expectKeyword(keyword) {\n        var token = lex();\n        if (token.type !== Token.Keyword || token.value !== keyword) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Return true if the next token matches the specified punctuator.\n\n    function match(value) {\n        var token = lookahead();\n        return token.type === Token.Punctuator && token.value === value;\n    }\n\n    // Return true if the next token matches the specified keyword\n\n    function matchKeyword(keyword) {\n        var token = lookahead();\n        return token.type === Token.Keyword && token.value === keyword;\n    }\n\n    // Return true if the next token is an assignment operator\n\n    function matchAssign() {\n        var token = lookahead(),\n            op = token.value;\n\n        if (token.type !== Token.Punctuator) {\n            return false;\n        }\n        return op === '=' ||\n            op === '*=' ||\n            op === '/=' ||\n            op === '%=' ||\n            op === '+=' ||\n            op === '-=' ||\n            op === '<<=' ||\n            op === '>>=' ||\n            op === '>>>=' ||\n            op === '&=' ||\n            op === '^=' ||\n            op === '|=';\n    }\n\n    function consumeSemicolon() {\n        var token, line;\n\n        // Catch the very common case first.\n        if (source[index] === ';') {\n            lex();\n            return;\n        }\n\n        line = lineNumber;\n        skipComment();\n        if (lineNumber !== line) {\n            return;\n        }\n\n        if (match(';')) {\n            lex();\n            return;\n        }\n\n        token = lookahead();\n        if (token.type !== Token.EOF && !match('}')) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Return true if provided expression is LeftHandSideExpression\n\n    function isLeftHandSide(expr) {\n        return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;\n    }\n\n    // 11.1.4 Array Initialiser\n\n    function parseArrayInitialiser() {\n        var elements = [];\n\n        expect('[');\n\n        while (!match(']')) {\n            if (match(',')) {\n                lex();\n                elements.push(null);\n            } else {\n                elements.push(parseAssignmentExpression());\n\n                if (!match(']')) {\n                    expect(',');\n                }\n            }\n        }\n\n        expect(']');\n\n        return {\n            type: Syntax.ArrayExpression,\n            elements: elements\n        };\n    }\n\n    // 11.1.5 Object Initialiser\n\n    function parsePropertyFunction(param, first) {\n        var previousStrict, body;\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (first && strict && isRestrictedWord(param[0].name)) {\n            throwErrorTolerant(first, Messages.StrictParamName);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionExpression,\n            id: null,\n            params: param,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: false,\n            expression: false\n        };\n    }\n\n    function parseObjectPropertyKey() {\n        var token = lex();\n\n        // Note: This function is called only from parseObjectProperty(), where\n        // EOF and Punctuator tokens are already filtered out.\n\n        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwErrorTolerant(token, Messages.StrictOctalLiteral);\n            }\n            return createLiteral(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseObjectProperty() {\n        var token, key, id, param;\n\n        token = lookahead();\n\n        if (token.type === Token.Identifier) {\n\n            id = parseObjectPropertyKey();\n\n            // Property Assignment: Getter and Setter.\n\n            if (token.value === 'get' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                expect(')');\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: parsePropertyFunction([]),\n                    kind: 'get'\n                };\n            } else if (token.value === 'set' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                token = lookahead();\n                if (token.type !== Token.Identifier) {\n                    expect(')');\n                    throwErrorTolerant(token, Messages.UnexpectedToken, token.value);\n                    return {\n                        type: Syntax.Property,\n                        key: key,\n                        value: parsePropertyFunction([]),\n                        kind: 'set'\n                    };\n                } else {\n                    param = [ parseVariableIdentifier() ];\n                    expect(')');\n                    return {\n                        type: Syntax.Property,\n                        key: key,\n                        value: parsePropertyFunction(param, token),\n                        kind: 'set'\n                    };\n                }\n            } else {\n                expect(':');\n                return {\n                    type: Syntax.Property,\n                    key: id,\n                    value: parseAssignmentExpression(),\n                    kind: 'init'\n                };\n            }\n        } else if (token.type === Token.EOF || token.type === Token.Punctuator) {\n            throwUnexpected(token);\n        } else {\n            key = parseObjectPropertyKey();\n            expect(':');\n            return {\n                type: Syntax.Property,\n                key: key,\n                value: parseAssignmentExpression(),\n                kind: 'init'\n            };\n        }\n    }\n\n    function parseObjectInitialiser() {\n        var properties = [], property, name, kind, map = {}, toString = String;\n\n        expect('{');\n\n        while (!match('}')) {\n            property = parseObjectProperty();\n\n            if (property.key.type === Syntax.Identifier) {\n                name = property.key.name;\n            } else {\n                name = toString(property.key.value);\n            }\n            kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;\n            if (Object.prototype.hasOwnProperty.call(map, name)) {\n                if (map[name] === PropertyKind.Data) {\n                    if (strict && kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.StrictDuplicateProperty);\n                    } else if (kind !== PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.AccessorDataProperty);\n                    }\n                } else {\n                    if (kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.AccessorDataProperty);\n                    } else if (map[name] & kind) {\n                        throwErrorTolerant({}, Messages.AccessorGetSet);\n                    }\n                }\n                map[name] |= kind;\n            } else {\n                map[name] = kind;\n            }\n\n            properties.push(property);\n\n            if (!match('}')) {\n                expect(',');\n            }\n        }\n\n        expect('}');\n\n        return {\n            type: Syntax.ObjectExpression,\n            properties: properties\n        };\n    }\n\n    // 11.1.6 The Grouping Operator\n\n    function parseGroupExpression() {\n        var expr;\n\n        expect('(');\n\n        expr = parseExpression();\n\n        expect(')');\n\n        return expr;\n    }\n\n\n    // 11.1 Primary Expressions\n\n    function parsePrimaryExpression() {\n        var token = lookahead(),\n            type = token.type;\n\n        if (type === Token.Identifier) {\n            return {\n                type: Syntax.Identifier,\n                name: lex().value\n            };\n        }\n\n        if (type === Token.StringLiteral || type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwErrorTolerant(token, Messages.StrictOctalLiteral);\n            }\n            return createLiteral(lex());\n        }\n\n        if (type === Token.Keyword) {\n            if (matchKeyword('this')) {\n                lex();\n                return {\n                    type: Syntax.ThisExpression\n                };\n            }\n\n            if (matchKeyword('function')) {\n                return parseFunctionExpression();\n            }\n        }\n\n        if (type === Token.BooleanLiteral) {\n            lex();\n            token.value = (token.value === 'true');\n            return createLiteral(token);\n        }\n\n        if (type === Token.NullLiteral) {\n            lex();\n            token.value = null;\n            return createLiteral(token);\n        }\n\n        if (match('[')) {\n            return parseArrayInitialiser();\n        }\n\n        if (match('{')) {\n            return parseObjectInitialiser();\n        }\n\n        if (match('(')) {\n            return parseGroupExpression();\n        }\n\n        if (match('/') || match('/=')) {\n            return createLiteral(scanRegExp());\n        }\n\n        return throwUnexpected(lex());\n    }\n\n    // 11.2 Left-Hand-Side Expressions\n\n    function parseArguments() {\n        var args = [];\n\n        expect('(');\n\n        if (!match(')')) {\n            while (index < length) {\n                args.push(parseAssignmentExpression());\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        return args;\n    }\n\n    function parseNonComputedProperty() {\n        var token = lex();\n\n        if (!isIdentifierName(token)) {\n            throwUnexpected(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseNonComputedMember() {\n        expect('.');\n\n        return parseNonComputedProperty();\n    }\n\n    function parseComputedMember() {\n        var expr;\n\n        expect('[');\n\n        expr = parseExpression();\n\n        expect(']');\n\n        return expr;\n    }\n\n    function parseNewExpression() {\n        var expr;\n\n        expectKeyword('new');\n\n        expr = {\n            type: Syntax.NewExpression,\n            callee: parseLeftHandSideExpression(),\n            'arguments': []\n        };\n\n        if (match('(')) {\n            expr['arguments'] = parseArguments();\n        }\n\n        return expr;\n    }\n\n    function parseLeftHandSideExpressionAllowCall() {\n        var expr;\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[') || match('(')) {\n            if (match('(')) {\n                expr = {\n                    type: Syntax.CallExpression,\n                    callee: expr,\n                    'arguments': parseArguments()\n                };\n            } else if (match('[')) {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: true,\n                    object: expr,\n                    property: parseComputedMember()\n                };\n            } else {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: false,\n                    object: expr,\n                    property: parseNonComputedMember()\n                };\n            }\n        }\n\n        return expr;\n    }\n\n\n    function parseLeftHandSideExpression() {\n        var expr;\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[')) {\n            if (match('[')) {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: true,\n                    object: expr,\n                    property: parseComputedMember()\n                };\n            } else {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: false,\n                    object: expr,\n                    property: parseNonComputedMember()\n                };\n            }\n        }\n\n        return expr;\n    }\n\n    // 11.3 Postfix Expressions\n\n    function parsePostfixExpression() {\n        var expr = parseLeftHandSideExpressionAllowCall(), token;\n\n        token = lookahead();\n        if (token.type !== Token.Punctuator) {\n            return expr;\n        }\n\n        if ((match('++') || match('--')) && !peekLineTerminator()) {\n            // 11.3.1, 11.3.2\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant({}, Messages.StrictLHSPostfix);\n            }\n            if (!isLeftHandSide(expr)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = {\n                type: Syntax.UpdateExpression,\n                operator: lex().value,\n                argument: expr,\n                prefix: false\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.4 Unary Operators\n\n    function parseUnaryExpression() {\n        var token, expr;\n\n        token = lookahead();\n        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {\n            return parsePostfixExpression();\n        }\n\n        if (match('++') || match('--')) {\n            token = lex();\n            expr = parseUnaryExpression();\n            // 11.4.4, 11.4.5\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant({}, Messages.StrictLHSPrefix);\n            }\n\n            if (!isLeftHandSide(expr)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = {\n                type: Syntax.UpdateExpression,\n                operator: token.value,\n                argument: expr,\n                prefix: true\n            };\n            return expr;\n        }\n\n        if (match('+') || match('-') || match('~') || match('!')) {\n            expr = {\n                type: Syntax.UnaryExpression,\n                operator: lex().value,\n                argument: parseUnaryExpression(),\n                prefix: true\n            };\n            return expr;\n        }\n\n        if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n            expr = {\n                type: Syntax.UnaryExpression,\n                operator: lex().value,\n                argument: parseUnaryExpression(),\n                prefix: true\n            };\n            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {\n                throwErrorTolerant({}, Messages.StrictDelete);\n            }\n            return expr;\n        }\n\n        return parsePostfixExpression();\n    }\n\n    // 11.5 Multiplicative Operators\n\n    function parseMultiplicativeExpression() {\n        var expr = parseUnaryExpression();\n\n        while (match('*') || match('/') || match('%')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseUnaryExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.6 Additive Operators\n\n    function parseAdditiveExpression() {\n        var expr = parseMultiplicativeExpression();\n\n        while (match('+') || match('-')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseMultiplicativeExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.7 Bitwise Shift Operators\n\n    function parseShiftExpression() {\n        var expr = parseAdditiveExpression();\n\n        while (match('<<') || match('>>') || match('>>>')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseAdditiveExpression()\n            };\n        }\n\n        return expr;\n    }\n    // 11.8 Relational Operators\n\n    function parseRelationalExpression() {\n        var expr, previousAllowIn;\n\n        previousAllowIn = state.allowIn;\n        state.allowIn = true;\n\n        expr = parseShiftExpression();\n\n        while (match('<') || match('>') || match('<=') || match('>=') || (previousAllowIn && matchKeyword('in')) || matchKeyword('instanceof')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseShiftExpression()\n            };\n        }\n\n        state.allowIn = previousAllowIn;\n        return expr;\n    }\n\n    // 11.9 Equality Operators\n\n    function parseEqualityExpression() {\n        var expr = parseRelationalExpression();\n\n        while (match('==') || match('!=') || match('===') || match('!==')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseRelationalExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.10 Binary Bitwise Operators\n\n    function parseBitwiseANDExpression() {\n        var expr = parseEqualityExpression();\n\n        while (match('&')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '&',\n                left: expr,\n                right: parseEqualityExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseBitwiseXORExpression() {\n        var expr = parseBitwiseANDExpression();\n\n        while (match('^')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '^',\n                left: expr,\n                right: parseBitwiseANDExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseBitwiseORExpression() {\n        var expr = parseBitwiseXORExpression();\n\n        while (match('|')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '|',\n                left: expr,\n                right: parseBitwiseXORExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.11 Binary Logical Operators\n\n    function parseLogicalANDExpression() {\n        var expr = parseBitwiseORExpression();\n\n        while (match('&&')) {\n            lex();\n            expr = {\n                type: Syntax.LogicalExpression,\n                operator: '&&',\n                left: expr,\n                right: parseBitwiseORExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseLogicalORExpression() {\n        var expr = parseLogicalANDExpression();\n\n        while (match('||')) {\n            lex();\n            expr = {\n                type: Syntax.LogicalExpression,\n                operator: '||',\n                left: expr,\n                right: parseLogicalANDExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.12 Conditional Operator\n\n    function parseConditionalExpression() {\n        var expr, previousAllowIn, consequent;\n\n        expr = parseLogicalORExpression();\n\n        if (match('?')) {\n            lex();\n            previousAllowIn = state.allowIn;\n            state.allowIn = true;\n            consequent = parseAssignmentExpression();\n            state.allowIn = previousAllowIn;\n            expect(':');\n\n            expr = {\n                type: Syntax.ConditionalExpression,\n                test: expr,\n                consequent: consequent,\n                alternate: parseAssignmentExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.13 Assignment Operators\n\n    function parseAssignmentExpression() {\n        var token, expr;\n\n        token = lookahead();\n        expr = parseConditionalExpression();\n\n        if (matchAssign()) {\n            // LeftHandSideExpression\n            if (!isLeftHandSide(expr)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            // 11.13.1\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant(token, Messages.StrictLHSAssignment);\n            }\n\n            expr = {\n                type: Syntax.AssignmentExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseAssignmentExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.14 Comma Operator\n\n    function parseExpression() {\n        var expr = parseAssignmentExpression();\n\n        if (match(',')) {\n            expr = {\n                type: Syntax.SequenceExpression,\n                expressions: [ expr ]\n            };\n\n            while (index < length) {\n                if (!match(',')) {\n                    break;\n                }\n                lex();\n                expr.expressions.push(parseAssignmentExpression());\n            }\n\n        }\n        return expr;\n    }\n\n    // 12.1 Block\n\n    function parseStatementList() {\n        var list = [],\n            statement;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            statement = parseSourceElement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            list.push(statement);\n        }\n\n        return list;\n    }\n\n    function parseBlock() {\n        var block;\n\n        expect('{');\n\n        block = parseStatementList();\n\n        expect('}');\n\n        return {\n            type: Syntax.BlockStatement,\n            body: block\n        };\n    }\n\n    // 12.2 Variable Statement\n\n    function parseVariableIdentifier() {\n        var token = lex();\n\n        if (token.type !== Token.Identifier) {\n            throwUnexpected(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseVariableDeclaration(kind) {\n        var id = parseVariableIdentifier(),\n            init = null;\n\n        // 12.2.1\n        if (strict && isRestrictedWord(id.name)) {\n            throwErrorTolerant({}, Messages.StrictVarName);\n        }\n\n        if (kind === 'const') {\n            expect('=');\n            init = parseAssignmentExpression();\n        } else if (match('=')) {\n            lex();\n            init = parseAssignmentExpression();\n        }\n\n        return {\n            type: Syntax.VariableDeclarator,\n            id: id,\n            init: init\n        };\n    }\n\n    function parseVariableDeclarationList(kind) {\n        var list = [];\n\n        do {\n            list.push(parseVariableDeclaration(kind));\n            if (!match(',')) {\n                break;\n            }\n            lex();\n        } while (index < length);\n\n        return list;\n    }\n\n    function parseVariableStatement() {\n        var declarations;\n\n        expectKeyword('var');\n\n        declarations = parseVariableDeclarationList();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: declarations,\n            kind: 'var'\n        };\n    }\n\n    // kind may be `const` or `let`\n    // Both are experimental and not in the specification yet.\n    // see http://wiki.ecmascript.org/doku.php?id=harmony:const\n    // and http://wiki.ecmascript.org/doku.php?id=harmony:let\n    function parseConstLetDeclaration(kind) {\n        var declarations;\n\n        expectKeyword(kind);\n\n        declarations = parseVariableDeclarationList(kind);\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: declarations,\n            kind: kind\n        };\n    }\n\n    // 12.3 Empty Statement\n\n    function parseEmptyStatement() {\n        expect(';');\n\n        return {\n            type: Syntax.EmptyStatement\n        };\n    }\n\n    // 12.4 Expression Statement\n\n    function parseExpressionStatement() {\n        var expr = parseExpression();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExpressionStatement,\n            expression: expr\n        };\n    }\n\n    // 12.5 If statement\n\n    function parseIfStatement() {\n        var test, consequent, alternate;\n\n        expectKeyword('if');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        consequent = parseStatement();\n\n        if (matchKeyword('else')) {\n            lex();\n            alternate = parseStatement();\n        } else {\n            alternate = null;\n        }\n\n        return {\n            type: Syntax.IfStatement,\n            test: test,\n            consequent: consequent,\n            alternate: alternate\n        };\n    }\n\n    // 12.6 Iteration Statements\n\n    function parseDoWhileStatement() {\n        var body, test, oldInIteration;\n\n        expectKeyword('do');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        if (match(';')) {\n            lex();\n        }\n\n        return {\n            type: Syntax.DoWhileStatement,\n            body: body,\n            test: test\n        };\n    }\n\n    function parseWhileStatement() {\n        var test, body, oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        return {\n            type: Syntax.WhileStatement,\n            test: test,\n            body: body\n        };\n    }\n\n    function parseForVariableDeclaration() {\n        var token = lex();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: parseVariableDeclarationList(),\n            kind: token.value\n        };\n    }\n\n    function parseForStatement() {\n        var init, test, update, left, right, body, oldInIteration;\n\n        init = test = update = null;\n\n        expectKeyword('for');\n\n        expect('(');\n\n        if (match(';')) {\n            lex();\n        } else {\n            if (matchKeyword('var') || matchKeyword('let')) {\n                state.allowIn = false;\n                init = parseForVariableDeclaration();\n                state.allowIn = true;\n\n                if (init.declarations.length === 1 && matchKeyword('in')) {\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            } else {\n                state.allowIn = false;\n                init = parseExpression();\n                state.allowIn = true;\n\n                if (matchKeyword('in')) {\n                    // LeftHandSideExpression\n                    if (!isLeftHandSide(init)) {\n                        throwErrorTolerant({}, Messages.InvalidLHSInForIn);\n                    }\n\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            }\n\n            if (typeof left === 'undefined') {\n                expect(';');\n            }\n        }\n\n        if (typeof left === 'undefined') {\n\n            if (!match(';')) {\n                test = parseExpression();\n            }\n            expect(';');\n\n            if (!match(')')) {\n                update = parseExpression();\n            }\n        }\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        if (typeof left === 'undefined') {\n            return {\n                type: Syntax.ForStatement,\n                init: init,\n                test: test,\n                update: update,\n                body: body\n            };\n        }\n\n        return {\n            type: Syntax.ForInStatement,\n            left: left,\n            right: right,\n            body: body,\n            each: false\n        };\n    }\n\n    // 12.7 The continue statement\n\n    function parseContinueStatement() {\n        var token, label = null;\n\n        expectKeyword('continue');\n\n        // Optimize the most common form: 'continue;'.\n        if (source[index] === ';') {\n            lex();\n\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return {\n                type: Syntax.ContinueStatement,\n                label: null\n            };\n        }\n\n        if (peekLineTerminator()) {\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return {\n                type: Syntax.ContinueStatement,\n                label: null\n            };\n        }\n\n        token = lookahead();\n        if (token.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !state.inIteration) {\n            throwError({}, Messages.IllegalContinue);\n        }\n\n        return {\n            type: Syntax.ContinueStatement,\n            label: label\n        };\n    }\n\n    // 12.8 The break statement\n\n    function parseBreakStatement() {\n        var token, label = null;\n\n        expectKeyword('break');\n\n        // Optimize the most common form: 'break;'.\n        if (source[index] === ';') {\n            lex();\n\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return {\n                type: Syntax.BreakStatement,\n                label: null\n            };\n        }\n\n        if (peekLineTerminator()) {\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return {\n                type: Syntax.BreakStatement,\n                label: null\n            };\n        }\n\n        token = lookahead();\n        if (token.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !(state.inIteration || state.inSwitch)) {\n            throwError({}, Messages.IllegalBreak);\n        }\n\n        return {\n            type: Syntax.BreakStatement,\n            label: label\n        };\n    }\n\n    // 12.9 The return statement\n\n    function parseReturnStatement() {\n        var token, argument = null;\n\n        expectKeyword('return');\n\n        if (!state.inFunctionBody) {\n            throwErrorTolerant({}, Messages.IllegalReturn);\n        }\n\n        // 'return' followed by a space and an identifier is very common.\n        if (source[index] === ' ') {\n            if (isIdentifierStart(source[index + 1])) {\n                argument = parseExpression();\n                consumeSemicolon();\n                return {\n                    type: Syntax.ReturnStatement,\n                    argument: argument\n                };\n            }\n        }\n\n        if (peekLineTerminator()) {\n            return {\n                type: Syntax.ReturnStatement,\n                argument: null\n            };\n        }\n\n        if (!match(';')) {\n            token = lookahead();\n            if (!match('}') && token.type !== Token.EOF) {\n                argument = parseExpression();\n            }\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ReturnStatement,\n            argument: argument\n        };\n    }\n\n    // 12.10 The with statement\n\n    function parseWithStatement() {\n        var object, body;\n\n        if (strict) {\n            throwErrorTolerant({}, Messages.StrictModeWith);\n        }\n\n        expectKeyword('with');\n\n        expect('(');\n\n        object = parseExpression();\n\n        expect(')');\n\n        body = parseStatement();\n\n        return {\n            type: Syntax.WithStatement,\n            object: object,\n            body: body\n        };\n    }\n\n    // 12.10 The swith statement\n\n    function parseSwitchCase() {\n        var test,\n            consequent = [],\n            statement;\n\n        if (matchKeyword('default')) {\n            lex();\n            test = null;\n        } else {\n            expectKeyword('case');\n            test = parseExpression();\n        }\n        expect(':');\n\n        while (index < length) {\n            if (match('}') || matchKeyword('default') || matchKeyword('case')) {\n                break;\n            }\n            statement = parseStatement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            consequent.push(statement);\n        }\n\n        return {\n            type: Syntax.SwitchCase,\n            test: test,\n            consequent: consequent\n        };\n    }\n\n    function parseSwitchStatement() {\n        var discriminant, cases, clause, oldInSwitch, defaultFound;\n\n        expectKeyword('switch');\n\n        expect('(');\n\n        discriminant = parseExpression();\n\n        expect(')');\n\n        expect('{');\n\n        cases = [];\n\n        if (match('}')) {\n            lex();\n            return {\n                type: Syntax.SwitchStatement,\n                discriminant: discriminant,\n                cases: cases\n            };\n        }\n\n        oldInSwitch = state.inSwitch;\n        state.inSwitch = true;\n        defaultFound = false;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            clause = parseSwitchCase();\n            if (clause.test === null) {\n                if (defaultFound) {\n                    throwError({}, Messages.MultipleDefaultsInSwitch);\n                }\n                defaultFound = true;\n            }\n            cases.push(clause);\n        }\n\n        state.inSwitch = oldInSwitch;\n\n        expect('}');\n\n        return {\n            type: Syntax.SwitchStatement,\n            discriminant: discriminant,\n            cases: cases\n        };\n    }\n\n    // 12.13 The throw statement\n\n    function parseThrowStatement() {\n        var argument;\n\n        expectKeyword('throw');\n\n        if (peekLineTerminator()) {\n            throwError({}, Messages.NewlineAfterThrow);\n        }\n\n        argument = parseExpression();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ThrowStatement,\n            argument: argument\n        };\n    }\n\n    // 12.14 The try statement\n\n    function parseCatchClause() {\n        var param;\n\n        expectKeyword('catch');\n\n        expect('(');\n        if (match(')')) {\n            throwUnexpected(lookahead());\n        }\n\n        param = parseVariableIdentifier();\n        // 12.14.1\n        if (strict && isRestrictedWord(param.name)) {\n            throwErrorTolerant({}, Messages.StrictCatchVariable);\n        }\n\n        expect(')');\n\n        return {\n            type: Syntax.CatchClause,\n            param: param,\n            body: parseBlock()\n        };\n    }\n\n    function parseTryStatement() {\n        var block, handlers = [], finalizer = null;\n\n        expectKeyword('try');\n\n        block = parseBlock();\n\n        if (matchKeyword('catch')) {\n            handlers.push(parseCatchClause());\n        }\n\n        if (matchKeyword('finally')) {\n            lex();\n            finalizer = parseBlock();\n        }\n\n        if (handlers.length === 0 && !finalizer) {\n            throwError({}, Messages.NoCatchOrFinally);\n        }\n\n        return {\n            type: Syntax.TryStatement,\n            block: block,\n            guardedHandlers: [],\n            handlers: handlers,\n            finalizer: finalizer\n        };\n    }\n\n    // 12.15 The debugger statement\n\n    function parseDebuggerStatement() {\n        expectKeyword('debugger');\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.DebuggerStatement\n        };\n    }\n\n    // 12 Statements\n\n    function parseStatement() {\n        var token = lookahead(),\n            expr,\n            labeledBody;\n\n        if (token.type === Token.EOF) {\n            throwUnexpected(token);\n        }\n\n        if (token.type === Token.Punctuator) {\n            switch (token.value) {\n            case ';':\n                return parseEmptyStatement();\n            case '{':\n                return parseBlock();\n            case '(':\n                return parseExpressionStatement();\n            default:\n                break;\n            }\n        }\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'break':\n                return parseBreakStatement();\n            case 'continue':\n                return parseContinueStatement();\n            case 'debugger':\n                return parseDebuggerStatement();\n            case 'do':\n                return parseDoWhileStatement();\n            case 'for':\n                return parseForStatement();\n            case 'function':\n                return parseFunctionDeclaration();\n            case 'if':\n                return parseIfStatement();\n            case 'return':\n                return parseReturnStatement();\n            case 'switch':\n                return parseSwitchStatement();\n            case 'throw':\n                return parseThrowStatement();\n            case 'try':\n                return parseTryStatement();\n            case 'var':\n                return parseVariableStatement();\n            case 'while':\n                return parseWhileStatement();\n            case 'with':\n                return parseWithStatement();\n            default:\n                break;\n            }\n        }\n\n        expr = parseExpression();\n\n        // 12.12 Labelled Statements\n        if ((expr.type === Syntax.Identifier) && match(':')) {\n            lex();\n\n            if (Object.prototype.hasOwnProperty.call(state.labelSet, expr.name)) {\n                throwError({}, Messages.Redeclaration, 'Label', expr.name);\n            }\n\n            state.labelSet[expr.name] = true;\n            labeledBody = parseStatement();\n            delete state.labelSet[expr.name];\n\n            return {\n                type: Syntax.LabeledStatement,\n                label: expr,\n                body: labeledBody\n            };\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExpressionStatement,\n            expression: expr\n        };\n    }\n\n    // 13 Function Definition\n\n    function parseFunctionSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted,\n            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody;\n\n        expect('{');\n\n        while (index < length) {\n            token = lookahead();\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        oldLabelSet = state.labelSet;\n        oldInIteration = state.inIteration;\n        oldInSwitch = state.inSwitch;\n        oldInFunctionBody = state.inFunctionBody;\n\n        state.labelSet = {};\n        state.inIteration = false;\n        state.inSwitch = false;\n        state.inFunctionBody = true;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n\n        expect('}');\n\n        state.labelSet = oldLabelSet;\n        state.inIteration = oldInIteration;\n        state.inSwitch = oldInSwitch;\n        state.inFunctionBody = oldInFunctionBody;\n\n        return {\n            type: Syntax.BlockStatement,\n            body: sourceElements\n        };\n    }\n\n    function parseFunctionDeclaration() {\n        var id, param, params = [], body, token, stricted, firstRestricted, message, previousStrict, paramSet;\n\n        expectKeyword('function');\n        token = lookahead();\n        id = parseVariableIdentifier();\n        if (strict) {\n            if (isRestrictedWord(token.value)) {\n                throwErrorTolerant(token, Messages.StrictFunctionName);\n            }\n        } else {\n            if (isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictFunctionName;\n            } else if (isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictReservedWord;\n            }\n        }\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamName;\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            throwErrorTolerant(stricted, message);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionDeclaration,\n            id: id,\n            params: params,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: false,\n            expression: false\n        };\n    }\n\n    function parseFunctionExpression() {\n        var token, id = null, stricted, firstRestricted, message, param, params = [], body, previousStrict, paramSet;\n\n        expectKeyword('function');\n\n        if (!match('(')) {\n            token = lookahead();\n            id = parseVariableIdentifier();\n            if (strict) {\n                if (isRestrictedWord(token.value)) {\n                    throwErrorTolerant(token, Messages.StrictFunctionName);\n                }\n            } else {\n                if (isRestrictedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictFunctionName;\n                } else if (isStrictModeReservedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictReservedWord;\n                }\n            }\n        }\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamName;\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            throwErrorTolerant(stricted, message);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionExpression,\n            id: id,\n            params: params,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: false,\n            expression: false\n        };\n    }\n\n    // 14 Program\n\n    function parseSourceElement() {\n        var token = lookahead();\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'const':\n            case 'let':\n                return parseConstLetDeclaration(token.value);\n            case 'function':\n                return parseFunctionDeclaration();\n            default:\n                return parseStatement();\n            }\n        }\n\n        if (token.type !== Token.EOF) {\n            return parseStatement();\n        }\n    }\n\n    function parseSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted;\n\n        while (index < length) {\n            token = lookahead();\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        while (index < length) {\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n        return sourceElements;\n    }\n\n    function parseProgram() {\n        var program;\n        strict = false;\n        program = {\n            type: Syntax.Program,\n            body: parseSourceElements()\n        };\n        return program;\n    }\n\n    // The following functions are needed only when the option to preserve\n    // the comments is active.\n\n    function addComment(type, value, start, end, loc) {\n        assert(typeof start === 'number', 'Comment must have valid position');\n\n        // Because the way the actual token is scanned, often the comments\n        // (if any) are skipped twice during the lexical analysis.\n        // Thus, we need to skip adding a comment if the comment array already\n        // handled it.\n        if (extra.comments.length > 0) {\n            if (extra.comments[extra.comments.length - 1].range[1] > start) {\n                return;\n            }\n        }\n\n        extra.comments.push({\n            type: type,\n            value: value,\n            range: [start, end],\n            loc: loc\n        });\n    }\n\n    function scanComment() {\n        var comment, ch, loc, start, blockComment, lineComment;\n\n        comment = '';\n        blockComment = false;\n        lineComment = false;\n\n        while (index < length) {\n            ch = source[index];\n\n            if (lineComment) {\n                ch = source[index++];\n                if (isLineTerminator(ch)) {\n                    loc.end = {\n                        line: lineNumber,\n                        column: index - lineStart - 1\n                    };\n                    lineComment = false;\n                    addComment('Line', comment, start, index - 1, loc);\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    lineStart = index;\n                    comment = '';\n                } else if (index >= length) {\n                    lineComment = false;\n                    comment += ch;\n                    loc.end = {\n                        line: lineNumber,\n                        column: length - lineStart\n                    };\n                    addComment('Line', comment, start, length, loc);\n                } else {\n                    comment += ch;\n                }\n            } else if (blockComment) {\n                if (isLineTerminator(ch)) {\n                    if (ch === '\\r' && source[index + 1] === '\\n') {\n                        ++index;\n                        comment += '\\r\\n';\n                    } else {\n                        comment += ch;\n                    }\n                    ++lineNumber;\n                    ++index;\n                    lineStart = index;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    ch = source[index++];\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                    comment += ch;\n                    if (ch === '*') {\n                        ch = source[index];\n                        if (ch === '/') {\n                            comment = comment.substr(0, comment.length - 1);\n                            blockComment = false;\n                            ++index;\n                            loc.end = {\n                                line: lineNumber,\n                                column: index - lineStart\n                            };\n                            addComment('Block', comment, start, index, loc);\n                            comment = '';\n                        }\n                    }\n                }\n            } else if (ch === '/') {\n                ch = source[index + 1];\n                if (ch === '/') {\n                    loc = {\n                        start: {\n                            line: lineNumber,\n                            column: index - lineStart\n                        }\n                    };\n                    start = index;\n                    index += 2;\n                    lineComment = true;\n                    if (index >= length) {\n                        loc.end = {\n                            line: lineNumber,\n                            column: index - lineStart\n                        };\n                        lineComment = false;\n                        addComment('Line', comment, start, index, loc);\n                    }\n                } else if (ch === '*') {\n                    start = index;\n                    index += 2;\n                    blockComment = true;\n                    loc = {\n                        start: {\n                            line: lineNumber,\n                            column: index - lineStart - 2\n                        }\n                    };\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    break;\n                }\n            } else if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n            } else {\n                break;\n            }\n        }\n    }\n\n    function filterCommentLocation() {\n        var i, entry, comment, comments = [];\n\n        for (i = 0; i < extra.comments.length; ++i) {\n            entry = extra.comments[i];\n            comment = {\n                type: entry.type,\n                value: entry.value\n            };\n            if (extra.range) {\n                comment.range = entry.range;\n            }\n            if (extra.loc) {\n                comment.loc = entry.loc;\n            }\n            comments.push(comment);\n        }\n\n        extra.comments = comments;\n    }\n\n    function collectToken() {\n        var start, loc, token, range, value;\n\n        skipComment();\n        start = index;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        token = extra.advance();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        if (token.type !== Token.EOF) {\n            range = [token.range[0], token.range[1]];\n            value = sliceSource(token.range[0], token.range[1]);\n            extra.tokens.push({\n                type: TokenName[token.type],\n                value: value,\n                range: range,\n                loc: loc\n            });\n        }\n\n        return token;\n    }\n\n    function collectRegex() {\n        var pos, loc, regex, token;\n\n        skipComment();\n\n        pos = index;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        regex = extra.scanRegExp();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        // Pop the previous token, which is likely '/' or '/='\n        if (extra.tokens.length > 0) {\n            token = extra.tokens[extra.tokens.length - 1];\n            if (token.range[0] === pos && token.type === 'Punctuator') {\n                if (token.value === '/' || token.value === '/=') {\n                    extra.tokens.pop();\n                }\n            }\n        }\n\n        extra.tokens.push({\n            type: 'RegularExpression',\n            value: regex.literal,\n            range: [pos, index],\n            loc: loc\n        });\n\n        return regex;\n    }\n\n    function filterTokenLocation() {\n        var i, entry, token, tokens = [];\n\n        for (i = 0; i < extra.tokens.length; ++i) {\n            entry = extra.tokens[i];\n            token = {\n                type: entry.type,\n                value: entry.value\n            };\n            if (extra.range) {\n                token.range = entry.range;\n            }\n            if (extra.loc) {\n                token.loc = entry.loc;\n            }\n            tokens.push(token);\n        }\n\n        extra.tokens = tokens;\n    }\n\n    function createLiteral(token) {\n        return {\n            type: Syntax.Literal,\n            value: token.value\n        };\n    }\n\n    function createRawLiteral(token) {\n        return {\n            type: Syntax.Literal,\n            value: token.value,\n            raw: sliceSource(token.range[0], token.range[1])\n        };\n    }\n\n    function createLocationMarker() {\n        var marker = {};\n\n        marker.range = [index, index];\n        marker.loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            },\n            end: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        marker.end = function () {\n            this.range[1] = index;\n            this.loc.end.line = lineNumber;\n            this.loc.end.column = index - lineStart;\n        };\n\n        marker.applyGroup = function (node) {\n            if (extra.range) {\n                node.groupRange = [this.range[0], this.range[1]];\n            }\n            if (extra.loc) {\n                node.groupLoc = {\n                    start: {\n                        line: this.loc.start.line,\n                        column: this.loc.start.column\n                    },\n                    end: {\n                        line: this.loc.end.line,\n                        column: this.loc.end.column\n                    }\n                };\n            }\n        };\n\n        marker.apply = function (node) {\n            if (extra.range) {\n                node.range = [this.range[0], this.range[1]];\n            }\n            if (extra.loc) {\n                node.loc = {\n                    start: {\n                        line: this.loc.start.line,\n                        column: this.loc.start.column\n                    },\n                    end: {\n                        line: this.loc.end.line,\n                        column: this.loc.end.column\n                    }\n                };\n            }\n        };\n\n        return marker;\n    }\n\n    function trackGroupExpression() {\n        var marker, expr;\n\n        skipComment();\n        marker = createLocationMarker();\n        expect('(');\n\n        expr = parseExpression();\n\n        expect(')');\n\n        marker.end();\n        marker.applyGroup(expr);\n\n        return expr;\n    }\n\n    function trackLeftHandSideExpression() {\n        var marker, expr;\n\n        skipComment();\n        marker = createLocationMarker();\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[')) {\n            if (match('[')) {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: true,\n                    object: expr,\n                    property: parseComputedMember()\n                };\n                marker.end();\n                marker.apply(expr);\n            } else {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: false,\n                    object: expr,\n                    property: parseNonComputedMember()\n                };\n                marker.end();\n                marker.apply(expr);\n            }\n        }\n\n        return expr;\n    }\n\n    function trackLeftHandSideExpressionAllowCall() {\n        var marker, expr;\n\n        skipComment();\n        marker = createLocationMarker();\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[') || match('(')) {\n            if (match('(')) {\n                expr = {\n                    type: Syntax.CallExpression,\n                    callee: expr,\n                    'arguments': parseArguments()\n                };\n                marker.end();\n                marker.apply(expr);\n            } else if (match('[')) {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: true,\n                    object: expr,\n                    property: parseComputedMember()\n                };\n                marker.end();\n                marker.apply(expr);\n            } else {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: false,\n                    object: expr,\n                    property: parseNonComputedMember()\n                };\n                marker.end();\n                marker.apply(expr);\n            }\n        }\n\n        return expr;\n    }\n\n    function filterGroup(node) {\n        var n, i, entry;\n\n        n = (Object.prototype.toString.apply(node) === '[object Array]') ? [] : {};\n        for (i in node) {\n            if (node.hasOwnProperty(i) && i !== 'groupRange' && i !== 'groupLoc') {\n                entry = node[i];\n                if (entry === null || typeof entry !== 'object' || entry instanceof RegExp) {\n                    n[i] = entry;\n                } else {\n                    n[i] = filterGroup(entry);\n                }\n            }\n        }\n        return n;\n    }\n\n    function wrapTrackingFunction(range, loc) {\n\n        return function (parseFunction) {\n\n            function isBinary(node) {\n                return node.type === Syntax.LogicalExpression ||\n                    node.type === Syntax.BinaryExpression;\n            }\n\n            function visit(node) {\n                var start, end;\n\n                if (isBinary(node.left)) {\n                    visit(node.left);\n                }\n                if (isBinary(node.right)) {\n                    visit(node.right);\n                }\n\n                if (range) {\n                    if (node.left.groupRange || node.right.groupRange) {\n                        start = node.left.groupRange ? node.left.groupRange[0] : node.left.range[0];\n                        end = node.right.groupRange ? node.right.groupRange[1] : node.right.range[1];\n                        node.range = [start, end];\n                    } else if (typeof node.range === 'undefined') {\n                        start = node.left.range[0];\n                        end = node.right.range[1];\n                        node.range = [start, end];\n                    }\n                }\n                if (loc) {\n                    if (node.left.groupLoc || node.right.groupLoc) {\n                        start = node.left.groupLoc ? node.left.groupLoc.start : node.left.loc.start;\n                        end = node.right.groupLoc ? node.right.groupLoc.end : node.right.loc.end;\n                        node.loc = {\n                            start: start,\n                            end: end\n                        };\n                    } else if (typeof node.loc === 'undefined') {\n                        node.loc = {\n                            start: node.left.loc.start,\n                            end: node.right.loc.end\n                        };\n                    }\n                }\n            }\n\n            return function () {\n                var marker, node;\n\n                skipComment();\n\n                marker = createLocationMarker();\n                node = parseFunction.apply(null, arguments);\n                marker.end();\n\n                if (range && typeof node.range === 'undefined') {\n                    marker.apply(node);\n                }\n\n                if (loc && typeof node.loc === 'undefined') {\n                    marker.apply(node);\n                }\n\n                if (isBinary(node)) {\n                    visit(node);\n                }\n\n                return node;\n            };\n        };\n    }\n\n    function patch() {\n\n        var wrapTracking;\n\n        if (extra.comments) {\n            extra.skipComment = skipComment;\n            skipComment = scanComment;\n        }\n\n        if (extra.raw) {\n            extra.createLiteral = createLiteral;\n            createLiteral = createRawLiteral;\n        }\n\n        if (extra.range || extra.loc) {\n\n            extra.parseGroupExpression = parseGroupExpression;\n            extra.parseLeftHandSideExpression = parseLeftHandSideExpression;\n            extra.parseLeftHandSideExpressionAllowCall = parseLeftHandSideExpressionAllowCall;\n            parseGroupExpression = trackGroupExpression;\n            parseLeftHandSideExpression = trackLeftHandSideExpression;\n            parseLeftHandSideExpressionAllowCall = trackLeftHandSideExpressionAllowCall;\n\n            wrapTracking = wrapTrackingFunction(extra.range, extra.loc);\n\n            extra.parseAdditiveExpression = parseAdditiveExpression;\n            extra.parseAssignmentExpression = parseAssignmentExpression;\n            extra.parseBitwiseANDExpression = parseBitwiseANDExpression;\n            extra.parseBitwiseORExpression = parseBitwiseORExpression;\n            extra.parseBitwiseXORExpression = parseBitwiseXORExpression;\n            extra.parseBlock = parseBlock;\n            extra.parseFunctionSourceElements = parseFunctionSourceElements;\n            extra.parseCatchClause = parseCatchClause;\n            extra.parseComputedMember = parseComputedMember;\n            extra.parseConditionalExpression = parseConditionalExpression;\n            extra.parseConstLetDeclaration = parseConstLetDeclaration;\n            extra.parseEqualityExpression = parseEqualityExpression;\n            extra.parseExpression = parseExpression;\n            extra.parseForVariableDeclaration = parseForVariableDeclaration;\n            extra.parseFunctionDeclaration = parseFunctionDeclaration;\n            extra.parseFunctionExpression = parseFunctionExpression;\n            extra.parseLogicalANDExpression = parseLogicalANDExpression;\n            extra.parseLogicalORExpression = parseLogicalORExpression;\n            extra.parseMultiplicativeExpression = parseMultiplicativeExpression;\n            extra.parseNewExpression = parseNewExpression;\n            extra.parseNonComputedProperty = parseNonComputedProperty;\n            extra.parseObjectProperty = parseObjectProperty;\n            extra.parseObjectPropertyKey = parseObjectPropertyKey;\n            extra.parsePostfixExpression = parsePostfixExpression;\n            extra.parsePrimaryExpression = parsePrimaryExpression;\n            extra.parseProgram = parseProgram;\n            extra.parsePropertyFunction = parsePropertyFunction;\n            extra.parseRelationalExpression = parseRelationalExpression;\n            extra.parseStatement = parseStatement;\n            extra.parseShiftExpression = parseShiftExpression;\n            extra.parseSwitchCase = parseSwitchCase;\n            extra.parseUnaryExpression = parseUnaryExpression;\n            extra.parseVariableDeclaration = parseVariableDeclaration;\n            extra.parseVariableIdentifier = parseVariableIdentifier;\n\n            parseAdditiveExpression = wrapTracking(extra.parseAdditiveExpression);\n            parseAssignmentExpression = wrapTracking(extra.parseAssignmentExpression);\n            parseBitwiseANDExpression = wrapTracking(extra.parseBitwiseANDExpression);\n            parseBitwiseORExpression = wrapTracking(extra.parseBitwiseORExpression);\n            parseBitwiseXORExpression = wrapTracking(extra.parseBitwiseXORExpression);\n            parseBlock = wrapTracking(extra.parseBlock);\n            parseFunctionSourceElements = wrapTracking(extra.parseFunctionSourceElements);\n            parseCatchClause = wrapTracking(extra.parseCatchClause);\n            parseComputedMember = wrapTracking(extra.parseComputedMember);\n            parseConditionalExpression = wrapTracking(extra.parseConditionalExpression);\n            parseConstLetDeclaration = wrapTracking(extra.parseConstLetDeclaration);\n            parseEqualityExpression = wrapTracking(extra.parseEqualityExpression);\n            parseExpression = wrapTracking(extra.parseExpression);\n            parseForVariableDeclaration = wrapTracking(extra.parseForVariableDeclaration);\n            parseFunctionDeclaration = wrapTracking(extra.parseFunctionDeclaration);\n            parseFunctionExpression = wrapTracking(extra.parseFunctionExpression);\n            parseLeftHandSideExpression = wrapTracking(parseLeftHandSideExpression);\n            parseLogicalANDExpression = wrapTracking(extra.parseLogicalANDExpression);\n            parseLogicalORExpression = wrapTracking(extra.parseLogicalORExpression);\n            parseMultiplicativeExpression = wrapTracking(extra.parseMultiplicativeExpression);\n            parseNewExpression = wrapTracking(extra.parseNewExpression);\n            parseNonComputedProperty = wrapTracking(extra.parseNonComputedProperty);\n            parseObjectProperty = wrapTracking(extra.parseObjectProperty);\n            parseObjectPropertyKey = wrapTracking(extra.parseObjectPropertyKey);\n            parsePostfixExpression = wrapTracking(extra.parsePostfixExpression);\n            parsePrimaryExpression = wrapTracking(extra.parsePrimaryExpression);\n            parseProgram = wrapTracking(extra.parseProgram);\n            parsePropertyFunction = wrapTracking(extra.parsePropertyFunction);\n            parseRelationalExpression = wrapTracking(extra.parseRelationalExpression);\n            parseStatement = wrapTracking(extra.parseStatement);\n            parseShiftExpression = wrapTracking(extra.parseShiftExpression);\n            parseSwitchCase = wrapTracking(extra.parseSwitchCase);\n            parseUnaryExpression = wrapTracking(extra.parseUnaryExpression);\n            parseVariableDeclaration = wrapTracking(extra.parseVariableDeclaration);\n            parseVariableIdentifier = wrapTracking(extra.parseVariableIdentifier);\n        }\n\n        if (typeof extra.tokens !== 'undefined') {\n            extra.advance = advance;\n            extra.scanRegExp = scanRegExp;\n\n            advance = collectToken;\n            scanRegExp = collectRegex;\n        }\n    }\n\n    function unpatch() {\n        if (typeof extra.skipComment === 'function') {\n            skipComment = extra.skipComment;\n        }\n\n        if (extra.raw) {\n            createLiteral = extra.createLiteral;\n        }\n\n        if (extra.range || extra.loc) {\n            parseAdditiveExpression = extra.parseAdditiveExpression;\n            parseAssignmentExpression = extra.parseAssignmentExpression;\n            parseBitwiseANDExpression = extra.parseBitwiseANDExpression;\n            parseBitwiseORExpression = extra.parseBitwiseORExpression;\n            parseBitwiseXORExpression = extra.parseBitwiseXORExpression;\n            parseBlock = extra.parseBlock;\n            parseFunctionSourceElements = extra.parseFunctionSourceElements;\n            parseCatchClause = extra.parseCatchClause;\n            parseComputedMember = extra.parseComputedMember;\n            parseConditionalExpression = extra.parseConditionalExpression;\n            parseConstLetDeclaration = extra.parseConstLetDeclaration;\n            parseEqualityExpression = extra.parseEqualityExpression;\n            parseExpression = extra.parseExpression;\n            parseForVariableDeclaration = extra.parseForVariableDeclaration;\n            parseFunctionDeclaration = extra.parseFunctionDeclaration;\n            parseFunctionExpression = extra.parseFunctionExpression;\n            parseGroupExpression = extra.parseGroupExpression;\n            parseLeftHandSideExpression = extra.parseLeftHandSideExpression;\n            parseLeftHandSideExpressionAllowCall = extra.parseLeftHandSideExpressionAllowCall;\n            parseLogicalANDExpression = extra.parseLogicalANDExpression;\n            parseLogicalORExpression = extra.parseLogicalORExpression;\n            parseMultiplicativeExpression = extra.parseMultiplicativeExpression;\n            parseNewExpression = extra.parseNewExpression;\n            parseNonComputedProperty = extra.parseNonComputedProperty;\n            parseObjectProperty = extra.parseObjectProperty;\n            parseObjectPropertyKey = extra.parseObjectPropertyKey;\n            parsePrimaryExpression = extra.parsePrimaryExpression;\n            parsePostfixExpression = extra.parsePostfixExpression;\n            parseProgram = extra.parseProgram;\n            parsePropertyFunction = extra.parsePropertyFunction;\n            parseRelationalExpression = extra.parseRelationalExpression;\n            parseStatement = extra.parseStatement;\n            parseShiftExpression = extra.parseShiftExpression;\n            parseSwitchCase = extra.parseSwitchCase;\n            parseUnaryExpression = extra.parseUnaryExpression;\n            parseVariableDeclaration = extra.parseVariableDeclaration;\n            parseVariableIdentifier = extra.parseVariableIdentifier;\n        }\n\n        if (typeof extra.scanRegExp === 'function') {\n            advance = extra.advance;\n            scanRegExp = extra.scanRegExp;\n        }\n    }\n\n    function stringToArray(str) {\n        var length = str.length,\n            result = [],\n            i;\n        for (i = 0; i < length; ++i) {\n            result[i] = str.charAt(i);\n        }\n        return result;\n    }\n\n    function parse(code, options) {\n        var program, toString;\n\n        toString = String;\n        if (typeof code !== 'string' && !(code instanceof String)) {\n            code = toString(code);\n        }\n\n        source = code;\n        index = 0;\n        lineNumber = (source.length > 0) ? 1 : 0;\n        lineStart = 0;\n        length = source.length;\n        buffer = null;\n        state = {\n            allowIn: true,\n            labelSet: {},\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false\n        };\n\n        extra = {};\n        if (typeof options !== 'undefined') {\n            extra.range = (typeof options.range === 'boolean') && options.range;\n            extra.loc = (typeof options.loc === 'boolean') && options.loc;\n            extra.raw = (typeof options.raw === 'boolean') && options.raw;\n            if (typeof options.tokens === 'boolean' && options.tokens) {\n                extra.tokens = [];\n            }\n            if (typeof options.comment === 'boolean' && options.comment) {\n                extra.comments = [];\n            }\n            if (typeof options.tolerant === 'boolean' && options.tolerant) {\n                extra.errors = [];\n            }\n        }\n\n        if (length > 0) {\n            if (typeof source[0] === 'undefined') {\n                // Try first to convert to a string. This is good as fast path\n                // for old IE which understands string indexing for string\n                // literals only and not for string object.\n                if (code instanceof String) {\n                    source = code.valueOf();\n                }\n\n                // Force accessing the characters via an array.\n                if (typeof source[0] === 'undefined') {\n                    source = stringToArray(code);\n                }\n            }\n        }\n\n        patch();\n        try {\n            program = parseProgram();\n            if (typeof extra.comments !== 'undefined') {\n                filterCommentLocation();\n                program.comments = extra.comments;\n            }\n            if (typeof extra.tokens !== 'undefined') {\n                filterTokenLocation();\n                program.tokens = extra.tokens;\n            }\n            if (typeof extra.errors !== 'undefined') {\n                program.errors = extra.errors;\n            }\n            if (extra.range || extra.loc) {\n                program.body = filterGroup(program.body);\n            }\n        } catch (e) {\n            throw e;\n        } finally {\n            unpatch();\n            extra = {};\n        }\n\n        return program;\n    }\n\n    // Sync with package.json.\n    exports.version = '1.0.4';\n\n    exports.parse = parse;\n\n    // Deep copy.\n    exports.Syntax = (function () {\n        var name, types = {};\n\n        if (typeof Object.create === 'function') {\n            types = Object.create(null);\n        }\n\n        for (name in Syntax) {\n            if (Syntax.hasOwnProperty(name)) {\n                types[name] = Syntax[name];\n            }\n        }\n\n        if (typeof Object.freeze === 'function') {\n            Object.freeze(types);\n        }\n\n        return types;\n    }());\n\n}));\n/* vim: set sw=4 ts=4 et tw=80 : */\n","/*!\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Primary Exports\n */\n\nvar exports = module.exports = getType;\n\n/**\n * ### typeOf (obj)\n *\n * Use several different techniques to determine\n * the type of object being tested.\n *\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nvar objectTypeRegexp = /^\\[object (.*)\\]$/;\n\nfunction getType(obj) {\n  var type = Object.prototype.toString.call(obj).match(objectTypeRegexp)[1].toLowerCase();\n  // Let \"new String('')\" return 'object'\n  if (typeof Promise === 'function' && obj instanceof Promise) return 'promise';\n  // PhantomJS has type \"DOMWindow\" for null\n  if (obj === null) return 'null';\n  // PhantomJS has type \"DOMWindow\" for undefined\n  if (obj === undefined) return 'undefined';\n  return type;\n}\n\nexports.Library = Library;\n\n/**\n * ### Library\n *\n * Create a repository for custom type detection.\n *\n * ```js\n * var lib = new type.Library;\n * ```\n *\n */\n\nfunction Library() {\n  if (!(this instanceof Library)) return new Library();\n  this.tests = {};\n}\n\n/**\n * #### .of (obj)\n *\n * Expose replacement `typeof` detection to the library.\n *\n * ```js\n * if ('string' === lib.of('hello world')) {\n *   // ...\n * }\n * ```\n *\n * @param {Mixed} object to test\n * @return {String} type\n */\n\nLibrary.prototype.of = getType;\n\n/**\n * #### .define (type, test)\n *\n * Add a test to for the `.test()` assertion.\n *\n * Can be defined as a regular expression:\n *\n * ```js\n * lib.define('int', /^[0-9]+$/);\n * ```\n *\n * ... or as a function:\n *\n * ```js\n * lib.define('bln', function (obj) {\n *   if ('boolean' === lib.of(obj)) return true;\n *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n *   return !! ~blns.indexOf(obj);\n * });\n * ```\n *\n * @param {String} type\n * @param {RegExp|Function} test\n * @api public\n */\n\nLibrary.prototype.define = function(type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};\n\n/**\n * #### .test (obj, test)\n *\n * Assert that an object is of type. Will first\n * check natives, and if that does not pass it will\n * use the user defined custom tests.\n *\n * ```js\n * assert(lib.test('1', 'int'));\n * assert(lib.test('yes', 'bln'));\n * ```\n *\n * @param {Mixed} object\n * @param {String} type\n * @return {Boolean} result\n * @api public\n */\n\nLibrary.prototype.test = function(obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n","const assert = require('chai').assert;\n\nmodule.exports = [\n\n  {\n    name: 'Create Array',\n    prompt: 'Create and return an array that contains \\'apple\\' and \\'banana\\'',\n    answer: `const fruits = ['apple', 'banana'];\\rreturn fruits;`,\n    tests: [\n      {\n        name: 'Output must be correct',\n        type: 'assertCorrectOutput',\n        test: function(output) {\n          return (assert.deepEqual(output, ['apple', 'banana']) === undefined);\n        }\n      }\n    ]\n  },\n  {\n    name: 'Access Array item by index (first)',\n    prompt: 'Return the first value of the Array',\n    given: `const fruits = ['apple', 'banana'];\\r`,\n    answer: `const fruits = ['apple', 'banana'];\\rreturn fruits[0];`,\n    tests: [\n      {\n        name: 'Output must be correct',\n        type: 'assertCorrectOutput',\n        test: function(output) {\n          return (assert.deepEqual(output, 'apple') === undefined);\n        }\n      }\n    ]\n  },\n  {\n    name: 'Access Array item by index (second)',\n    prompt: 'Return the second value of the Array',\n    given: `const fruits = ['apple', 'banana'];\\r`,\n    answer: `const fruits = ['apple', 'banana'];\\rreturn fruits[1];`,\n    tests: [\n      {\n        name: 'Output must be correct',\n        type: 'assertCorrectOutput',\n        test: function(output) {\n          return (assert.deepEqual(output, 'banana') === undefined);\n        }\n      }\n    ]\n  },\n  {\n    name: 'Loop over array',\n    prompt: 'Loop over the array, and push each fruit into a new array, then return the new array',\n    given: `const fruits = ['apple', 'banana'];\\r`,\n    answer: `const fruits = ['apple', 'banana'];\\rconst newFruits = [];\\rfruits.forEach(function(item) {\\r  newFruits.push(item);\\r});\\rreturn newFruits;`,\n    tests: [\n      {\n        name: 'Output must be correct',\n        type: 'assertCorrectOutput',\n        test: function(output) {\n          return (assert.deepEqual(output, ['apple', 'banana']) === undefined);\n        }\n      }\n    ]\n  }\n\n];\n"]}